// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `SubscriberRecord.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceStorm_SubscriberRecord_h__
#define __IceStorm_SubscriberRecord_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Identity.h>
#include <IceStorm/IceStorm.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_STORM_SERVICE_API
#   ifdef ICE_STORM_SERVICE_API_EXPORTS
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

}

namespace IceStorm
{

struct SubscriberRecordKey
{
    ::Ice::Identity topic;
    ::Ice::Identity id;

    bool operator==(const SubscriberRecordKey& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(topic != __rhs.topic)
        {
            return false;
        }
        if(id != __rhs.id)
        {
            return false;
        }
        return true;
    }

    bool operator<(const SubscriberRecordKey& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(topic < __rhs.topic)
        {
            return true;
        }
        else if(__rhs.topic < topic)
        {
            return false;
        }
        if(id < __rhs.id)
        {
            return true;
        }
        else if(__rhs.id < id)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const SubscriberRecordKey& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const SubscriberRecordKey& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const SubscriberRecordKey& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const SubscriberRecordKey& __rhs) const
    {
        return !operator<(__rhs);
    }
};

struct SubscriberRecord
{
    ::std::string topicName;
    ::Ice::Identity id;
    bool link;
    ::Ice::ObjectPrx obj;
    ::IceStorm::QoS theQoS;
    ::Ice::Int cost;
    ::IceStorm::TopicPrx theTopic;
};

typedef ::std::vector< ::IceStorm::SubscriberRecord> SubscriberRecordSeq;

}

namespace Ice
{
template<>
struct StreamableTraits< ::IceStorm::SubscriberRecordKey>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IceStorm::SubscriberRecordKey, S>
{
    static void write(S* __os, const ::IceStorm::SubscriberRecordKey& v)
    {
        __os->write(v.topic);
        __os->write(v.id);
    }
};

template<class S>
struct StreamReader< ::IceStorm::SubscriberRecordKey, S>
{
    static void read(S* __is, ::IceStorm::SubscriberRecordKey& v)
    {
        __is->read(v.topic);
        __is->read(v.id);
    }
};

#if defined(ICE_HAS_DECLSPEC_IMPORT_EXPORT) && !defined(ICE_STORM_SERVICE_API_EXPORTS)
template struct ICE_STORM_SERVICE_API StreamWriter< ::IceStorm::SubscriberRecordKey, ::IceInternal::BasicStream>;
template struct ICE_STORM_SERVICE_API StreamReader< ::IceStorm::SubscriberRecordKey, ::IceInternal::BasicStream>;
#endif

template<>
struct StreamableTraits< ::IceStorm::SubscriberRecord>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 13;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IceStorm::SubscriberRecord, S>
{
    static void write(S* __os, const ::IceStorm::SubscriberRecord& v)
    {
        __os->write(v.topicName);
        __os->write(v.id);
        __os->write(v.link);
        __os->write(v.obj);
        __os->write(v.theQoS);
        __os->write(v.cost);
        __os->write(v.theTopic);
    }
};

template<class S>
struct StreamReader< ::IceStorm::SubscriberRecord, S>
{
    static void read(S* __is, ::IceStorm::SubscriberRecord& v)
    {
        __is->read(v.topicName);
        __is->read(v.id);
        __is->read(v.link);
        __is->read(v.obj);
        __is->read(v.theQoS);
        __is->read(v.cost);
        __is->read(v.theTopic);
    }
};

#if defined(ICE_HAS_DECLSPEC_IMPORT_EXPORT) && !defined(ICE_STORM_SERVICE_API_EXPORTS)
template struct ICE_STORM_SERVICE_API StreamWriter< ::IceStorm::SubscriberRecord, ::IceInternal::BasicStream>;
template struct ICE_STORM_SERVICE_API StreamReader< ::IceStorm::SubscriberRecord, ::IceInternal::BasicStream>;
#endif

}

namespace IceProxy
{

}

namespace IceDelegate
{

}

namespace IceDelegateM
{

}

namespace IceDelegateD
{

}

#endif
