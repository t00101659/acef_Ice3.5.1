// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `LLURecord.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceStorm_LLURecord_h__
#define __IceStorm_LLURecord_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_STORM_SERVICE_API
#   ifdef ICE_STORM_SERVICE_API_EXPORTS
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceStormElection
{

struct LogUpdate
{
    ::Ice::Long generation;
    ::Ice::Long iteration;

    bool operator==(const LogUpdate& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(generation != __rhs.generation)
        {
            return false;
        }
        if(iteration != __rhs.iteration)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LogUpdate& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(generation < __rhs.generation)
        {
            return true;
        }
        else if(__rhs.generation < generation)
        {
            return false;
        }
        if(iteration < __rhs.iteration)
        {
            return true;
        }
        else if(__rhs.iteration < iteration)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LogUpdate& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LogUpdate& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LogUpdate& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LogUpdate& __rhs) const
    {
        return !operator<(__rhs);
    }
};

}

namespace Ice
{
template<>
struct StreamableTraits< ::IceStormElection::LogUpdate>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStruct;
    static const int minWireSize = 16;
    static const bool fixedLength = true;
};

template<class S>
struct StreamWriter< ::IceStormElection::LogUpdate, S>
{
    static void write(S* __os, const ::IceStormElection::LogUpdate& v)
    {
        __os->write(v.generation);
        __os->write(v.iteration);
    }
};

template<class S>
struct StreamReader< ::IceStormElection::LogUpdate, S>
{
    static void read(S* __is, ::IceStormElection::LogUpdate& v)
    {
        __is->read(v.generation);
        __is->read(v.iteration);
    }
};

#if defined(ICE_HAS_DECLSPEC_IMPORT_EXPORT) && !defined(ICE_STORM_SERVICE_API_EXPORTS)
template struct ICE_STORM_SERVICE_API StreamWriter< ::IceStormElection::LogUpdate, ::IceInternal::BasicStream>;
template struct ICE_STORM_SERVICE_API StreamReader< ::IceStormElection::LogUpdate, ::IceInternal::BasicStream>;
#endif

}

#endif
