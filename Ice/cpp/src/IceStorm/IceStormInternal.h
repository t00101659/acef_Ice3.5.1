// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IceStormInternal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceStorm_IceStormInternal_h__
#define __IceStorm_IceStormInternal_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <IceStorm/IceStorm.h>
#include <IceStorm/Election.h>
#include <Ice/Current.h>
#include <Ice/UndefSysMacros.h>
#include <deque>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_STORM_SERVICE_API
#   ifdef ICE_STORM_SERVICE_API_EXPORTS
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

namespace IceStorm
{

class TopicLink;
ICE_STORM_SERVICE_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::TopicLink>&);
ICE_STORM_SERVICE_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceStorm::TopicLink*);

class TopicInternal;
ICE_STORM_SERVICE_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::TopicInternal>&);
ICE_STORM_SERVICE_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceStorm::TopicInternal*);

class TopicManagerInternal;
ICE_STORM_SERVICE_API void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::TopicManagerInternal>&);
ICE_STORM_SERVICE_API ::IceProxy::Ice::Object* upCast(::IceProxy::IceStorm::TopicManagerInternal*);

}

}

namespace IceStorm
{

class TopicLink;
bool operator==(const TopicLink&, const TopicLink&);
bool operator<(const TopicLink&, const TopicLink&);
ICE_STORM_SERVICE_API ::Ice::Object* upCast(::IceStorm::TopicLink*);
typedef ::IceInternal::Handle< ::IceStorm::TopicLink> TopicLinkPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::TopicLink> TopicLinkPrx;
ICE_STORM_SERVICE_API void __patch(TopicLinkPtr&, const ::Ice::ObjectPtr&);

class TopicInternal;
bool operator==(const TopicInternal&, const TopicInternal&);
bool operator<(const TopicInternal&, const TopicInternal&);
ICE_STORM_SERVICE_API ::Ice::Object* upCast(::IceStorm::TopicInternal*);
typedef ::IceInternal::Handle< ::IceStorm::TopicInternal> TopicInternalPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::TopicInternal> TopicInternalPrx;
ICE_STORM_SERVICE_API void __patch(TopicInternalPtr&, const ::Ice::ObjectPtr&);

class TopicManagerInternal;
bool operator==(const TopicManagerInternal&, const TopicManagerInternal&);
bool operator<(const TopicManagerInternal&, const TopicManagerInternal&);
ICE_STORM_SERVICE_API ::Ice::Object* upCast(::IceStorm::TopicManagerInternal*);
typedef ::IceInternal::Handle< ::IceStorm::TopicManagerInternal> TopicManagerInternalPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::TopicManagerInternal> TopicManagerInternalPrx;
ICE_STORM_SERVICE_API void __patch(TopicManagerInternalPtr&, const ::Ice::ObjectPtr&);

}

namespace IceStorm
{

class ICE_STORM_SERVICE_API EventData : public IceUtil::Shared
{
public:
    
    EventData() {}
    EventData(const ::std::string& __ice_op, ::Ice::OperationMode __ice_mode, const ::Ice::ByteSeq& __ice_data, const ::Ice::Context& __ice_context) :
        op(__ice_op),
        mode(__ice_mode),
        data(__ice_data),
        context(__ice_context)
    {
    }
    

    ::std::string op;
    ::Ice::OperationMode mode;
    ::Ice::ByteSeq data;
    ::Ice::Context context;
};

typedef ::IceUtil::Handle< ::IceStorm::EventData> EventDataPtr;

typedef std::deque< ::IceStorm::EventDataPtr> EventDataSeq;

class ICE_STORM_SERVICE_API ReapWouldBlock : public ::Ice::UserException
{
public:

    ReapWouldBlock() {}
    virtual ~ReapWouldBlock() throw();

    virtual ::std::string ice_name() const;
    virtual ReapWouldBlock* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static ReapWouldBlock __ReapWouldBlock_init;

}

namespace Ice
{
template<>
struct StreamableTraits< ::IceStorm::EventDataPtr>
{
    static const StreamHelperCategory helper = StreamHelperCategoryStructClass;
    static const int minWireSize = 4;
    static const bool fixedLength = false;
};

template<class S>
struct StreamWriter< ::IceStorm::EventDataPtr, S>
{
    static void write(S* __os, const ::IceStorm::EventDataPtr& v)
    {
        __os->write(v->op);
        __os->write(v->mode);
        __os->write(v->data);
        __os->write(v->context);
    }
};

template<class S>
struct StreamReader< ::IceStorm::EventDataPtr, S>
{
    static void read(S* __is, ::IceStorm::EventDataPtr& v)
    {
        __is->read(v->op);
        __is->read(v->mode);
        __is->read(v->data);
        __is->read(v->context);
    }
};

#if defined(ICE_HAS_DECLSPEC_IMPORT_EXPORT) && !defined(ICE_STORM_SERVICE_API_EXPORTS)
template struct ICE_STORM_SERVICE_API StreamWriter< ::IceStorm::EventDataPtr, ::IceInternal::BasicStream>;
template struct ICE_STORM_SERVICE_API StreamReader< ::IceStorm::EventDataPtr, ::IceInternal::BasicStream>;
#endif

template<>
struct StreamableTraits< ::IceStorm::ReapWouldBlock>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

}

namespace IceStorm
{

class Callback_TopicLink_forward_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TopicLink_forward_Base> Callback_TopicLink_forwardPtr;

class Callback_TopicInternal_getLinkProxy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TopicInternal_getLinkProxy_Base> Callback_TopicInternal_getLinkProxyPtr;

class Callback_TopicInternal_reap_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TopicInternal_reap_Base> Callback_TopicInternal_reapPtr;

class Callback_TopicManagerInternal_getReplicaNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_TopicManagerInternal_getReplicaNode_Base> Callback_TopicManagerInternal_getReplicaNodePtr;

}

namespace IceProxy
{

namespace IceStorm
{

class TopicLink : virtual public ::IceProxy::Ice::Object
{
public:

    void forward(const ::IceStorm::EventDataSeq& events)
    {
        forward(events, 0);
    }
    void forward(const ::IceStorm::EventDataSeq& events, const ::Ice::Context& __ctx)
    {
        forward(events, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_forward(const ::IceStorm::EventDataSeq& events, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_forward(events, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_forward(const ::IceStorm::EventDataSeq& events, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forward(events, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_forward(const ::IceStorm::EventDataSeq& events, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_forward(events, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_forward(const ::IceStorm::EventDataSeq& events, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_forward(events, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_forward(const ::IceStorm::EventDataSeq& events)
    {
        return begin_forward(events, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forward(const ::IceStorm::EventDataSeq& events, const ::Ice::Context& __ctx)
    {
        return begin_forward(events, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_forward(const ::IceStorm::EventDataSeq& events, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forward(events, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forward(const ::IceStorm::EventDataSeq& events, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forward(events, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forward(const ::IceStorm::EventDataSeq& events, const ::IceStorm::Callback_TopicLink_forwardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forward(events, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_forward(const ::IceStorm::EventDataSeq& events, const ::Ice::Context& __ctx, const ::IceStorm::Callback_TopicLink_forwardPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_forward(events, &__ctx, __del, __cookie);
    }

    ICE_STORM_SERVICE_API void end_forward(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_STORM_SERVICE_API void forward(const ::IceStorm::EventDataSeq&, const ::Ice::Context*);
    ICE_STORM_SERVICE_API ::Ice::AsyncResultPtr begin_forward(const ::IceStorm::EventDataSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TopicLink> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_secure(bool __secure) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_twoway() const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_oneway() const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_batchOneway() const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_datagram() const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_batchDatagram() const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_compress(bool __compress) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicLink> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TopicLink*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_STORM_SERVICE_API static const ::std::string& ice_staticId();

private: 

    ICE_STORM_SERVICE_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_STORM_SERVICE_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_STORM_SERVICE_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TopicInternal : virtual public ::IceProxy::IceStorm::Topic
{
public:

    ::IceStorm::TopicLinkPrx getLinkProxy()
    {
        return getLinkProxy(0);
    }
    ::IceStorm::TopicLinkPrx getLinkProxy(const ::Ice::Context& __ctx)
    {
        return getLinkProxy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLinkProxy(const ::IceInternal::Function<void (const ::IceStorm::TopicLinkPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLinkProxy(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLinkProxy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLinkProxy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLinkProxy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceStorm::TopicLinkPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLinkProxy(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLinkProxy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLinkProxy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLinkProxy(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceStorm::TopicLinkPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceStorm::TopicLinkPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceStorm::TopicInternalPrx __proxy = ::IceStorm::TopicInternalPrx::uncheckedCast(__result->getProxy());
                ::IceStorm::TopicLinkPrx __ret;
                try
                {
                    __ret = __proxy->end_getLinkProxy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceStorm::TopicLinkPrx&)> _response;
        };
        return begin_getLinkProxy(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLinkProxy()
    {
        return begin_getLinkProxy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLinkProxy(const ::Ice::Context& __ctx)
    {
        return begin_getLinkProxy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLinkProxy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLinkProxy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLinkProxy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLinkProxy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLinkProxy(const ::IceStorm::Callback_TopicInternal_getLinkProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLinkProxy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLinkProxy(const ::Ice::Context& __ctx, const ::IceStorm::Callback_TopicInternal_getLinkProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLinkProxy(&__ctx, __del, __cookie);
    }

    ICE_STORM_SERVICE_API ::IceStorm::TopicLinkPrx end_getLinkProxy(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_STORM_SERVICE_API ::IceStorm::TopicLinkPrx getLinkProxy(const ::Ice::Context*);
    ICE_STORM_SERVICE_API ::Ice::AsyncResultPtr begin_getLinkProxy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void reap(const ::Ice::IdentitySeq& id)
    {
        reap(id, 0);
    }
    void reap(const ::Ice::IdentitySeq& id, const ::Ice::Context& __ctx)
    {
        reap(id, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_reap(const ::Ice::IdentitySeq& id, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reap(id, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reap(const ::Ice::IdentitySeq& id, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reap(id, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_reap(const ::Ice::IdentitySeq& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_reap(id, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_reap(const ::Ice::IdentitySeq& id, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_reap(id, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_reap(const ::Ice::IdentitySeq& id, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceStorm::TopicInternalPrx __proxy = ::IceStorm::TopicInternalPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_reap(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_reap(id, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_reap(const ::Ice::IdentitySeq& id)
    {
        return begin_reap(id, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reap(const ::Ice::IdentitySeq& id, const ::Ice::Context& __ctx)
    {
        return begin_reap(id, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_reap(const ::Ice::IdentitySeq& id, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reap(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reap(const ::Ice::IdentitySeq& id, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reap(id, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reap(const ::Ice::IdentitySeq& id, const ::IceStorm::Callback_TopicInternal_reapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reap(id, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_reap(const ::Ice::IdentitySeq& id, const ::Ice::Context& __ctx, const ::IceStorm::Callback_TopicInternal_reapPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_reap(id, &__ctx, __del, __cookie);
    }

    ICE_STORM_SERVICE_API void end_reap(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_STORM_SERVICE_API void reap(const ::Ice::IdentitySeq&, const ::Ice::Context*);
    ICE_STORM_SERVICE_API ::Ice::AsyncResultPtr begin_reap(const ::Ice::IdentitySeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_secure(bool __secure) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_twoway() const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_oneway() const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_batchOneway() const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_datagram() const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_batchDatagram() const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_compress(bool __compress) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicInternal> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TopicInternal*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_STORM_SERVICE_API static const ::std::string& ice_staticId();

private: 

    ICE_STORM_SERVICE_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_STORM_SERVICE_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_STORM_SERVICE_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class TopicManagerInternal : virtual public ::IceProxy::IceStorm::TopicManager
{
public:

    ::IceStormElection::NodePrx getReplicaNode()
    {
        return getReplicaNode(0);
    }
    ::IceStormElection::NodePrx getReplicaNode(const ::Ice::Context& __ctx)
    {
        return getReplicaNode(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getReplicaNode(const ::IceInternal::Function<void (const ::IceStormElection::NodePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getReplicaNode(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getReplicaNode(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getReplicaNode(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getReplicaNode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceStormElection::NodePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getReplicaNode(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getReplicaNode(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getReplicaNode(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getReplicaNode(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceStormElection::NodePrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceStormElection::NodePrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceStorm::TopicManagerInternalPrx __proxy = ::IceStorm::TopicManagerInternalPrx::uncheckedCast(__result->getProxy());
                ::IceStormElection::NodePrx __ret;
                try
                {
                    __ret = __proxy->end_getReplicaNode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceStormElection::NodePrx&)> _response;
        };
        return begin_getReplicaNode(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getReplicaNode()
    {
        return begin_getReplicaNode(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReplicaNode(const ::Ice::Context& __ctx)
    {
        return begin_getReplicaNode(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReplicaNode(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicaNode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReplicaNode(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicaNode(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReplicaNode(const ::IceStorm::Callback_TopicManagerInternal_getReplicaNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicaNode(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReplicaNode(const ::Ice::Context& __ctx, const ::IceStorm::Callback_TopicManagerInternal_getReplicaNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicaNode(&__ctx, __del, __cookie);
    }

    ICE_STORM_SERVICE_API ::IceStormElection::NodePrx end_getReplicaNode(const ::Ice::AsyncResultPtr&);
    
private:

    ICE_STORM_SERVICE_API ::IceStormElection::NodePrx getReplicaNode(const ::Ice::Context*);
    ICE_STORM_SERVICE_API ::Ice::AsyncResultPtr begin_getReplicaNode(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_secure(bool __secure) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_twoway() const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_oneway() const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_batchOneway() const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_datagram() const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_batchDatagram() const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_compress(bool __compress) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_timeout(int __timeout) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<TopicManagerInternal> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<TopicManagerInternal*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    ICE_STORM_SERVICE_API static const ::std::string& ice_staticId();

private: 

    ICE_STORM_SERVICE_API virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    ICE_STORM_SERVICE_API virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    ICE_STORM_SERVICE_API virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace IceStorm
{

class ICE_STORM_SERVICE_API TopicLink : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void forward(const ::IceStorm::EventDataSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ICE_STORM_SERVICE_API TopicInternal : virtual public ::IceDelegate::IceStorm::Topic
{
public:

    virtual ::IceStorm::TopicLinkPrx getLinkProxy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void reap(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ICE_STORM_SERVICE_API TopicManagerInternal : virtual public ::IceDelegate::IceStorm::TopicManager
{
public:

    virtual ::IceStormElection::NodePrx getReplicaNode(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace IceStorm
{

class ICE_STORM_SERVICE_API TopicLink : virtual public ::IceDelegate::IceStorm::TopicLink,
                                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void forward(const ::IceStorm::EventDataSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_STORM_SERVICE_API TopicInternal : virtual public ::IceDelegate::IceStorm::TopicInternal,
                                            virtual public ::IceDelegateM::IceStorm::Topic
{
public:

    virtual ::IceStorm::TopicLinkPrx getLinkProxy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reap(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_STORM_SERVICE_API TopicManagerInternal : virtual public ::IceDelegate::IceStorm::TopicManagerInternal,
                                                   virtual public ::IceDelegateM::IceStorm::TopicManager
{
public:

    virtual ::IceStormElection::NodePrx getReplicaNode(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace IceStorm
{

class ICE_STORM_SERVICE_API TopicLink : virtual public ::IceDelegate::IceStorm::TopicLink,
                                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void forward(const ::IceStorm::EventDataSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_STORM_SERVICE_API TopicInternal : virtual public ::IceDelegate::IceStorm::TopicInternal,
                                            virtual public ::IceDelegateD::IceStorm::Topic
{
public:

    virtual ::IceStorm::TopicLinkPrx getLinkProxy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void reap(const ::Ice::IdentitySeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ICE_STORM_SERVICE_API TopicManagerInternal : virtual public ::IceDelegate::IceStorm::TopicManagerInternal,
                                                   virtual public ::IceDelegateD::IceStorm::TopicManager
{
public:

    virtual ::IceStormElection::NodePrx getReplicaNode(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceStorm
{

class ICE_STORM_SERVICE_API TopicLink : virtual public ::Ice::Object
{
public:

    typedef TopicLinkPrx ProxyType;
    typedef TopicLinkPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void forward(const ::IceStorm::EventDataSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___forward(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TopicLink& l, const TopicLink& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TopicLink& l, const TopicLink& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ICE_STORM_SERVICE_API TopicInternal : virtual public ::IceStorm::Topic
{
public:

    typedef TopicInternalPrx ProxyType;
    typedef TopicInternalPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::IceStorm::TopicLinkPrx getLinkProxy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___getLinkProxy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void reap(const ::Ice::IdentitySeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___reap(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TopicInternal& l, const TopicInternal& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TopicInternal& l, const TopicInternal& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ICE_STORM_SERVICE_API TopicManagerInternal : virtual public ::IceStorm::TopicManager
{
public:

    typedef TopicManagerInternalPrx ProxyType;
    typedef TopicManagerInternalPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::IceStormElection::NodePrx getReplicaNode(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getReplicaNode(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const TopicManagerInternal& l, const TopicManagerInternal& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const TopicManagerInternal& l, const TopicManagerInternal& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IceStorm
{

template<class T>
class CallbackNC_TopicLink_forward : public Callback_TopicLink_forward_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TopicLink_forward(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicLink_forward<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicLink_forward<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicLink_forward<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicLink_forward<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TopicLink_forward : public Callback_TopicLink_forward_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TopicLink_forward(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicLink_forward<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicLink_forward<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicLink_forward<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TopicLink_forwardPtr
newCallback_TopicLink_forward(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicLink_forward<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TopicInternal_getLinkProxy : public Callback_TopicInternal_getLinkProxy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceStorm::TopicLinkPrx&);

    CallbackNC_TopicInternal_getLinkProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceStorm::TopicInternalPrx __proxy = ::IceStorm::TopicInternalPrx::uncheckedCast(__result->getProxy());
        ::IceStorm::TopicLinkPrx __ret;
        try
        {
            __ret = __proxy->end_getLinkProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TopicInternal_getLinkProxyPtr
newCallback_TopicInternal_getLinkProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceStorm::TopicLinkPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicInternal_getLinkProxy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TopicInternal_getLinkProxyPtr
newCallback_TopicInternal_getLinkProxy(T* instance, void (T::*cb)(const ::IceStorm::TopicLinkPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicInternal_getLinkProxy<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TopicInternal_getLinkProxy : public Callback_TopicInternal_getLinkProxy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceStorm::TopicLinkPrx&, const CT&);

    Callback_TopicInternal_getLinkProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceStorm::TopicInternalPrx __proxy = ::IceStorm::TopicInternalPrx::uncheckedCast(__result->getProxy());
        ::IceStorm::TopicLinkPrx __ret;
        try
        {
            __ret = __proxy->end_getLinkProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TopicInternal_getLinkProxyPtr
newCallback_TopicInternal_getLinkProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceStorm::TopicLinkPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicInternal_getLinkProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TopicInternal_getLinkProxyPtr
newCallback_TopicInternal_getLinkProxy(T* instance, void (T::*cb)(const ::IceStorm::TopicLinkPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicInternal_getLinkProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_TopicInternal_reap : public Callback_TopicInternal_reap_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_TopicInternal_reap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceStorm::TopicInternalPrx __proxy = ::IceStorm::TopicInternalPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicInternal_reap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicInternal_reap<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicInternal_reap<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicInternal_reap<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_TopicInternal_reap : public Callback_TopicInternal_reap_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_TopicInternal_reap(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceStorm::TopicInternalPrx __proxy = ::IceStorm::TopicInternalPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_reap(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicInternal_reap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicInternal_reap<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicInternal_reap<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TopicInternal_reapPtr
newCallback_TopicInternal_reap(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicInternal_reap<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_TopicManagerInternal_getReplicaNode : public Callback_TopicManagerInternal_getReplicaNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceStormElection::NodePrx&);

    CallbackNC_TopicManagerInternal_getReplicaNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceStorm::TopicManagerInternalPrx __proxy = ::IceStorm::TopicManagerInternalPrx::uncheckedCast(__result->getProxy());
        ::IceStormElection::NodePrx __ret;
        try
        {
            __ret = __proxy->end_getReplicaNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_TopicManagerInternal_getReplicaNodePtr
newCallback_TopicManagerInternal_getReplicaNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceStormElection::NodePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicManagerInternal_getReplicaNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_TopicManagerInternal_getReplicaNodePtr
newCallback_TopicManagerInternal_getReplicaNode(T* instance, void (T::*cb)(const ::IceStormElection::NodePrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_TopicManagerInternal_getReplicaNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_TopicManagerInternal_getReplicaNode : public Callback_TopicManagerInternal_getReplicaNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceStormElection::NodePrx&, const CT&);

    Callback_TopicManagerInternal_getReplicaNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceStorm::TopicManagerInternalPrx __proxy = ::IceStorm::TopicManagerInternalPrx::uncheckedCast(__result->getProxy());
        ::IceStormElection::NodePrx __ret;
        try
        {
            __ret = __proxy->end_getReplicaNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_TopicManagerInternal_getReplicaNodePtr
newCallback_TopicManagerInternal_getReplicaNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceStormElection::NodePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicManagerInternal_getReplicaNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_TopicManagerInternal_getReplicaNodePtr
newCallback_TopicManagerInternal_getReplicaNode(T* instance, void (T::*cb)(const ::IceStormElection::NodePrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_TopicManagerInternal_getReplicaNode<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
