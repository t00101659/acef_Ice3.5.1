// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceStorm_Instrumentation_h__
#define __IceStorm_Instrumentation_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/Instrumentation.h>
#include <IceStorm/IceStorm.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

#ifndef ICE_STORM_SERVICE_API
#   ifdef ICE_STORM_SERVICE_API_EXPORTS
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_EXPORT
#   else
#       define ICE_STORM_SERVICE_API ICE_DECLSPEC_IMPORT
#   endif
#endif

namespace IceProxy
{

}

namespace IceStorm
{

namespace Instrumentation
{

class TopicObserver;
bool operator==(const TopicObserver&, const TopicObserver&);
bool operator<(const TopicObserver&, const TopicObserver&);
ICE_STORM_SERVICE_API ::Ice::LocalObject* upCast(::IceStorm::Instrumentation::TopicObserver*);
typedef ::IceInternal::Handle< ::IceStorm::Instrumentation::TopicObserver> TopicObserverPtr;

class SubscriberObserver;
bool operator==(const SubscriberObserver&, const SubscriberObserver&);
bool operator<(const SubscriberObserver&, const SubscriberObserver&);
ICE_STORM_SERVICE_API ::Ice::LocalObject* upCast(::IceStorm::Instrumentation::SubscriberObserver*);
typedef ::IceInternal::Handle< ::IceStorm::Instrumentation::SubscriberObserver> SubscriberObserverPtr;

class ObserverUpdater;
bool operator==(const ObserverUpdater&, const ObserverUpdater&);
bool operator<(const ObserverUpdater&, const ObserverUpdater&);
ICE_STORM_SERVICE_API ::Ice::LocalObject* upCast(::IceStorm::Instrumentation::ObserverUpdater*);
typedef ::IceInternal::Handle< ::IceStorm::Instrumentation::ObserverUpdater> ObserverUpdaterPtr;

class TopicManagerObserver;
bool operator==(const TopicManagerObserver&, const TopicManagerObserver&);
bool operator<(const TopicManagerObserver&, const TopicManagerObserver&);
ICE_STORM_SERVICE_API ::Ice::LocalObject* upCast(::IceStorm::Instrumentation::TopicManagerObserver*);
typedef ::IceInternal::Handle< ::IceStorm::Instrumentation::TopicManagerObserver> TopicManagerObserverPtr;

}

}

namespace IceStorm
{

namespace Instrumentation
{

enum SubscriberState
{
    SubscriberStateOnline,
    SubscriberStateOffline,
    SubscriberStateError
};

}

}

namespace Ice
{
template<>
struct StreamableTraits< ::IceStorm::Instrumentation::SubscriberState>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 2;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace IceProxy
{

}

namespace IceDelegate
{

}

namespace IceDelegateM
{

}

namespace IceDelegateD
{

}

namespace IceStorm
{

namespace Instrumentation
{

class ICE_STORM_SERVICE_API TopicObserver : virtual public ::Ice::Instrumentation::Observer
{
public:

    typedef TopicObserverPtr PointerType;

    virtual void published() = 0;

    virtual void forwarded() = 0;
};

inline bool operator==(const TopicObserver& l, const TopicObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const TopicObserver& l, const TopicObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class ICE_STORM_SERVICE_API SubscriberObserver : virtual public ::Ice::Instrumentation::Observer
{
public:

    typedef SubscriberObserverPtr PointerType;

    virtual void queued(::Ice::Int) = 0;

    virtual void outstanding(::Ice::Int) = 0;

    virtual void delivered(::Ice::Int) = 0;
};

inline bool operator==(const SubscriberObserver& l, const SubscriberObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const SubscriberObserver& l, const SubscriberObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class ICE_STORM_SERVICE_API ObserverUpdater : virtual public ::Ice::LocalObject
{
public:

    typedef ObserverUpdaterPtr PointerType;

    virtual void updateTopicObservers() = 0;

    virtual void updateSubscriberObservers() = 0;
};

inline bool operator==(const ObserverUpdater& l, const ObserverUpdater& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const ObserverUpdater& l, const ObserverUpdater& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class ICE_STORM_SERVICE_API TopicManagerObserver : virtual public ::Ice::LocalObject
{
public:

    typedef TopicManagerObserverPtr PointerType;

    virtual ::IceStorm::Instrumentation::TopicObserverPtr getTopicObserver(const ::std::string&, const ::std::string&, const ::IceStorm::Instrumentation::TopicObserverPtr&) = 0;

    virtual ::IceStorm::Instrumentation::SubscriberObserverPtr getSubscriberObserver(const ::std::string&, const ::std::string&, const ::Ice::ObjectPrx&, const ::IceStorm::QoS&, const ::IceStorm::TopicPrx&, ::IceStorm::Instrumentation::SubscriberState, const ::IceStorm::Instrumentation::SubscriberObserverPtr&) = 0;

    virtual void setObserverUpdater(const ::IceStorm::Instrumentation::ObserverUpdaterPtr&) = 0;
};

inline bool operator==(const TopicManagerObserver& l, const TopicManagerObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const TopicManagerObserver& l, const TopicManagerObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

}

}

#endif
