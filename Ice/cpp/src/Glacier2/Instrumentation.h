// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Instrumentation.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __Glacier2_Instrumentation_h__
#define __Glacier2_Instrumentation_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/Instrumentation.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace Glacier2
{

namespace Instrumentation
{

class SessionObserver;
bool operator==(const SessionObserver&, const SessionObserver&);
bool operator<(const SessionObserver&, const SessionObserver&);
::Ice::LocalObject* upCast(::Glacier2::Instrumentation::SessionObserver*);
typedef ::IceInternal::Handle< ::Glacier2::Instrumentation::SessionObserver> SessionObserverPtr;

class ObserverUpdater;
bool operator==(const ObserverUpdater&, const ObserverUpdater&);
bool operator<(const ObserverUpdater&, const ObserverUpdater&);
::Ice::LocalObject* upCast(::Glacier2::Instrumentation::ObserverUpdater*);
typedef ::IceInternal::Handle< ::Glacier2::Instrumentation::ObserverUpdater> ObserverUpdaterPtr;

class RouterObserver;
bool operator==(const RouterObserver&, const RouterObserver&);
bool operator<(const RouterObserver&, const RouterObserver&);
::Ice::LocalObject* upCast(::Glacier2::Instrumentation::RouterObserver*);
typedef ::IceInternal::Handle< ::Glacier2::Instrumentation::RouterObserver> RouterObserverPtr;

}

}

namespace Glacier2
{

namespace Instrumentation
{

class SessionObserver : virtual public ::Ice::Instrumentation::Observer
{
public:

    typedef SessionObserverPtr PointerType;

    virtual void forwarded(bool) = 0;

    virtual void queued(bool) = 0;

    virtual void overridden(bool) = 0;

    virtual void routingTableSize(::Ice::Int) = 0;
};

inline bool operator==(const SessionObserver& l, const SessionObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const SessionObserver& l, const SessionObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class ObserverUpdater : virtual public ::Ice::LocalObject
{
public:

    typedef ObserverUpdaterPtr PointerType;

    virtual void updateSessionObservers() = 0;
};

inline bool operator==(const ObserverUpdater& l, const ObserverUpdater& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const ObserverUpdater& l, const ObserverUpdater& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

class RouterObserver : virtual public ::Ice::LocalObject
{
public:

    typedef RouterObserverPtr PointerType;

    virtual ::Glacier2::Instrumentation::SessionObserverPtr getSessionObserver(const ::std::string&, const ::Ice::ConnectionPtr&, ::Ice::Int, const ::Glacier2::Instrumentation::SessionObserverPtr&) = 0;

    virtual void setObserverUpdater(const ::Glacier2::Instrumentation::ObserverUpdaterPtr&) = 0;
};

inline bool operator==(const RouterObserver& l, const RouterObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) == static_cast<const ::Ice::LocalObject&>(r);
}

inline bool operator<(const RouterObserver& l, const RouterObserver& r)
{
    return static_cast<const ::Ice::LocalObject&>(l) < static_cast<const ::Ice::LocalObject&>(r);
}

}

}

#endif
