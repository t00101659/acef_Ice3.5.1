// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IdentityObjectInfoDict.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


// Freeze types in this file:
// name="IceGrid::IdentityObjectInfoDict", key="Ice::Identity", value="IceGrid::ObjectInfo"

#include <Ice/BasicStream.h>
#include <IceUtil/StringUtil.h>
#include <IceGrid/FreezeDB/IdentityObjectInfoDict.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

void
IceGrid::IdentityObjectInfoDictKeyCodec::write(const ::Ice::Identity& v, Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.write(v);
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
IceGrid::IdentityObjectInfoDictKeyCodec::read(::Ice::Identity& v, const Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.read(v);
}

namespace
{
    const ::std::string __IceGrid__IdentityObjectInfoDictKeyCodec_typeId = "::Ice::Identity";
}

const ::std::string&
IceGrid::IdentityObjectInfoDictKeyCodec::typeId()
{
    return __IceGrid__IdentityObjectInfoDictKeyCodec_typeId;
}

void
IceGrid::IdentityObjectInfoDictValueCodec::write(const ::IceGrid::ObjectInfo& v, Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.startWriteEncaps();
    stream.write(v);
    stream.endWriteEncaps();
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
IceGrid::IdentityObjectInfoDictValueCodec::read(::IceGrid::ObjectInfo& v, const Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.startReadEncaps();
    stream.read(v);
    stream.endReadEncaps();
}

namespace
{
    const ::std::string __IceGrid__IdentityObjectInfoDictValueCodec_typeId = "::IceGrid::ObjectInfo";
}

const ::std::string&
IceGrid::IdentityObjectInfoDictValueCodec::typeId()
{
    return __IceGrid__IdentityObjectInfoDictValueCodec_typeId;
}

IceGrid::IdentityObjectInfoDict::TypeIndex::TypeIndex(const std::string& __name, const Freeze::IceEncodingCompare& __compare)
    : Freeze::MapIndex< ::std::string, TypeIndex, Freeze::IceEncodingCompare >(__name, __compare)
{
}

void
IceGrid::IdentityObjectInfoDict::TypeIndex::marshalKey(const Freeze::Value& __v, Freeze::Key& __k) const
{
    ::IceGrid::ObjectInfo __x;
    IceGrid::IdentityObjectInfoDictValueCodec::read(__x, __v, _communicator, _encoding);
    write(__x.type, __k, _communicator, _encoding);
}

void
IceGrid::IdentityObjectInfoDict::TypeIndex::write(const ::std::string& __index, Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    IceInternal::InstancePtr __instance = IceInternal::getInstance(__communicator);
    IceInternal::BasicStream __stream(__instance.get(), __encoding, true);
    __stream.write(__index);
    ::std::vector<Ice::Byte>(__stream.b.begin(), __stream.b.end()).swap(__bytes);
}

void
IceGrid::IdentityObjectInfoDict::TypeIndex::read(::std::string& __index, const Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    IceInternal::InstancePtr __instance = IceInternal::getInstance(__communicator);
    IceInternal::BasicStream __stream(__instance.get(), __encoding, &__bytes[0], &__bytes[0] + __bytes.size());
    __stream.read(__index);
}

IceGrid::IdentityObjectInfoDict::IdentityObjectInfoDict(const Freeze::ConnectionPtr& __connection, const std::string& __dbName ,bool __createDb, const Freeze::IceEncodingCompare& __compare)
    : Freeze::Map< ::Ice::Identity, ::IceGrid::ObjectInfo, IdentityObjectInfoDictKeyCodec, IdentityObjectInfoDictValueCodec, Freeze::IceEncodingCompare >(__connection->getCommunicator(), __connection->getEncoding())
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::Ice::Identity, IdentityObjectInfoDictKeyCodec, Freeze::IceEncodingCompare >(__compare, _communicator, _encoding);
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new TypeIndex("type"));
    _helper.reset(Freeze::MapHelper::create(__connection, __dbName, IceGrid::IdentityObjectInfoDictKeyCodec::typeId(), IceGrid::IdentityObjectInfoDictValueCodec::typeId(), __keyCompare, __indices, __createDb));
}

void
IceGrid::IdentityObjectInfoDict::recreate(const Freeze::ConnectionPtr& __connection, const std::string& __dbName , const Freeze::IceEncodingCompare& __compare)
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::Ice::Identity, IdentityObjectInfoDictKeyCodec, Freeze::IceEncodingCompare >(__compare, __connection->getCommunicator(), __connection->getEncoding());
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new TypeIndex("type"));
    Freeze::MapHelper::recreate(__connection, __dbName, IceGrid::IdentityObjectInfoDictKeyCodec::typeId(), IceGrid::IdentityObjectInfoDictValueCodec::typeId(), __keyCompare, __indices);
}

IceGrid::IdentityObjectInfoDict::iterator
IceGrid::IdentityObjectInfoDict::findByType(const ::std::string& __index, bool __onlyDups)
{
    Freeze::Key __bytes;
    TypeIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("type")->untypedFind(__bytes, false, __onlyDups), _communicator, _encoding);
}

IceGrid::IdentityObjectInfoDict::const_iterator
IceGrid::IdentityObjectInfoDict::findByType(const ::std::string& __index, bool __onlyDups) const
{
    Freeze::Key __bytes;
    TypeIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("type")->untypedFind(__bytes, true, __onlyDups), _communicator, _encoding);
}

IceGrid::IdentityObjectInfoDict::iterator
IceGrid::IdentityObjectInfoDict::beginForType()
{
    return iterator(_helper->index("type")->begin(false), _communicator, _encoding);
}

IceGrid::IdentityObjectInfoDict::const_iterator
IceGrid::IdentityObjectInfoDict::beginForType() const
{
    return const_iterator(_helper->index("type")->begin(true), _communicator, _encoding);
}

IceGrid::IdentityObjectInfoDict::iterator
IceGrid::IdentityObjectInfoDict::endForType()
{
    return iterator();
}

IceGrid::IdentityObjectInfoDict::const_iterator
IceGrid::IdentityObjectInfoDict::endForType() const
{
    return const_iterator();
}

IceGrid::IdentityObjectInfoDict::iterator
IceGrid::IdentityObjectInfoDict::lowerBoundForType(const ::std::string& __index)
{
    Freeze::Key __bytes;
    TypeIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("type")->untypedLowerBound(__bytes, false), _communicator, _encoding);
}

IceGrid::IdentityObjectInfoDict::const_iterator
IceGrid::IdentityObjectInfoDict::lowerBoundForType(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    TypeIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("type")->untypedLowerBound(__bytes, true), _communicator, _encoding);
}

IceGrid::IdentityObjectInfoDict::iterator
IceGrid::IdentityObjectInfoDict::upperBoundForType(const ::std::string& __index)
{
    Freeze::Key __bytes;
    TypeIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("type")->untypedUpperBound(__bytes, false), _communicator, _encoding);
}

IceGrid::IdentityObjectInfoDict::const_iterator
IceGrid::IdentityObjectInfoDict::upperBoundForType(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    TypeIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("type")->untypedUpperBound(__bytes, true), _communicator, _encoding);
}

std::pair<IceGrid::IdentityObjectInfoDict::iterator, IceGrid::IdentityObjectInfoDict::iterator>
IceGrid::IdentityObjectInfoDict::equalRangeForType(const ::std::string& __index)
{
    return std::make_pair(lowerBoundForType(__index), upperBoundForType(__index));
}

std::pair<IceGrid::IdentityObjectInfoDict::const_iterator, IceGrid::IdentityObjectInfoDict::const_iterator>
IceGrid::IdentityObjectInfoDict::equalRangeForType(const ::std::string& __index) const
{
    return std::make_pair(lowerBoundForType(__index), upperBoundForType(__index));
}

int
IceGrid::IdentityObjectInfoDict::typeCount(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    TypeIndex::write(__index, __bytes, _communicator, _encoding);
    return _helper->index("type")->untypedCount(__bytes);
}
