// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `StringAdapterInfoDict.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


// Freeze types in this file:
// name="IceGrid::StringAdapterInfoDict", key="string", value="IceGrid::AdapterInfo"

#include <Ice/BasicStream.h>
#include <IceUtil/StringUtil.h>
#include <IceGrid/FreezeDB/StringAdapterInfoDict.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

void
IceGrid::StringAdapterInfoDictKeyCodec::write(const ::std::string& v, Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.write(v);
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
IceGrid::StringAdapterInfoDictKeyCodec::read(::std::string& v, const Freeze::Key& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.read(v);
}

namespace
{
    const ::std::string __IceGrid__StringAdapterInfoDictKeyCodec_typeId = "string";
}

const ::std::string&
IceGrid::StringAdapterInfoDictKeyCodec::typeId()
{
    return __IceGrid__StringAdapterInfoDictKeyCodec_typeId;
}

void
IceGrid::StringAdapterInfoDictValueCodec::write(const ::IceGrid::AdapterInfo& v, Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, true);
    stream.startWriteEncaps();
    stream.write(v);
    stream.endWriteEncaps();
    ::std::vector<Ice::Byte>(stream.b.begin(), stream.b.end()).swap(bytes);
}

void
IceGrid::StringAdapterInfoDictValueCodec::read(::IceGrid::AdapterInfo& v, const Freeze::Value& bytes, const ::Ice::CommunicatorPtr& communicator, const Ice::EncodingVersion& encoding)
{
    IceInternal::InstancePtr instance = IceInternal::getInstance(communicator);
    IceInternal::BasicStream stream(instance.get(), encoding, &bytes[0], &bytes[0] + bytes.size());
    stream.startReadEncaps();
    stream.read(v);
    stream.endReadEncaps();
}

namespace
{
    const ::std::string __IceGrid__StringAdapterInfoDictValueCodec_typeId = "::IceGrid::AdapterInfo";
}

const ::std::string&
IceGrid::StringAdapterInfoDictValueCodec::typeId()
{
    return __IceGrid__StringAdapterInfoDictValueCodec_typeId;
}

IceGrid::StringAdapterInfoDict::ReplicaGroupIdIndex::ReplicaGroupIdIndex(const std::string& __name, const Freeze::IceEncodingCompare& __compare)
    : Freeze::MapIndex< ::std::string, ReplicaGroupIdIndex, Freeze::IceEncodingCompare >(__name, __compare)
{
}

void
IceGrid::StringAdapterInfoDict::ReplicaGroupIdIndex::marshalKey(const Freeze::Value& __v, Freeze::Key& __k) const
{
    ::IceGrid::AdapterInfo __x;
    IceGrid::StringAdapterInfoDictValueCodec::read(__x, __v, _communicator, _encoding);
    write(__x.replicaGroupId, __k, _communicator, _encoding);
}

void
IceGrid::StringAdapterInfoDict::ReplicaGroupIdIndex::write(const ::std::string& __index, Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    IceInternal::InstancePtr __instance = IceInternal::getInstance(__communicator);
    IceInternal::BasicStream __stream(__instance.get(), __encoding, true);
    __stream.write(__index);
    ::std::vector<Ice::Byte>(__stream.b.begin(), __stream.b.end()).swap(__bytes);
}

void
IceGrid::StringAdapterInfoDict::ReplicaGroupIdIndex::read(::std::string& __index, const Freeze::Key& __bytes, const Ice::CommunicatorPtr& __communicator, const Ice::EncodingVersion& __encoding)
{
    IceInternal::InstancePtr __instance = IceInternal::getInstance(__communicator);
    IceInternal::BasicStream __stream(__instance.get(), __encoding, &__bytes[0], &__bytes[0] + __bytes.size());
    __stream.read(__index);
}

IceGrid::StringAdapterInfoDict::StringAdapterInfoDict(const Freeze::ConnectionPtr& __connection, const std::string& __dbName ,bool __createDb, const Freeze::IceEncodingCompare& __compare)
    : Freeze::Map< ::std::string, ::IceGrid::AdapterInfo, StringAdapterInfoDictKeyCodec, StringAdapterInfoDictValueCodec, Freeze::IceEncodingCompare >(__connection->getCommunicator(), __connection->getEncoding())
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::std::string, StringAdapterInfoDictKeyCodec, Freeze::IceEncodingCompare >(__compare, _communicator, _encoding);
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new ReplicaGroupIdIndex("replicaGroupId"));
    _helper.reset(Freeze::MapHelper::create(__connection, __dbName, IceGrid::StringAdapterInfoDictKeyCodec::typeId(), IceGrid::StringAdapterInfoDictValueCodec::typeId(), __keyCompare, __indices, __createDb));
}

void
IceGrid::StringAdapterInfoDict::recreate(const Freeze::ConnectionPtr& __connection, const std::string& __dbName , const Freeze::IceEncodingCompare& __compare)
{
    Freeze::KeyCompareBasePtr __keyCompare = new Freeze::KeyCompare< ::std::string, StringAdapterInfoDictKeyCodec, Freeze::IceEncodingCompare >(__compare, __connection->getCommunicator(), __connection->getEncoding());
    std::vector<Freeze::MapIndexBasePtr> __indices;
    __indices.push_back(new ReplicaGroupIdIndex("replicaGroupId"));
    Freeze::MapHelper::recreate(__connection, __dbName, IceGrid::StringAdapterInfoDictKeyCodec::typeId(), IceGrid::StringAdapterInfoDictValueCodec::typeId(), __keyCompare, __indices);
}

IceGrid::StringAdapterInfoDict::iterator
IceGrid::StringAdapterInfoDict::findByReplicaGroupId(const ::std::string& __index, bool __onlyDups)
{
    Freeze::Key __bytes;
    ReplicaGroupIdIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("replicaGroupId")->untypedFind(__bytes, false, __onlyDups), _communicator, _encoding);
}

IceGrid::StringAdapterInfoDict::const_iterator
IceGrid::StringAdapterInfoDict::findByReplicaGroupId(const ::std::string& __index, bool __onlyDups) const
{
    Freeze::Key __bytes;
    ReplicaGroupIdIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("replicaGroupId")->untypedFind(__bytes, true, __onlyDups), _communicator, _encoding);
}

IceGrid::StringAdapterInfoDict::iterator
IceGrid::StringAdapterInfoDict::beginForReplicaGroupId()
{
    return iterator(_helper->index("replicaGroupId")->begin(false), _communicator, _encoding);
}

IceGrid::StringAdapterInfoDict::const_iterator
IceGrid::StringAdapterInfoDict::beginForReplicaGroupId() const
{
    return const_iterator(_helper->index("replicaGroupId")->begin(true), _communicator, _encoding);
}

IceGrid::StringAdapterInfoDict::iterator
IceGrid::StringAdapterInfoDict::endForReplicaGroupId()
{
    return iterator();
}

IceGrid::StringAdapterInfoDict::const_iterator
IceGrid::StringAdapterInfoDict::endForReplicaGroupId() const
{
    return const_iterator();
}

IceGrid::StringAdapterInfoDict::iterator
IceGrid::StringAdapterInfoDict::lowerBoundForReplicaGroupId(const ::std::string& __index)
{
    Freeze::Key __bytes;
    ReplicaGroupIdIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("replicaGroupId")->untypedLowerBound(__bytes, false), _communicator, _encoding);
}

IceGrid::StringAdapterInfoDict::const_iterator
IceGrid::StringAdapterInfoDict::lowerBoundForReplicaGroupId(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    ReplicaGroupIdIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("replicaGroupId")->untypedLowerBound(__bytes, true), _communicator, _encoding);
}

IceGrid::StringAdapterInfoDict::iterator
IceGrid::StringAdapterInfoDict::upperBoundForReplicaGroupId(const ::std::string& __index)
{
    Freeze::Key __bytes;
    ReplicaGroupIdIndex::write(__index, __bytes, _communicator, _encoding);
    return iterator(_helper->index("replicaGroupId")->untypedUpperBound(__bytes, false), _communicator, _encoding);
}

IceGrid::StringAdapterInfoDict::const_iterator
IceGrid::StringAdapterInfoDict::upperBoundForReplicaGroupId(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    ReplicaGroupIdIndex::write(__index, __bytes, _communicator, _encoding);
    return const_iterator(_helper->index("replicaGroupId")->untypedUpperBound(__bytes, true), _communicator, _encoding);
}

std::pair<IceGrid::StringAdapterInfoDict::iterator, IceGrid::StringAdapterInfoDict::iterator>
IceGrid::StringAdapterInfoDict::equalRangeForReplicaGroupId(const ::std::string& __index)
{
    return std::make_pair(lowerBoundForReplicaGroupId(__index), upperBoundForReplicaGroupId(__index));
}

std::pair<IceGrid::StringAdapterInfoDict::const_iterator, IceGrid::StringAdapterInfoDict::const_iterator>
IceGrid::StringAdapterInfoDict::equalRangeForReplicaGroupId(const ::std::string& __index) const
{
    return std::make_pair(lowerBoundForReplicaGroupId(__index), upperBoundForReplicaGroupId(__index));
}

int
IceGrid::StringAdapterInfoDict::replicaGroupIdCount(const ::std::string& __index) const
{
    Freeze::Key __bytes;
    ReplicaGroupIdIndex::write(__index, __bytes, _communicator, _encoding);
    return _helper->index("replicaGroupId")->untypedCount(__bytes);
}
