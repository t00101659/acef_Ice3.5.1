// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Internal.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef __IceGrid_Internal_h__
#define __IceGrid_Internal_h__

#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/StreamHelpers.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <Ice/FactoryTableInit.h>
#include <IceUtil/ScopedArray.h>
#include <IceUtil/Optional.h>
#include <Ice/StreamF.h>
#include <Ice/SlicedDataF.h>
#include <Ice/Identity.h>
#include <Ice/BuiltinSequences.h>
#include <Ice/ProcessF.h>
#include <Ice/Locator.h>
#include <Ice/Properties.h>
#include <Glacier2/Session.h>
#include <IceGrid/Admin.h>
#include <IceGrid/Observer.h>
#include <IceGrid/Registry.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace IceGrid
{

class InternalDbEnvDescriptor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalDbEnvDescriptor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::InternalDbEnvDescriptor*);

class InternalAdapterDescriptor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalAdapterDescriptor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::InternalAdapterDescriptor*);

class InternalDistributionDescriptor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalDistributionDescriptor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::InternalDistributionDescriptor*);

class InternalServerDescriptor;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalServerDescriptor>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::InternalServerDescriptor*);

class Adapter;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Adapter>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::Adapter*);

class FileReader;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::FileReader>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::FileReader*);

class Server;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Server>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::Server*);

class InternalRegistry;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalRegistry>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::InternalRegistry*);

class ReplicaObserver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ReplicaObserver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::ReplicaObserver*);

class PatcherFeedback;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::PatcherFeedback>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::PatcherFeedback*);

class Node;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Node>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::Node*);

class NodeSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::NodeSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::NodeSession*);

class DatabaseObserver;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::DatabaseObserver>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::DatabaseObserver*);

class ReplicaSession;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ReplicaSession>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::ReplicaSession*);

class InternalNodeInfo;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalNodeInfo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::InternalNodeInfo*);

class InternalReplicaInfo;
void __read(::IceInternal::BasicStream*, ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalReplicaInfo>&);
::IceProxy::Ice::Object* upCast(::IceProxy::IceGrid::InternalReplicaInfo*);

}

}

namespace IceGrid
{

class InternalDbEnvDescriptor;
bool operator==(const InternalDbEnvDescriptor&, const InternalDbEnvDescriptor&);
bool operator<(const InternalDbEnvDescriptor&, const InternalDbEnvDescriptor&);
::Ice::Object* upCast(::IceGrid::InternalDbEnvDescriptor*);
typedef ::IceInternal::Handle< ::IceGrid::InternalDbEnvDescriptor> InternalDbEnvDescriptorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalDbEnvDescriptor> InternalDbEnvDescriptorPrx;
void __patch(InternalDbEnvDescriptorPtr&, const ::Ice::ObjectPtr&);

class InternalAdapterDescriptor;
bool operator==(const InternalAdapterDescriptor&, const InternalAdapterDescriptor&);
bool operator<(const InternalAdapterDescriptor&, const InternalAdapterDescriptor&);
::Ice::Object* upCast(::IceGrid::InternalAdapterDescriptor*);
typedef ::IceInternal::Handle< ::IceGrid::InternalAdapterDescriptor> InternalAdapterDescriptorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalAdapterDescriptor> InternalAdapterDescriptorPrx;
void __patch(InternalAdapterDescriptorPtr&, const ::Ice::ObjectPtr&);

class InternalDistributionDescriptor;
bool operator==(const InternalDistributionDescriptor&, const InternalDistributionDescriptor&);
bool operator<(const InternalDistributionDescriptor&, const InternalDistributionDescriptor&);
::Ice::Object* upCast(::IceGrid::InternalDistributionDescriptor*);
typedef ::IceInternal::Handle< ::IceGrid::InternalDistributionDescriptor> InternalDistributionDescriptorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalDistributionDescriptor> InternalDistributionDescriptorPrx;
void __patch(InternalDistributionDescriptorPtr&, const ::Ice::ObjectPtr&);

class InternalServerDescriptor;
bool operator==(const InternalServerDescriptor&, const InternalServerDescriptor&);
bool operator<(const InternalServerDescriptor&, const InternalServerDescriptor&);
::Ice::Object* upCast(::IceGrid::InternalServerDescriptor*);
typedef ::IceInternal::Handle< ::IceGrid::InternalServerDescriptor> InternalServerDescriptorPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalServerDescriptor> InternalServerDescriptorPrx;
void __patch(InternalServerDescriptorPtr&, const ::Ice::ObjectPtr&);

class Adapter;
bool operator==(const Adapter&, const Adapter&);
bool operator<(const Adapter&, const Adapter&);
::Ice::Object* upCast(::IceGrid::Adapter*);
typedef ::IceInternal::Handle< ::IceGrid::Adapter> AdapterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Adapter> AdapterPrx;
void __patch(AdapterPtr&, const ::Ice::ObjectPtr&);

class FileReader;
bool operator==(const FileReader&, const FileReader&);
bool operator<(const FileReader&, const FileReader&);
::Ice::Object* upCast(::IceGrid::FileReader*);
typedef ::IceInternal::Handle< ::IceGrid::FileReader> FileReaderPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::FileReader> FileReaderPrx;
void __patch(FileReaderPtr&, const ::Ice::ObjectPtr&);

class Server;
bool operator==(const Server&, const Server&);
bool operator<(const Server&, const Server&);
::Ice::Object* upCast(::IceGrid::Server*);
typedef ::IceInternal::Handle< ::IceGrid::Server> ServerPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Server> ServerPrx;
void __patch(ServerPtr&, const ::Ice::ObjectPtr&);

class InternalRegistry;
bool operator==(const InternalRegistry&, const InternalRegistry&);
bool operator<(const InternalRegistry&, const InternalRegistry&);
::Ice::Object* upCast(::IceGrid::InternalRegistry*);
typedef ::IceInternal::Handle< ::IceGrid::InternalRegistry> InternalRegistryPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalRegistry> InternalRegistryPrx;
void __patch(InternalRegistryPtr&, const ::Ice::ObjectPtr&);

class ReplicaObserver;
bool operator==(const ReplicaObserver&, const ReplicaObserver&);
bool operator<(const ReplicaObserver&, const ReplicaObserver&);
::Ice::Object* upCast(::IceGrid::ReplicaObserver*);
typedef ::IceInternal::Handle< ::IceGrid::ReplicaObserver> ReplicaObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ReplicaObserver> ReplicaObserverPrx;
void __patch(ReplicaObserverPtr&, const ::Ice::ObjectPtr&);

class PatcherFeedback;
bool operator==(const PatcherFeedback&, const PatcherFeedback&);
bool operator<(const PatcherFeedback&, const PatcherFeedback&);
::Ice::Object* upCast(::IceGrid::PatcherFeedback*);
typedef ::IceInternal::Handle< ::IceGrid::PatcherFeedback> PatcherFeedbackPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::PatcherFeedback> PatcherFeedbackPrx;
void __patch(PatcherFeedbackPtr&, const ::Ice::ObjectPtr&);

class Node;
bool operator==(const Node&, const Node&);
bool operator<(const Node&, const Node&);
::Ice::Object* upCast(::IceGrid::Node*);
typedef ::IceInternal::Handle< ::IceGrid::Node> NodePtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::Node> NodePrx;
void __patch(NodePtr&, const ::Ice::ObjectPtr&);

class NodeSession;
bool operator==(const NodeSession&, const NodeSession&);
bool operator<(const NodeSession&, const NodeSession&);
::Ice::Object* upCast(::IceGrid::NodeSession*);
typedef ::IceInternal::Handle< ::IceGrid::NodeSession> NodeSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::NodeSession> NodeSessionPrx;
void __patch(NodeSessionPtr&, const ::Ice::ObjectPtr&);

class DatabaseObserver;
bool operator==(const DatabaseObserver&, const DatabaseObserver&);
bool operator<(const DatabaseObserver&, const DatabaseObserver&);
::Ice::Object* upCast(::IceGrid::DatabaseObserver*);
typedef ::IceInternal::Handle< ::IceGrid::DatabaseObserver> DatabaseObserverPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::DatabaseObserver> DatabaseObserverPrx;
void __patch(DatabaseObserverPtr&, const ::Ice::ObjectPtr&);

class ReplicaSession;
bool operator==(const ReplicaSession&, const ReplicaSession&);
bool operator<(const ReplicaSession&, const ReplicaSession&);
::Ice::Object* upCast(::IceGrid::ReplicaSession*);
typedef ::IceInternal::Handle< ::IceGrid::ReplicaSession> ReplicaSessionPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::ReplicaSession> ReplicaSessionPrx;
void __patch(ReplicaSessionPtr&, const ::Ice::ObjectPtr&);

class InternalNodeInfo;
bool operator==(const InternalNodeInfo&, const InternalNodeInfo&);
bool operator<(const InternalNodeInfo&, const InternalNodeInfo&);
::Ice::Object* upCast(::IceGrid::InternalNodeInfo*);
typedef ::IceInternal::Handle< ::IceGrid::InternalNodeInfo> InternalNodeInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalNodeInfo> InternalNodeInfoPrx;
void __patch(InternalNodeInfoPtr&, const ::Ice::ObjectPtr&);

class InternalReplicaInfo;
bool operator==(const InternalReplicaInfo&, const InternalReplicaInfo&);
bool operator<(const InternalReplicaInfo&, const InternalReplicaInfo&);
::Ice::Object* upCast(::IceGrid::InternalReplicaInfo*);
typedef ::IceInternal::Handle< ::IceGrid::InternalReplicaInfo> InternalReplicaInfoPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::IceGrid::InternalReplicaInfo> InternalReplicaInfoPrx;
void __patch(InternalReplicaInfoPtr&, const ::Ice::ObjectPtr&);

}

namespace IceGrid
{

class SynchronizationException : public ::Ice::LocalException
{
public:

    SynchronizationException(const char*, int);
    virtual ~SynchronizationException() throw();

    virtual ::std::string ice_name() const;
    virtual SynchronizationException* ice_clone() const;
    virtual void ice_throw() const;
};

typedef ::std::vector< ::IceGrid::InternalDbEnvDescriptorPtr> InternalDbEnvDescriptorSeq;

typedef ::std::vector< ::IceGrid::InternalAdapterDescriptorPtr> InternalAdapterDescriptorSeq;

typedef ::std::map< ::std::string, ::IceGrid::PropertyDescriptorSeq> PropertyDescriptorSeqDict;

class AdapterActiveException : public ::Ice::UserException
{
public:

    AdapterActiveException() {}
    virtual ~AdapterActiveException() throw();

    virtual ::std::string ice_name() const;
    virtual AdapterActiveException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

static AdapterActiveException __AdapterActiveException_init;

class AdapterNotActiveException : public ::Ice::UserException
{
public:

    AdapterNotActiveException() {}
    explicit AdapterNotActiveException(bool);
    virtual ~AdapterNotActiveException() throw();

    virtual ::std::string ice_name() const;
    virtual AdapterNotActiveException* ice_clone() const;
    virtual void ice_throw() const;

    bool activatable;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class AdapterExistsException : public ::Ice::UserException
{
public:

    AdapterExistsException() {}
    explicit AdapterExistsException(const ::std::string&);
    virtual ~AdapterExistsException() throw();

    virtual ::std::string ice_name() const;
    virtual AdapterExistsException* ice_clone() const;
    virtual void ice_throw() const;

    ::std::string id;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

typedef ::std::map< ::std::string, ::IceGrid::AdapterPrx> AdapterPrxDict;

typedef ::std::vector< ::IceGrid::InternalRegistryPrx> InternalRegistryPrxSeq;

typedef ::std::vector< ::IceGrid::NodePrx> NodePrxSeq;

class NodeActiveException : public ::Ice::UserException
{
public:

    NodeActiveException() {}
    virtual ~NodeActiveException() throw();

    virtual ::std::string ice_name() const;
    virtual NodeActiveException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

class ReplicaActiveException : public ::Ice::UserException
{
public:

    ReplicaActiveException() {}
    virtual ~ReplicaActiveException() throw();

    virtual ::std::string ice_name() const;
    virtual ReplicaActiveException* ice_clone() const;
    virtual void ice_throw() const;

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::UserException::__writeImpl;
    using ::Ice::UserException::__readImpl;
    #endif
};

enum TopicName
{
    RegistryObserverTopicName,
    NodeObserverTopicName,
    ApplicationObserverTopicName,
    AdapterObserverTopicName,
    ObjectObserverTopicName
};

typedef ::std::map< ::std::string, ::Ice::Long> StringLongDict;

}

namespace Ice
{
template<>
struct StreamableTraits< ::IceGrid::AdapterActiveException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::IceGrid::AdapterNotActiveException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::IceGrid::AdapterExistsException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::IceGrid::NodeActiveException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::IceGrid::ReplicaActiveException>
{
    static const StreamHelperCategory helper = StreamHelperCategoryUserException;
};

template<>
struct StreamableTraits< ::IceGrid::TopicName>
{
    static const StreamHelperCategory helper = StreamHelperCategoryEnum;
    static const int minValue = 0;
    static const int maxValue = 4;
    static const int minWireSize = 1;
    static const bool fixedLength = false;
};

}

namespace IceGrid
{

class AMD_Adapter_activate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::Ice::ObjectPrx&) = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Adapter_activate> AMD_Adapter_activatePtr;

class AMD_Server_start : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Server_start> AMD_Server_startPtr;

class AMD_Server_stop : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Server_stop> AMD_Server_stopPtr;

class AMI_Server_checkUpdate : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response(bool) = 0;

    void __response(bool __ret)
    {
        ice_response(__ret);
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
    }
};

typedef ::IceUtil::Handle< ::IceGrid::AMI_Server_checkUpdate> AMI_Server_checkUpdatePtr;

class AMD_Server_setProcess : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Server_setProcess> AMD_Server_setProcessPtr;

class AMD_Node_loadServer : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Node_loadServer> AMD_Node_loadServerPtr;

class AMD_Node_loadServerWithoutRestart : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int) = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Node_loadServerWithoutRestart> AMD_Node_loadServerWithoutRestartPtr;

class AMD_Node_destroyServer : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Node_destroyServer> AMD_Node_destroyServerPtr;

class AMD_Node_patch : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_Node_patch> AMD_Node_patchPtr;

class AMD_NodeSession_loadServers : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_NodeSession_loadServers> AMD_NodeSession_loadServersPtr;

class AMD_NodeSession_waitForApplicationUpdate : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::IceGrid::AMD_NodeSession_waitForApplicationUpdate> AMD_NodeSession_waitForApplicationUpdatePtr;

}

namespace IceAsync
{

namespace IceGrid
{

class AMD_Adapter_activate : public ::IceGrid::AMD_Adapter_activate, public ::IceInternal::IncomingAsync
{
public:

    AMD_Adapter_activate(::IceInternal::Incoming&);

    virtual void ice_response(const ::Ice::ObjectPrx&);
};

class AMD_Server_start : public ::IceGrid::AMD_Server_start, public ::IceInternal::IncomingAsync
{
public:

    AMD_Server_start(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Server_stop : public ::IceGrid::AMD_Server_stop, public ::IceInternal::IncomingAsync
{
public:

    AMD_Server_stop(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Server_setProcess : public ::IceGrid::AMD_Server_setProcess, public ::IceInternal::IncomingAsync
{
public:

    AMD_Server_setProcess(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_Node_loadServer : public ::IceGrid::AMD_Node_loadServer, public ::IceInternal::IncomingAsync
{
public:

    AMD_Node_loadServer(::IceInternal::Incoming&);

    virtual void ice_response(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Node_loadServerWithoutRestart : public ::IceGrid::AMD_Node_loadServerWithoutRestart, public ::IceInternal::IncomingAsync
{
public:

    AMD_Node_loadServerWithoutRestart(::IceInternal::Incoming&);

    virtual void ice_response(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int);
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Node_destroyServer : public ::IceGrid::AMD_Node_destroyServer, public ::IceInternal::IncomingAsync
{
public:

    AMD_Node_destroyServer(::IceInternal::Incoming&);

    virtual void ice_response();
    // COMPILERFIX: The using directive avoid compiler warnings with -Woverloaded-virtual
    using ::IceInternal::IncomingAsync::ice_exception;
    virtual void ice_exception(const ::std::exception&);
};

class AMD_Node_patch : public ::IceGrid::AMD_Node_patch, public ::IceInternal::IncomingAsync
{
public:

    AMD_Node_patch(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_NodeSession_loadServers : public ::IceGrid::AMD_NodeSession_loadServers, public ::IceInternal::IncomingAsync
{
public:

    AMD_NodeSession_loadServers(::IceInternal::Incoming&);

    virtual void ice_response();
};

class AMD_NodeSession_waitForApplicationUpdate : public ::IceGrid::AMD_NodeSession_waitForApplicationUpdate, public ::IceInternal::IncomingAsync
{
public:

    AMD_NodeSession_waitForApplicationUpdate(::IceInternal::Incoming&);

    virtual void ice_response();
};

}

}

namespace IceGrid
{

class Callback_Adapter_activate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Adapter_activate_Base> Callback_Adapter_activatePtr;

class Callback_Adapter_getDirectProxy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Adapter_getDirectProxy_Base> Callback_Adapter_getDirectProxyPtr;

class Callback_Adapter_setDirectProxy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Adapter_setDirectProxy_Base> Callback_Adapter_setDirectProxyPtr;

class Callback_FileReader_getOffsetFromEnd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileReader_getOffsetFromEnd_Base> Callback_FileReader_getOffsetFromEndPtr;

class Callback_FileReader_read_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_FileReader_read_Base> Callback_FileReader_readPtr;

class Callback_Server_start_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_start_Base> Callback_Server_startPtr;

class Callback_Server_stop_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_stop_Base> Callback_Server_stopPtr;

class Callback_Server_checkUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_checkUpdate_Base> Callback_Server_checkUpdatePtr;

class Callback_Server_setEnabled_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_setEnabled_Base> Callback_Server_setEnabledPtr;

class Callback_Server_isEnabled_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_isEnabled_Base> Callback_Server_isEnabledPtr;

class Callback_Server_sendSignal_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_sendSignal_Base> Callback_Server_sendSignalPtr;

class Callback_Server_writeMessage_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_writeMessage_Base> Callback_Server_writeMessagePtr;

class Callback_Server_getState_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_getState_Base> Callback_Server_getStatePtr;

class Callback_Server_getPid_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_getPid_Base> Callback_Server_getPidPtr;

class Callback_Server_setProcess_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Server_setProcess_Base> Callback_Server_setProcessPtr;

class Callback_ReplicaObserver_replicaInit_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaObserver_replicaInit_Base> Callback_ReplicaObserver_replicaInitPtr;

class Callback_ReplicaObserver_replicaAdded_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaObserver_replicaAdded_Base> Callback_ReplicaObserver_replicaAddedPtr;

class Callback_ReplicaObserver_replicaRemoved_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaObserver_replicaRemoved_Base> Callback_ReplicaObserver_replicaRemovedPtr;

class Callback_PatcherFeedback_finished_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PatcherFeedback_finished_Base> Callback_PatcherFeedback_finishedPtr;

class Callback_PatcherFeedback_failed_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_PatcherFeedback_failed_Base> Callback_PatcherFeedback_failedPtr;

class Callback_Node_loadServer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_loadServer_Base> Callback_Node_loadServerPtr;

class Callback_Node_loadServerWithoutRestart_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_loadServerWithoutRestart_Base> Callback_Node_loadServerWithoutRestartPtr;

class Callback_Node_destroyServer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_destroyServer_Base> Callback_Node_destroyServerPtr;

class Callback_Node_patch_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_patch_Base> Callback_Node_patchPtr;

class Callback_Node_registerWithReplica_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_registerWithReplica_Base> Callback_Node_registerWithReplicaPtr;

class Callback_Node_getName_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getName_Base> Callback_Node_getNamePtr;

class Callback_Node_getHostname_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getHostname_Base> Callback_Node_getHostnamePtr;

class Callback_Node_getLoad_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getLoad_Base> Callback_Node_getLoadPtr;

class Callback_Node_getProcessorSocketCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_getProcessorSocketCount_Base> Callback_Node_getProcessorSocketCountPtr;

class Callback_Node_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Node_shutdown_Base> Callback_Node_shutdownPtr;

class Callback_NodeSession_keepAlive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_keepAlive_Base> Callback_NodeSession_keepAlivePtr;

class Callback_NodeSession_setReplicaObserver_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_setReplicaObserver_Base> Callback_NodeSession_setReplicaObserverPtr;

class Callback_NodeSession_getTimeout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_getTimeout_Base> Callback_NodeSession_getTimeoutPtr;

class Callback_NodeSession_getObserver_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_getObserver_Base> Callback_NodeSession_getObserverPtr;

class Callback_NodeSession_loadServers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_loadServers_Base> Callback_NodeSession_loadServersPtr;

class Callback_NodeSession_getServers_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_getServers_Base> Callback_NodeSession_getServersPtr;

class Callback_NodeSession_waitForApplicationUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_waitForApplicationUpdate_Base> Callback_NodeSession_waitForApplicationUpdatePtr;

class Callback_NodeSession_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_NodeSession_destroy_Base> Callback_NodeSession_destroyPtr;

class Callback_ReplicaSession_keepAlive_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_keepAlive_Base> Callback_ReplicaSession_keepAlivePtr;

class Callback_ReplicaSession_getTimeout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_getTimeout_Base> Callback_ReplicaSession_getTimeoutPtr;

class Callback_ReplicaSession_setDatabaseObserver_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_setDatabaseObserver_Base> Callback_ReplicaSession_setDatabaseObserverPtr;

class Callback_ReplicaSession_setEndpoints_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_setEndpoints_Base> Callback_ReplicaSession_setEndpointsPtr;

class Callback_ReplicaSession_registerWellKnownObjects_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_registerWellKnownObjects_Base> Callback_ReplicaSession_registerWellKnownObjectsPtr;

class Callback_ReplicaSession_setAdapterDirectProxy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_setAdapterDirectProxy_Base> Callback_ReplicaSession_setAdapterDirectProxyPtr;

class Callback_ReplicaSession_receivedUpdate_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_receivedUpdate_Base> Callback_ReplicaSession_receivedUpdatePtr;

class Callback_ReplicaSession_destroy_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_ReplicaSession_destroy_Base> Callback_ReplicaSession_destroyPtr;

class Callback_InternalRegistry_registerNode_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_registerNode_Base> Callback_InternalRegistry_registerNodePtr;

class Callback_InternalRegistry_registerReplica_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_registerReplica_Base> Callback_InternalRegistry_registerReplicaPtr;

class Callback_InternalRegistry_registerWithReplica_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_registerWithReplica_Base> Callback_InternalRegistry_registerWithReplicaPtr;

class Callback_InternalRegistry_getNodes_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_getNodes_Base> Callback_InternalRegistry_getNodesPtr;

class Callback_InternalRegistry_getReplicas_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_getReplicas_Base> Callback_InternalRegistry_getReplicasPtr;

class Callback_InternalRegistry_getApplications_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_getApplications_Base> Callback_InternalRegistry_getApplicationsPtr;

class Callback_InternalRegistry_getAdapters_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_getAdapters_Base> Callback_InternalRegistry_getAdaptersPtr;

class Callback_InternalRegistry_getObjects_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_getObjects_Base> Callback_InternalRegistry_getObjectsPtr;

class Callback_InternalRegistry_shutdown_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_InternalRegistry_shutdown_Base> Callback_InternalRegistry_shutdownPtr;

}

namespace IceProxy
{

namespace IceGrid
{

class InternalDbEnvDescriptor : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_secure(bool __secure) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_twoway() const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_oneway() const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_batchOneway() const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_datagram() const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_batchDatagram() const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_compress(bool __compress) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDbEnvDescriptor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InternalDbEnvDescriptor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class InternalAdapterDescriptor : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_secure(bool __secure) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_twoway() const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_oneway() const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_batchOneway() const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_datagram() const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_batchDatagram() const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_compress(bool __compress) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalAdapterDescriptor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InternalAdapterDescriptor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class InternalDistributionDescriptor : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_secure(bool __secure) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_twoway() const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_oneway() const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_batchOneway() const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_datagram() const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_batchDatagram() const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_compress(bool __compress) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalDistributionDescriptor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InternalDistributionDescriptor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class InternalServerDescriptor : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_secure(bool __secure) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_twoway() const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_oneway() const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_batchOneway() const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_datagram() const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_batchDatagram() const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_compress(bool __compress) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalServerDescriptor> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InternalServerDescriptor*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Adapter : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::ObjectPrx activate()
    {
        return activate(0);
    }
    ::Ice::ObjectPrx activate(const ::Ice::Context& __ctx)
    {
        return activate(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_activate(const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activate(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_activate(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_activate(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_activate(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_activate(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ObjectPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
                ::Ice::ObjectPrx __ret;
                try
                {
                    __ret = __proxy->end_activate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ObjectPrx&)> _response;
        };
        return begin_activate(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_activate()
    {
        return begin_activate(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx)
    {
        return begin_activate(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::IceGrid::Callback_Adapter_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Adapter_activatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_activate(&__ctx, __del, __cookie);
    }

    ::Ice::ObjectPrx end_activate(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ObjectPrx activate(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_activate(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::ObjectPrx getDirectProxy()
    {
        return getDirectProxy(0);
    }
    ::Ice::ObjectPrx getDirectProxy(const ::Ice::Context& __ctx)
    {
        return getDirectProxy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getDirectProxy(const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDirectProxy(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDirectProxy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDirectProxy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getDirectProxy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getDirectProxy(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getDirectProxy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getDirectProxy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getDirectProxy(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::ObjectPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::ObjectPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
                ::Ice::ObjectPrx __ret;
                try
                {
                    __ret = __proxy->end_getDirectProxy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::ObjectPrx&)> _response;
        };
        return begin_getDirectProxy(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getDirectProxy()
    {
        return begin_getDirectProxy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDirectProxy(const ::Ice::Context& __ctx)
    {
        return begin_getDirectProxy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getDirectProxy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectProxy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDirectProxy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectProxy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDirectProxy(const ::IceGrid::Callback_Adapter_getDirectProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectProxy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getDirectProxy(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Adapter_getDirectProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getDirectProxy(&__ctx, __del, __cookie);
    }

    ::Ice::ObjectPrx end_getDirectProxy(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::ObjectPrx getDirectProxy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getDirectProxy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDirectProxy(const ::Ice::ObjectPrx& proxy)
    {
        setDirectProxy(proxy, 0);
    }
    void setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx)
    {
        setDirectProxy(proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDirectProxy(proxy, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDirectProxy(proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDirectProxy(proxy, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDirectProxy(proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setDirectProxy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setDirectProxy(proxy, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setDirectProxy(const ::Ice::ObjectPrx& proxy)
    {
        return begin_setDirectProxy(proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_setDirectProxy(proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDirectProxy(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDirectProxy(proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::IceGrid::Callback_Adapter_setDirectProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDirectProxy(proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDirectProxy(const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Adapter_setDirectProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDirectProxy(proxy, &__ctx, __del, __cookie);
    }

    void end_setDirectProxy(const ::Ice::AsyncResultPtr&);
    
private:

    void setDirectProxy(const ::Ice::ObjectPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDirectProxy(const ::Ice::ObjectPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Adapter> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_secure(bool __secure) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_twoway() const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_oneway() const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_batchOneway() const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_datagram() const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_batchDatagram() const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_compress(bool __compress) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Adapter> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Adapter*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class FileReader : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Long getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines)
    {
        return getOffsetFromEnd(filename, lines, 0);
    }
    ::Ice::Long getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::Context& __ctx)
    {
        return getOffsetFromEnd(filename, lines, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOffsetFromEnd(filename, lines, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOffsetFromEnd(filename, lines, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getOffsetFromEnd(filename, lines, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getOffsetFromEnd(filename, lines, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::FileReaderPrx __proxy = ::IceGrid::FileReaderPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long __ret;
                try
                {
                    __ret = __proxy->end_getOffsetFromEnd(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Long)> _response;
        };
        return begin_getOffsetFromEnd(filename, lines, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines)
    {
        return begin_getOffsetFromEnd(filename, lines, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::Context& __ctx)
    {
        return begin_getOffsetFromEnd(filename, lines, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetFromEnd(filename, lines, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetFromEnd(filename, lines, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::IceGrid::Callback_FileReader_getOffsetFromEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetFromEnd(filename, lines, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getOffsetFromEnd(const ::std::string& filename, ::Ice::Int lines, const ::Ice::Context& __ctx, const ::IceGrid::Callback_FileReader_getOffsetFromEndPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getOffsetFromEnd(filename, lines, &__ctx, __del, __cookie);
    }

    ::Ice::Long end_getOffsetFromEnd(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Long getOffsetFromEnd(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getOffsetFromEnd(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, ::Ice::Long& newPos, ::Ice::StringSeq& lines)
    {
        return read(filename, pos, size, newPos, lines, 0);
    }
    bool read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, ::Ice::Long& newPos, ::Ice::StringSeq& lines, const ::Ice::Context& __ctx)
    {
        return read(filename, pos, size, newPos, lines, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::IceInternal::Function<void (bool, ::Ice::Long, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(filename, pos, size, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(filename, pos, size, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool, ::Ice::Long, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_read(filename, pos, size, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_read(filename, pos, size, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool, ::Ice::Long, const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool, ::Ice::Long, const ::Ice::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::FileReaderPrx __proxy = ::IceGrid::FileReaderPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long newPos;
                ::Ice::StringSeq lines;
                bool __ret;
                try
                {
                    __ret = __proxy->end_read(newPos, lines, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, newPos, lines);
                }
            }
        
        private:
            
            ::std::function<void (bool, ::Ice::Long, const ::Ice::StringSeq&)> _response;
        };
        return begin_read(filename, pos, size, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size)
    {
        return begin_read(filename, pos, size, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::Ice::Context& __ctx)
    {
        return begin_read(filename, pos, size, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(filename, pos, size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(filename, pos, size, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::IceGrid::Callback_FileReader_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(filename, pos, size, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_read(const ::std::string& filename, ::Ice::Long pos, ::Ice::Int size, const ::Ice::Context& __ctx, const ::IceGrid::Callback_FileReader_readPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_read(filename, pos, size, &__ctx, __del, __cookie);
    }

    bool end_read(::Ice::Long& newPos, ::Ice::StringSeq& lines, const ::Ice::AsyncResultPtr&);
    
private:

    bool read(const ::std::string&, ::Ice::Long, ::Ice::Int, ::Ice::Long&, ::Ice::StringSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_read(const ::std::string&, ::Ice::Long, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<FileReader> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_secure(bool __secure) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_twoway() const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_oneway() const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_batchOneway() const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_datagram() const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_batchDatagram() const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_compress(bool __compress) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_timeout(int __timeout) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<FileReader> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<FileReader*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Server : virtual public ::IceProxy::IceGrid::FileReader
{
public:

    void start()
    {
        start(0);
    }
    void start(const ::Ice::Context& __ctx)
    {
        start(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_start(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_start(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_start(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_start(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_start(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_start(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_start(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_start(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_start(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_start(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_start(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_start()
    {
        return begin_start(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Ice::Context& __ctx)
    {
        return begin_start(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::IceGrid::Callback_Server_startPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_start(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_startPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_start(&__ctx, __del, __cookie);
    }

    void end_start(const ::Ice::AsyncResultPtr&);
    
private:

    void start(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_start(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void stop()
    {
        stop(0);
    }
    void stop(const ::Ice::Context& __ctx)
    {
        stop(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_stop(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stop(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stop(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_stop(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_stop(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_stop(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_stop(const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_stop(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_stop(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_stop()
    {
        return begin_stop(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx)
    {
        return begin_stop(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::IceGrid::Callback_Server_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_stopPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_stop(&__ctx, __del, __cookie);
    }

    void end_stop(const ::Ice::AsyncResultPtr&);
    
private:

    void stop(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_stop(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart)
    {
        return checkUpdate(svr, noRestart, 0);
    }
    bool checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::Context& __ctx)
    {
        return checkUpdate(svr, noRestart, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkUpdate(svr, noRestart, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkUpdate(svr, noRestart, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_checkUpdate(svr, noRestart, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_checkUpdate(svr, noRestart, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_checkUpdate(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_checkUpdate(svr, noRestart, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart)
    {
        return begin_checkUpdate(svr, noRestart, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::Context& __ctx)
    {
        return begin_checkUpdate(svr, noRestart, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkUpdate(svr, noRestart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkUpdate(svr, noRestart, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::IceGrid::Callback_Server_checkUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkUpdate(svr, noRestart, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr& svr, bool noRestart, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_checkUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_checkUpdate(svr, noRestart, &__ctx, __del, __cookie);
    }

    bool end_checkUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    bool checkUpdate(const ::IceGrid::InternalServerDescriptorPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_checkUpdate(const ::IceGrid::InternalServerDescriptorPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool checkUpdate_async(const ::IceGrid::AMI_Server_checkUpdatePtr&, const ::IceGrid::InternalServerDescriptorPtr&, bool);
    bool checkUpdate_async(const ::IceGrid::AMI_Server_checkUpdatePtr&, const ::IceGrid::InternalServerDescriptorPtr&, bool, const ::Ice::Context&);

    void setEnabled(bool enable)
    {
        setEnabled(enable, 0);
    }
    void setEnabled(bool enable, const ::Ice::Context& __ctx)
    {
        setEnabled(enable, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEnabled(bool enable, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEnabled(enable, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setEnabled(bool enable, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEnabled(enable, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEnabled(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEnabled(enable, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEnabled(bool enable, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEnabled(enable, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setEnabled(bool enable)
    {
        return begin_setEnabled(enable, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEnabled(bool enable, const ::Ice::Context& __ctx)
    {
        return begin_setEnabled(enable, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEnabled(bool enable, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEnabled(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEnabled(bool enable, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEnabled(enable, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEnabled(bool enable, const ::IceGrid::Callback_Server_setEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEnabled(enable, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEnabled(bool enable, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_setEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEnabled(enable, &__ctx, __del, __cookie);
    }

    void end_setEnabled(const ::Ice::AsyncResultPtr&);
    
private:

    void setEnabled(bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEnabled(bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    bool isEnabled()
    {
        return isEnabled(0);
    }
    bool isEnabled(const ::Ice::Context& __ctx)
    {
        return isEnabled(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isEnabled(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isEnabled(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_isEnabled(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_isEnabled(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_isEnabled(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_isEnabled(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (bool)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (bool)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
                bool __ret;
                try
                {
                    __ret = __proxy->end_isEnabled(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (bool)> _response;
        };
        return begin_isEnabled(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_isEnabled()
    {
        return begin_isEnabled(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context& __ctx)
    {
        return begin_isEnabled(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::IceGrid::Callback_Server_isEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_isEnabledPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_isEnabled(&__ctx, __del, __cookie);
    }

    bool end_isEnabled(const ::Ice::AsyncResultPtr&);
    
private:

    bool isEnabled(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_isEnabled(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void sendSignal(const ::std::string& signal)
    {
        sendSignal(signal, 0);
    }
    void sendSignal(const ::std::string& signal, const ::Ice::Context& __ctx)
    {
        sendSignal(signal, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_sendSignal(const ::std::string& signal, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendSignal(signal, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendSignal(const ::std::string& signal, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendSignal(signal, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_sendSignal(const ::std::string& signal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_sendSignal(signal, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_sendSignal(const ::std::string& signal, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_sendSignal(signal, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_sendSignal(const ::std::string& signal, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_sendSignal(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_sendSignal(signal, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_sendSignal(const ::std::string& signal)
    {
        return begin_sendSignal(signal, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendSignal(const ::std::string& signal, const ::Ice::Context& __ctx)
    {
        return begin_sendSignal(signal, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendSignal(const ::std::string& signal, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSignal(signal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSignal(const ::std::string& signal, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSignal(signal, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSignal(const ::std::string& signal, const ::IceGrid::Callback_Server_sendSignalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSignal(signal, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendSignal(const ::std::string& signal, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_sendSignalPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendSignal(signal, &__ctx, __del, __cookie);
    }

    void end_sendSignal(const ::Ice::AsyncResultPtr&);
    
private:

    void sendSignal(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendSignal(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void writeMessage(const ::std::string& message, ::Ice::Int fd)
    {
        writeMessage(message, fd, 0);
    }
    void writeMessage(const ::std::string& message, ::Ice::Int fd, const ::Ice::Context& __ctx)
    {
        writeMessage(message, fd, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeMessage(message, fd, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeMessage(message, fd, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_writeMessage(message, fd, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_writeMessage(message, fd, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_writeMessage(const ::std::string& message, ::Ice::Int fd)
    {
        return begin_writeMessage(message, fd, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::Ice::Context& __ctx)
    {
        return begin_writeMessage(message, fd, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessage(message, fd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessage(message, fd, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::IceGrid::Callback_Server_writeMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessage(message, fd, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_writeMessage(const ::std::string& message, ::Ice::Int fd, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_writeMessagePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_writeMessage(message, fd, &__ctx, __del, __cookie);
    }

    void end_writeMessage(const ::Ice::AsyncResultPtr&);
    
private:

    void writeMessage(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_writeMessage(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::ServerState getState()
    {
        return getState(0);
    }
    ::IceGrid::ServerState getState(const ::Ice::Context& __ctx)
    {
        return getState(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getState(const ::IceInternal::Function<void (::IceGrid::ServerState)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::IceGrid::ServerState)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getState(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getState(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getState(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getState(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::IceGrid::ServerState)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::IceGrid::ServerState)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
                ::IceGrid::ServerState __ret;
                try
                {
                    __ret = __proxy->end_getState(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::IceGrid::ServerState)> _response;
        };
        return begin_getState(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getState()
    {
        return begin_getState(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx)
    {
        return begin_getState(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::IceGrid::Callback_Server_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_getStatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getState(&__ctx, __del, __cookie);
    }

    ::IceGrid::ServerState end_getState(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::ServerState getState(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getState(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getPid()
    {
        return getPid(0);
    }
    ::Ice::Int getPid(const ::Ice::Context& __ctx)
    {
        return getPid(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getPid(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPid(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPid(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPid(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getPid(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getPid(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getPid(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getPid(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getPid(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getPid(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getPid(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getPid()
    {
        return begin_getPid(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPid(const ::Ice::Context& __ctx)
    {
        return begin_getPid(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getPid(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPid(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPid(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPid(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPid(const ::IceGrid::Callback_Server_getPidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPid(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getPid(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_getPidPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getPid(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getPid(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getPid(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getPid(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setProcess(const ::Ice::ProcessPrx& proc)
    {
        setProcess(proc, 0);
    }
    void setProcess(const ::Ice::ProcessPrx& proc, const ::Ice::Context& __ctx)
    {
        setProcess(proc, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setProcess(const ::Ice::ProcessPrx& proc, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setProcess(proc, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setProcess(const ::Ice::ProcessPrx& proc, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setProcess(proc, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setProcess(const ::Ice::ProcessPrx& proc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setProcess(proc, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setProcess(const ::Ice::ProcessPrx& proc, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setProcess(proc, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setProcess(const ::Ice::ProcessPrx& proc)
    {
        return begin_setProcess(proc, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProcess(const ::Ice::ProcessPrx& proc, const ::Ice::Context& __ctx)
    {
        return begin_setProcess(proc, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setProcess(const ::Ice::ProcessPrx& proc, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProcess(proc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProcess(const ::Ice::ProcessPrx& proc, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProcess(proc, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProcess(const ::Ice::ProcessPrx& proc, const ::IceGrid::Callback_Server_setProcessPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProcess(proc, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setProcess(const ::Ice::ProcessPrx& proc, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Server_setProcessPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setProcess(proc, &__ctx, __del, __cookie);
    }

    void end_setProcess(const ::Ice::AsyncResultPtr&);
    
private:

    void setProcess(const ::Ice::ProcessPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setProcess(const ::Ice::ProcessPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Server> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_secure(bool __secure) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_twoway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_oneway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_batchOneway() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_datagram() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_batchDatagram() const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_compress(bool __compress) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Server> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Server*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ReplicaObserver : virtual public ::IceProxy::Ice::Object
{
public:

    void replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas)
    {
        replicaInit(replicas, 0);
    }
    void replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::Ice::Context& __ctx)
    {
        replicaInit(replicas, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_replicaInit(replicas, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_replicaInit(replicas, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_replicaInit(replicas, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_replicaInit(replicas, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas)
    {
        return begin_replicaInit(replicas, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::Ice::Context& __ctx)
    {
        return begin_replicaInit(replicas, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaInit(replicas, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaInit(replicas, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::IceGrid::Callback_ReplicaObserver_replicaInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaInit(replicas, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq& replicas, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaObserver_replicaInitPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaInit(replicas, &__ctx, __del, __cookie);
    }

    void end_replicaInit(const ::Ice::AsyncResultPtr&);
    
private:

    void replicaInit(const ::IceGrid::InternalRegistryPrxSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_replicaInit(const ::IceGrid::InternalRegistryPrxSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void replicaAdded(const ::IceGrid::InternalRegistryPrx& replica)
    {
        replicaAdded(replica, 0);
    }
    void replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx)
    {
        replicaAdded(replica, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_replicaAdded(replica, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_replicaAdded(replica, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_replicaAdded(replica, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_replicaAdded(replica, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica)
    {
        return begin_replicaAdded(replica, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx)
    {
        return begin_replicaAdded(replica, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaAdded(replica, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaAdded(replica, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::IceGrid::Callback_ReplicaObserver_replicaAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaAdded(replica, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaAdded(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaObserver_replicaAddedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaAdded(replica, &__ctx, __del, __cookie);
    }

    void end_replicaAdded(const ::Ice::AsyncResultPtr&);
    
private:

    void replicaAdded(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_replicaAdded(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica)
    {
        replicaRemoved(replica, 0);
    }
    void replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx)
    {
        replicaRemoved(replica, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_replicaRemoved(replica, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_replicaRemoved(replica, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_replicaRemoved(replica, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_replicaRemoved(replica, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica)
    {
        return begin_replicaRemoved(replica, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx)
    {
        return begin_replicaRemoved(replica, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaRemoved(replica, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaRemoved(replica, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::IceGrid::Callback_ReplicaObserver_replicaRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaRemoved(replica, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaObserver_replicaRemovedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_replicaRemoved(replica, &__ctx, __del, __cookie);
    }

    void end_replicaRemoved(const ::Ice::AsyncResultPtr&);
    
private:

    void replicaRemoved(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_replicaRemoved(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_secure(bool __secure) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_twoway() const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_oneway() const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_batchOneway() const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_datagram() const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_batchDatagram() const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_compress(bool __compress) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaObserver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ReplicaObserver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class PatcherFeedback : virtual public ::IceProxy::Ice::Object
{
public:

    void finished()
    {
        finished(0);
    }
    void finished(const ::Ice::Context& __ctx)
    {
        finished(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_finished(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finished(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finished(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_finished(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_finished(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_finished(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_finished()
    {
        return begin_finished(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context& __ctx)
    {
        return begin_finished(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::IceGrid::Callback_PatcherFeedback_finishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context& __ctx, const ::IceGrid::Callback_PatcherFeedback_finishedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_finished(&__ctx, __del, __cookie);
    }

    void end_finished(const ::Ice::AsyncResultPtr&);
    
private:

    void finished(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_finished(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void failed(const ::std::string& reason)
    {
        failed(reason, 0);
    }
    void failed(const ::std::string& reason, const ::Ice::Context& __ctx)
    {
        failed(reason, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_failed(const ::std::string& reason, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_failed(reason, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_failed(const ::std::string& reason, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_failed(reason, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_failed(const ::std::string& reason, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_failed(reason, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_failed(const ::std::string& reason, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_failed(reason, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_failed(const ::std::string& reason)
    {
        return begin_failed(reason, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_failed(const ::std::string& reason, const ::Ice::Context& __ctx)
    {
        return begin_failed(reason, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_failed(const ::std::string& reason, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_failed(reason, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_failed(const ::std::string& reason, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_failed(reason, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_failed(const ::std::string& reason, const ::IceGrid::Callback_PatcherFeedback_failedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_failed(reason, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_failed(const ::std::string& reason, const ::Ice::Context& __ctx, const ::IceGrid::Callback_PatcherFeedback_failedPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_failed(reason, &__ctx, __del, __cookie);
    }

    void end_failed(const ::Ice::AsyncResultPtr&);
    
private:

    void failed(const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_failed(const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_secure(bool __secure) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_twoway() const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_oneway() const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_batchOneway() const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_datagram() const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_batchDatagram() const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_compress(bool __compress) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_timeout(int __timeout) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<PatcherFeedback> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<PatcherFeedback*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class Node : virtual public ::IceProxy::IceGrid::FileReader,
             virtual public ::IceProxy::IceGrid::ReplicaObserver
{
public:

    ::IceGrid::ServerPrx loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, ::IceGrid::AdapterPrxDict& adapters, ::Ice::Int& actTimeout, ::Ice::Int& deactTimeout)
    {
        return loadServer(svr, replicaName, adapters, actTimeout, deactTimeout, 0);
    }
    ::IceGrid::ServerPrx loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, ::IceGrid::AdapterPrxDict& adapters, ::Ice::Int& actTimeout, ::Ice::Int& deactTimeout, const ::Ice::Context& __ctx)
    {
        return loadServer(svr, replicaName, adapters, actTimeout, deactTimeout, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::IceInternal::Function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadServer(svr, replicaName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadServer(svr, replicaName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadServer(svr, replicaName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadServer(svr, replicaName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
                ::IceGrid::AdapterPrxDict adapters;
                ::Ice::Int actTimeout;
                ::Ice::Int deactTimeout;
                ::IceGrid::ServerPrx __ret;
                try
                {
                    __ret = __proxy->end_loadServer(adapters, actTimeout, deactTimeout, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, adapters, actTimeout, deactTimeout);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)> _response;
        };
        return begin_loadServer(svr, replicaName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName)
    {
        return begin_loadServer(svr, replicaName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx)
    {
        return begin_loadServer(svr, replicaName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServer(svr, replicaName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServer(svr, replicaName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::IceGrid::Callback_Node_loadServerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServer(svr, replicaName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_loadServerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServer(svr, replicaName, &__ctx, __del, __cookie);
    }

    ::IceGrid::ServerPrx end_loadServer(::IceGrid::AdapterPrxDict& adapters, ::Ice::Int& actTimeout, ::Ice::Int& deactTimeout, const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::ServerPrx loadServer(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadServer(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::ServerPrx loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, ::IceGrid::AdapterPrxDict& adapters, ::Ice::Int& actTimeout, ::Ice::Int& deactTimeout)
    {
        return loadServerWithoutRestart(svr, replicaName, adapters, actTimeout, deactTimeout, 0);
    }
    ::IceGrid::ServerPrx loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, ::IceGrid::AdapterPrxDict& adapters, ::Ice::Int& actTimeout, ::Ice::Int& deactTimeout, const ::Ice::Context& __ctx)
    {
        return loadServerWithoutRestart(svr, replicaName, adapters, actTimeout, deactTimeout, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::IceInternal::Function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadServerWithoutRestart(svr, replicaName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadServerWithoutRestart(svr, replicaName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_loadServerWithoutRestart(svr, replicaName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadServerWithoutRestart(svr, replicaName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
                ::IceGrid::AdapterPrxDict adapters;
                ::Ice::Int actTimeout;
                ::Ice::Int deactTimeout;
                ::IceGrid::ServerPrx __ret;
                try
                {
                    __ret = __proxy->end_loadServerWithoutRestart(adapters, actTimeout, deactTimeout, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, adapters, actTimeout, deactTimeout);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int)> _response;
        };
        return begin_loadServerWithoutRestart(svr, replicaName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName)
    {
        return begin_loadServerWithoutRestart(svr, replicaName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx)
    {
        return begin_loadServerWithoutRestart(svr, replicaName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServerWithoutRestart(svr, replicaName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServerWithoutRestart(svr, replicaName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::IceGrid::Callback_Node_loadServerWithoutRestartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServerWithoutRestart(svr, replicaName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr& svr, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_loadServerWithoutRestartPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServerWithoutRestart(svr, replicaName, &__ctx, __del, __cookie);
    }

    ::IceGrid::ServerPrx end_loadServerWithoutRestart(::IceGrid::AdapterPrxDict& adapters, ::Ice::Int& actTimeout, ::Ice::Int& deactTimeout, const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::ServerPrx loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName)
    {
        destroyServer(name, uuid, revision, replicaName, 0);
    }
    void destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::Context& __ctx)
    {
        destroyServer(name, uuid, revision, replicaName, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroyServer(name, uuid, revision, replicaName, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyServer(name, uuid, revision, replicaName, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_destroyServer(name, uuid, revision, replicaName, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroyServer(name, uuid, revision, replicaName, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_destroyServer(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_destroyServer(name, uuid, revision, replicaName, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName)
    {
        return begin_destroyServer(name, uuid, revision, replicaName, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::Context& __ctx)
    {
        return begin_destroyServer(name, uuid, revision, replicaName, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyServer(name, uuid, revision, replicaName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyServer(name, uuid, revision, replicaName, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::IceGrid::Callback_Node_destroyServerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyServer(name, uuid, revision, replicaName, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroyServer(const ::std::string& name, const ::std::string& uuid, ::Ice::Int revision, const ::std::string& replicaName, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_destroyServerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroyServer(name, uuid, revision, replicaName, &__ctx, __del, __cookie);
    }

    void end_destroyServer(const ::Ice::AsyncResultPtr&);
    
private:

    void destroyServer(const ::std::string&, const ::std::string&, ::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroyServer(const ::std::string&, const ::std::string&, ::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown)
    {
        patch(feedback, application, server, appDistrib, shutdown, 0);
    }
    void patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::Ice::Context& __ctx)
    {
        patch(feedback, application, server, appDistrib, shutdown, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown)
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::Ice::Context& __ctx)
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::IceGrid::Callback_Node_patchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_patch(const ::IceGrid::PatcherFeedbackPrx& feedback, const ::std::string& application, const ::std::string& server, const ::IceGrid::InternalDistributionDescriptorPtr& appDistrib, bool shutdown, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_patchPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_patch(feedback, application, server, appDistrib, shutdown, &__ctx, __del, __cookie);
    }

    void end_patch(const ::Ice::AsyncResultPtr&);
    
private:

    void patch(const ::IceGrid::PatcherFeedbackPrx&, const ::std::string&, const ::std::string&, const ::IceGrid::InternalDistributionDescriptorPtr&, bool, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_patch(const ::IceGrid::PatcherFeedbackPrx&, const ::std::string&, const ::std::string&, const ::IceGrid::InternalDistributionDescriptorPtr&, bool, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica)
    {
        registerWithReplica(replica, 0);
    }
    void registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx)
    {
        registerWithReplica(replica, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registerWithReplica(replica, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerWithReplica(replica, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registerWithReplica(replica, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerWithReplica(replica, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica)
    {
        return begin_registerWithReplica(replica, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx)
    {
        return begin_registerWithReplica(replica, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(replica, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(replica, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::IceGrid::Callback_Node_registerWithReplicaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(replica, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& replica, const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_registerWithReplicaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(replica, &__ctx, __del, __cookie);
    }

    void end_registerWithReplica(const ::Ice::AsyncResultPtr&);
    
private:

    void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getName()
    {
        return getName(0);
    }
    ::std::string getName(const ::Ice::Context& __ctx)
    {
        return getName(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getName(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getName(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getName(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getName(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getName(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getName()
    {
        return begin_getName(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx)
    {
        return begin_getName(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::IceGrid::Callback_Node_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_getNamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getName(&__ctx, __del, __cookie);
    }

    ::std::string end_getName(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getName(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getName(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string getHostname()
    {
        return getHostname(0);
    }
    ::std::string getHostname(const ::Ice::Context& __ctx)
    {
        return getHostname(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getHostname(const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHostname(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHostname(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHostname(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getHostname(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getHostname(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getHostname(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getHostname(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getHostname(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::std::string&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::std::string&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
                ::std::string __ret;
                try
                {
                    __ret = __proxy->end_getHostname(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::std::string&)> _response;
        };
        return begin_getHostname(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getHostname()
    {
        return begin_getHostname(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHostname(const ::Ice::Context& __ctx)
    {
        return begin_getHostname(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getHostname(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHostname(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHostname(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHostname(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHostname(const ::IceGrid::Callback_Node_getHostnamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHostname(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getHostname(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_getHostnamePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getHostname(&__ctx, __del, __cookie);
    }

    ::std::string end_getHostname(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string getHostname(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getHostname(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::LoadInfo getLoad()
    {
        return getLoad(0);
    }
    ::IceGrid::LoadInfo getLoad(const ::Ice::Context& __ctx)
    {
        return getLoad(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getLoad(const ::IceInternal::Function<void (const ::IceGrid::LoadInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLoad(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLoad(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLoad(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getLoad(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::LoadInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getLoad(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getLoad(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getLoad(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getLoad(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::LoadInfo&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::LoadInfo&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
                ::IceGrid::LoadInfo __ret;
                try
                {
                    __ret = __proxy->end_getLoad(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::LoadInfo&)> _response;
        };
        return begin_getLoad(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getLoad()
    {
        return begin_getLoad(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLoad(const ::Ice::Context& __ctx)
    {
        return begin_getLoad(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getLoad(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLoad(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLoad(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLoad(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLoad(const ::IceGrid::Callback_Node_getLoadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLoad(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getLoad(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_getLoadPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getLoad(&__ctx, __del, __cookie);
    }

    ::IceGrid::LoadInfo end_getLoad(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::LoadInfo getLoad(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getLoad(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getProcessorSocketCount()
    {
        return getProcessorSocketCount(0);
    }
    ::Ice::Int getProcessorSocketCount(const ::Ice::Context& __ctx)
    {
        return getProcessorSocketCount(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getProcessorSocketCount(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getProcessorSocketCount(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getProcessorSocketCount(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getProcessorSocketCount(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getProcessorSocketCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getProcessorSocketCount(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getProcessorSocketCount(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getProcessorSocketCount(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getProcessorSocketCount(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getProcessorSocketCount(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getProcessorSocketCount(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getProcessorSocketCount()
    {
        return begin_getProcessorSocketCount(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProcessorSocketCount(const ::Ice::Context& __ctx)
    {
        return begin_getProcessorSocketCount(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getProcessorSocketCount(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProcessorSocketCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProcessorSocketCount(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProcessorSocketCount(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProcessorSocketCount(const ::IceGrid::Callback_Node_getProcessorSocketCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProcessorSocketCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getProcessorSocketCount(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_getProcessorSocketCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getProcessorSocketCount(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getProcessorSocketCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getProcessorSocketCount(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getProcessorSocketCount(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::IceGrid::Callback_Node_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::IceGrid::Callback_Node_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Node> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_secure(bool __secure) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_twoway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_oneway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_batchOneway() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_datagram() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_batchDatagram() const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_compress(bool __compress) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_timeout(int __timeout) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<Node> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<Node*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class NodeSession : virtual public ::IceProxy::Ice::Object
{
public:

    void keepAlive(const ::IceGrid::LoadInfo& load)
    {
        keepAlive(load, 0);
    }
    void keepAlive(const ::IceGrid::LoadInfo& load, const ::Ice::Context& __ctx)
    {
        keepAlive(load, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_keepAlive(load, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepAlive(load, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_keepAlive(load, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepAlive(load, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::LoadInfo& load)
    {
        return begin_keepAlive(load, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::Ice::Context& __ctx)
    {
        return begin_keepAlive(load, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(load, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(load, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::IceGrid::Callback_NodeSession_keepAlivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(load, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::LoadInfo& load, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_keepAlivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(load, &__ctx, __del, __cookie);
    }

    void end_keepAlive(const ::Ice::AsyncResultPtr&);
    
private:

    void keepAlive(const ::IceGrid::LoadInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::LoadInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer)
    {
        setReplicaObserver(observer, 0);
    }
    void setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::Ice::Context& __ctx)
    {
        setReplicaObserver(observer, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReplicaObserver(observer, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReplicaObserver(observer, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setReplicaObserver(observer, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setReplicaObserver(observer, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer)
    {
        return begin_setReplicaObserver(observer, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::Ice::Context& __ctx)
    {
        return begin_setReplicaObserver(observer, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplicaObserver(observer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplicaObserver(observer, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::IceGrid::Callback_NodeSession_setReplicaObserverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplicaObserver(observer, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx& observer, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_setReplicaObserverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setReplicaObserver(observer, &__ctx, __del, __cookie);
    }

    void end_setReplicaObserver(const ::Ice::AsyncResultPtr&);
    
private:

    void setReplicaObserver(const ::IceGrid::ReplicaObserverPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setReplicaObserver(const ::IceGrid::ReplicaObserverPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getTimeout()
    {
        return getTimeout(0);
    }
    ::Ice::Int getTimeout(const ::Ice::Context& __ctx)
    {
        return getTimeout(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTimeout(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTimeout(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTimeout(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTimeout(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTimeout(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getTimeout(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getTimeout(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTimeout()
    {
        return begin_getTimeout(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context& __ctx)
    {
        return begin_getTimeout(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::IceGrid::Callback_NodeSession_getTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_getTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getTimeout(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getTimeout(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::NodeObserverPrx getObserver()
    {
        return getObserver(0);
    }
    ::IceGrid::NodeObserverPrx getObserver(const ::Ice::Context& __ctx)
    {
        return getObserver(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getObserver(const ::IceInternal::Function<void (const ::IceGrid::NodeObserverPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObserver(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObserver(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObserver(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getObserver(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::NodeObserverPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObserver(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObserver(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObserver(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getObserver(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::NodeObserverPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::NodeObserverPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
                ::IceGrid::NodeObserverPrx __ret;
                try
                {
                    __ret = __proxy->end_getObserver(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::NodeObserverPrx&)> _response;
        };
        return begin_getObserver(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getObserver()
    {
        return begin_getObserver(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObserver(const ::Ice::Context& __ctx)
    {
        return begin_getObserver(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObserver(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObserver(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObserver(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObserver(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObserver(const ::IceGrid::Callback_NodeSession_getObserverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObserver(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObserver(const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_getObserverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObserver(&__ctx, __del, __cookie);
    }

    ::IceGrid::NodeObserverPrx end_getObserver(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::NodeObserverPrx getObserver(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getObserver(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void loadServers()
    {
        loadServers(0);
    }
    void loadServers(const ::Ice::Context& __ctx)
    {
        loadServers(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_loadServers(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_loadServers(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_loadServers(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadServers(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadServers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_loadServers(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_loadServers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_loadServers(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_loadServers()
    {
        return begin_loadServers(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadServers(const ::Ice::Context& __ctx)
    {
        return begin_loadServers(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_loadServers(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServers(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServers(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServers(const ::IceGrid::Callback_NodeSession_loadServersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_loadServers(const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_loadServersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_loadServers(&__ctx, __del, __cookie);
    }

    void end_loadServers(const ::Ice::AsyncResultPtr&);
    
private:

    void loadServers(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_loadServers(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::StringSeq getServers()
    {
        return getServers(0);
    }
    ::Ice::StringSeq getServers(const ::Ice::Context& __ctx)
    {
        return getServers(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getServers(const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getServers(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getServers(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getServers(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getServers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getServers(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getServers(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getServers(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getServers(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::Ice::StringSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::Ice::StringSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
                ::Ice::StringSeq __ret;
                try
                {
                    __ret = __proxy->end_getServers(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::Ice::StringSeq&)> _response;
        };
        return begin_getServers(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getServers()
    {
        return begin_getServers(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getServers(const ::Ice::Context& __ctx)
    {
        return begin_getServers(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getServers(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getServers(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServers(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getServers(const ::IceGrid::Callback_NodeSession_getServersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServers(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getServers(const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_getServersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getServers(&__ctx, __del, __cookie);
    }

    ::Ice::StringSeq end_getServers(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::StringSeq getServers(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getServers(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision)
    {
        waitForApplicationUpdate(application, revision, 0);
    }
    void waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::Ice::Context& __ctx)
    {
        waitForApplicationUpdate(application, revision, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_waitForApplicationUpdate(application, revision, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_waitForApplicationUpdate(application, revision, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_waitForApplicationUpdate(application, revision, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_waitForApplicationUpdate(application, revision, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision)
    {
        return begin_waitForApplicationUpdate(application, revision, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::Ice::Context& __ctx)
    {
        return begin_waitForApplicationUpdate(application, revision, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitForApplicationUpdate(application, revision, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitForApplicationUpdate(application, revision, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::IceGrid::Callback_NodeSession_waitForApplicationUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitForApplicationUpdate(application, revision, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_waitForApplicationUpdate(const ::std::string& application, ::Ice::Int revision, const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_waitForApplicationUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_waitForApplicationUpdate(application, revision, &__ctx, __del, __cookie);
    }

    void end_waitForApplicationUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void waitForApplicationUpdate(const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_waitForApplicationUpdate(const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::IceGrid::Callback_NodeSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::IceGrid::Callback_NodeSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<NodeSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_twoway() const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_oneway() const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_batchOneway() const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_datagram() const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_batchDatagram() const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<NodeSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<NodeSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class DatabaseObserver : virtual public ::IceProxy::IceGrid::ApplicationObserver,
                         virtual public ::IceProxy::IceGrid::ObjectObserver,
                         virtual public ::IceProxy::IceGrid::AdapterObserver
{
public:
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_secure(bool __secure) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_twoway() const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_oneway() const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_batchOneway() const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_datagram() const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_batchDatagram() const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_compress(bool __compress) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_timeout(int __timeout) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<DatabaseObserver> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<DatabaseObserver*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class ReplicaSession : virtual public ::IceProxy::Ice::Object
{
public:

    void keepAlive()
    {
        keepAlive(0);
    }
    void keepAlive(const ::Ice::Context& __ctx)
    {
        keepAlive(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_keepAlive(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepAlive(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_keepAlive(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_keepAlive(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_keepAlive(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_keepAlive()
    {
        return begin_keepAlive(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::Ice::Context& __ctx)
    {
        return begin_keepAlive(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::IceGrid::Callback_ReplicaSession_keepAlivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_keepAlive(const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_keepAlivePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_keepAlive(&__ctx, __del, __cookie);
    }

    void end_keepAlive(const ::Ice::AsyncResultPtr&);
    
private:

    void keepAlive(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_keepAlive(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int getTimeout()
    {
        return getTimeout(0);
    }
    ::Ice::Int getTimeout(const ::Ice::Context& __ctx)
    {
        return getTimeout(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTimeout(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTimeout(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getTimeout(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getTimeout(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getTimeout(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getTimeout(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (::Ice::Int)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (::Ice::Int)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
                ::Ice::Int __ret;
                try
                {
                    __ret = __proxy->end_getTimeout(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (::Ice::Int)> _response;
        };
        return begin_getTimeout(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getTimeout()
    {
        return begin_getTimeout(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context& __ctx)
    {
        return begin_getTimeout(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::IceGrid::Callback_ReplicaSession_getTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_getTimeoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getTimeout(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_getTimeout(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int getTimeout(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getTimeout(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials)
    {
        setDatabaseObserver(dbObs, serials, 0);
    }
    void setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::Context& __ctx)
    {
        setDatabaseObserver(dbObs, serials, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDatabaseObserver(dbObs, serials, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDatabaseObserver(dbObs, serials, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setDatabaseObserver(dbObs, serials, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setDatabaseObserver(dbObs, serials, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setDatabaseObserver(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setDatabaseObserver(dbObs, serials, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials)
    {
        return begin_setDatabaseObserver(dbObs, serials, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::Context& __ctx)
    {
        return begin_setDatabaseObserver(dbObs, serials, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDatabaseObserver(dbObs, serials, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDatabaseObserver(dbObs, serials, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::IceGrid::Callback_ReplicaSession_setDatabaseObserverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDatabaseObserver(dbObs, serials, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx& dbObs, const IceUtil::Optional< ::IceGrid::StringLongDict>& serials, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_setDatabaseObserverPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setDatabaseObserver(dbObs, serials, &__ctx, __del, __cookie);
    }

    void end_setDatabaseObserver(const ::Ice::AsyncResultPtr&);
    
private:

    void setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx&, const IceUtil::Optional< ::IceGrid::StringLongDict>&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx&, const IceUtil::Optional< ::IceGrid::StringLongDict>&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints)
    {
        setEndpoints(endpoints, 0);
    }
    void setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::Ice::Context& __ctx)
    {
        setEndpoints(endpoints, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEndpoints(endpoints, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEndpoints(endpoints, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_setEndpoints(endpoints, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setEndpoints(endpoints, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints)
    {
        return begin_setEndpoints(endpoints, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::Ice::Context& __ctx)
    {
        return begin_setEndpoints(endpoints, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndpoints(endpoints, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndpoints(endpoints, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::IceGrid::Callback_ReplicaSession_setEndpointsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndpoints(endpoints, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setEndpoints(const ::IceGrid::StringObjectProxyDict& endpoints, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_setEndpointsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setEndpoints(endpoints, &__ctx, __del, __cookie);
    }

    void end_setEndpoints(const ::Ice::AsyncResultPtr&);
    
private:

    void setEndpoints(const ::IceGrid::StringObjectProxyDict&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setEndpoints(const ::IceGrid::StringObjectProxyDict&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects)
    {
        registerWellKnownObjects(objects, 0);
    }
    void registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx)
    {
        registerWellKnownObjects(objects, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registerWellKnownObjects(objects, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerWellKnownObjects(objects, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registerWellKnownObjects(objects, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerWellKnownObjects(objects, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects)
    {
        return begin_registerWellKnownObjects(objects, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx)
    {
        return begin_registerWellKnownObjects(objects, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWellKnownObjects(objects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWellKnownObjects(objects, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::IceGrid::Callback_ReplicaSession_registerWellKnownObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWellKnownObjects(objects, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq& objects, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_registerWellKnownObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWellKnownObjects(objects, &__ctx, __del, __cookie);
    }

    void end_registerWellKnownObjects(const ::Ice::AsyncResultPtr&);
    
private:

    void registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy)
    {
        setAdapterDirectProxy(adapterId, replicaGroupId, proxy, 0);
    }
    void setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx)
    {
        setAdapterDirectProxy(adapterId, replicaGroupId, proxy, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::Context* __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void ()>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
                try
                {
                    __proxy->end_setAdapterDirectProxy(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response();
                }
            }
        
        private:
            
            ::std::function<void ()> _response;
        };
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy)
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx)
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::IceGrid::Callback_ReplicaSession_setAdapterDirectProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_setAdapterDirectProxy(const ::std::string& adapterId, const ::std::string& replicaGroupId, const ::Ice::ObjectPrx& proxy, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_setAdapterDirectProxyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_setAdapterDirectProxy(adapterId, replicaGroupId, proxy, &__ctx, __del, __cookie);
    }

    void end_setAdapterDirectProxy(const ::Ice::AsyncResultPtr&);
    
private:

    void setAdapterDirectProxy(const ::std::string&, const ::std::string&, const ::Ice::ObjectPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_setAdapterDirectProxy(const ::std::string&, const ::std::string&, const ::Ice::ObjectPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure)
    {
        receivedUpdate(name, serial, failure, 0);
    }
    void receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::Ice::Context& __ctx)
    {
        receivedUpdate(name, serial, failure, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receivedUpdate(name, serial, failure, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receivedUpdate(name, serial, failure, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_receivedUpdate(name, serial, failure, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_receivedUpdate(name, serial, failure, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure)
    {
        return begin_receivedUpdate(name, serial, failure, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::Ice::Context& __ctx)
    {
        return begin_receivedUpdate(name, serial, failure, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receivedUpdate(name, serial, failure, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receivedUpdate(name, serial, failure, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::IceGrid::Callback_ReplicaSession_receivedUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receivedUpdate(name, serial, failure, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_receivedUpdate(::IceGrid::TopicName name, ::Ice::Int serial, const ::std::string& failure, const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_receivedUpdatePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_receivedUpdate(name, serial, failure, &__ctx, __del, __cookie);
    }

    void end_receivedUpdate(const ::Ice::AsyncResultPtr&);
    
private:

    void receivedUpdate(::IceGrid::TopicName, ::Ice::Int, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_receivedUpdate(::IceGrid::TopicName, ::Ice::Int, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void destroy()
    {
        destroy(0);
    }
    void destroy(const ::Ice::Context& __ctx)
    {
        destroy(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_destroy(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_destroy(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_destroy(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_destroy()
    {
        return begin_destroy(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx)
    {
        return begin_destroy(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::IceGrid::Callback_ReplicaSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context& __ctx, const ::IceGrid::Callback_ReplicaSession_destroyPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_destroy(&__ctx, __del, __cookie);
    }

    void end_destroy(const ::Ice::AsyncResultPtr&);
    
private:

    void destroy(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_destroy(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_secure(bool __secure) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_twoway() const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_oneway() const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_batchOneway() const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_datagram() const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_batchDatagram() const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_compress(bool __compress) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_timeout(int __timeout) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<ReplicaSession> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<ReplicaSession*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class InternalNodeInfo : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_secure(bool __secure) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_twoway() const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_oneway() const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_batchOneway() const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_datagram() const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_batchDatagram() const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_compress(bool __compress) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalNodeInfo> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InternalNodeInfo*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class InternalReplicaInfo : virtual public ::IceProxy::Ice::Object
{
public:
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_secure(bool __secure) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_twoway() const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_oneway() const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_batchOneway() const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_datagram() const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_batchDatagram() const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_compress(bool __compress) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalReplicaInfo> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InternalReplicaInfo*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class InternalRegistry : virtual public ::IceProxy::IceGrid::FileReader
{
public:

    ::IceGrid::NodeSessionPrx registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf)
    {
        return registerNode(info, prx, loadInf, 0);
    }
    ::IceGrid::NodeSessionPrx registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::Context& __ctx)
    {
        return registerNode(info, prx, loadInf, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::IceInternal::Function<void (const ::IceGrid::NodeSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerNode(info, prx, loadInf, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerNode(info, prx, loadInf, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::NodeSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerNode(info, prx, loadInf, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerNode(info, prx, loadInf, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::NodeSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::NodeSessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
                ::IceGrid::NodeSessionPrx __ret;
                try
                {
                    __ret = __proxy->end_registerNode(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::NodeSessionPrx&)> _response;
        };
        return begin_registerNode(info, prx, loadInf, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf)
    {
        return begin_registerNode(info, prx, loadInf, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::Context& __ctx)
    {
        return begin_registerNode(info, prx, loadInf, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerNode(info, prx, loadInf, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerNode(info, prx, loadInf, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::IceGrid::Callback_InternalRegistry_registerNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerNode(info, prx, loadInf, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerNode(const ::IceGrid::InternalNodeInfoPtr& info, const ::IceGrid::NodePrx& prx, const ::IceGrid::LoadInfo& loadInf, const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_registerNodePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerNode(info, prx, loadInf, &__ctx, __del, __cookie);
    }

    ::IceGrid::NodeSessionPrx end_registerNode(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::NodeSessionPrx registerNode(const ::IceGrid::InternalNodeInfoPtr&, const ::IceGrid::NodePrx&, const ::IceGrid::LoadInfo&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerNode(const ::IceGrid::InternalNodeInfoPtr&, const ::IceGrid::NodePrx&, const ::IceGrid::LoadInfo&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::ReplicaSessionPrx registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx)
    {
        return registerReplica(info, prx, 0);
    }
    ::IceGrid::ReplicaSessionPrx registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx)
    {
        return registerReplica(info, prx, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::IceInternal::Function<void (const ::IceGrid::ReplicaSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerReplica(info, prx, 0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerReplica(info, prx, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::ReplicaSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_registerReplica(info, prx, &__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerReplica(info, prx, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::ReplicaSessionPrx&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::ReplicaSessionPrx&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
                ::IceGrid::ReplicaSessionPrx __ret;
                try
                {
                    __ret = __proxy->end_registerReplica(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::ReplicaSessionPrx&)> _response;
        };
        return begin_registerReplica(info, prx, __ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx)
    {
        return begin_registerReplica(info, prx, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx)
    {
        return begin_registerReplica(info, prx, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerReplica(info, prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerReplica(info, prx, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::IceGrid::Callback_InternalRegistry_registerReplicaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerReplica(info, prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr& info, const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_registerReplicaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerReplica(info, prx, &__ctx, __del, __cookie);
    }

    ::IceGrid::ReplicaSessionPrx end_registerReplica(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::ReplicaSessionPrx registerReplica(const ::IceGrid::InternalReplicaInfoPtr&, const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerReplica(const ::IceGrid::InternalReplicaInfoPtr&, const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx)
    {
        registerWithReplica(prx, 0);
    }
    void registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx)
    {
        registerWithReplica(prx, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registerWithReplica(prx, 0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerWithReplica(prx, 0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_registerWithReplica(prx, &__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_registerWithReplica(prx, &__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx)
    {
        return begin_registerWithReplica(prx, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx)
    {
        return begin_registerWithReplica(prx, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(prx, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::IceGrid::Callback_InternalRegistry_registerWithReplicaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(prx, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx& prx, const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_registerWithReplicaPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_registerWithReplica(prx, &__ctx, __del, __cookie);
    }

    void end_registerWithReplica(const ::Ice::AsyncResultPtr&);
    
private:

    void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::NodePrxSeq getNodes()
    {
        return getNodes(0);
    }
    ::IceGrid::NodePrxSeq getNodes(const ::Ice::Context& __ctx)
    {
        return getNodes(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getNodes(const ::IceInternal::Function<void (const ::IceGrid::NodePrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNodes(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNodes(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNodes(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getNodes(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::NodePrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getNodes(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getNodes(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getNodes(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getNodes(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::NodePrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::NodePrxSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
                ::IceGrid::NodePrxSeq __ret;
                try
                {
                    __ret = __proxy->end_getNodes(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::NodePrxSeq&)> _response;
        };
        return begin_getNodes(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getNodes()
    {
        return begin_getNodes(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNodes(const ::Ice::Context& __ctx)
    {
        return begin_getNodes(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getNodes(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNodes(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNodes(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNodes(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNodes(const ::IceGrid::Callback_InternalRegistry_getNodesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNodes(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getNodes(const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_getNodesPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getNodes(&__ctx, __del, __cookie);
    }

    ::IceGrid::NodePrxSeq end_getNodes(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::NodePrxSeq getNodes(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getNodes(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::InternalRegistryPrxSeq getReplicas()
    {
        return getReplicas(0);
    }
    ::IceGrid::InternalRegistryPrxSeq getReplicas(const ::Ice::Context& __ctx)
    {
        return getReplicas(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getReplicas(const ::IceInternal::Function<void (const ::IceGrid::InternalRegistryPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getReplicas(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getReplicas(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getReplicas(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getReplicas(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::InternalRegistryPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getReplicas(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getReplicas(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getReplicas(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getReplicas(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::InternalRegistryPrxSeq&)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::InternalRegistryPrxSeq&)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
                ::IceGrid::InternalRegistryPrxSeq __ret;
                try
                {
                    __ret = __proxy->end_getReplicas(__result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::InternalRegistryPrxSeq&)> _response;
        };
        return begin_getReplicas(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getReplicas()
    {
        return begin_getReplicas(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReplicas(const ::Ice::Context& __ctx)
    {
        return begin_getReplicas(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getReplicas(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicas(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReplicas(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicas(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReplicas(const ::IceGrid::Callback_InternalRegistry_getReplicasPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicas(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getReplicas(const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_getReplicasPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getReplicas(&__ctx, __del, __cookie);
    }

    ::IceGrid::InternalRegistryPrxSeq end_getReplicas(const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::InternalRegistryPrxSeq getReplicas(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getReplicas(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::ApplicationInfoSeq getApplications(::Ice::Long& serial)
    {
        return getApplications(serial, 0);
    }
    ::IceGrid::ApplicationInfoSeq getApplications(::Ice::Long& serial, const ::Ice::Context& __ctx)
    {
        return getApplications(serial, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getApplications(const ::IceInternal::Function<void (const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getApplications(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getApplications(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getApplications(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getApplications(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getApplications(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getApplications(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getApplications(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getApplications(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long serial;
                ::IceGrid::ApplicationInfoSeq __ret;
                try
                {
                    __ret = __proxy->end_getApplications(serial, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, serial);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long)> _response;
        };
        return begin_getApplications(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getApplications()
    {
        return begin_getApplications(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getApplications(const ::Ice::Context& __ctx)
    {
        return begin_getApplications(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getApplications(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getApplications(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getApplications(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getApplications(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getApplications(const ::IceGrid::Callback_InternalRegistry_getApplicationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getApplications(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getApplications(const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_getApplicationsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getApplications(&__ctx, __del, __cookie);
    }

    ::IceGrid::ApplicationInfoSeq end_getApplications(::Ice::Long& serial, const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::ApplicationInfoSeq getApplications(::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getApplications(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::AdapterInfoSeq getAdapters(::Ice::Long& serial)
    {
        return getAdapters(serial, 0);
    }
    ::IceGrid::AdapterInfoSeq getAdapters(::Ice::Long& serial, const ::Ice::Context& __ctx)
    {
        return getAdapters(serial, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getAdapters(const ::IceInternal::Function<void (const ::IceGrid::AdapterInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAdapters(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAdapters(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAdapters(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getAdapters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::AdapterInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getAdapters(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getAdapters(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getAdapters(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getAdapters(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::AdapterInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::AdapterInfoSeq&, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long serial;
                ::IceGrid::AdapterInfoSeq __ret;
                try
                {
                    __ret = __proxy->end_getAdapters(serial, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, serial);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::AdapterInfoSeq&, ::Ice::Long)> _response;
        };
        return begin_getAdapters(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getAdapters()
    {
        return begin_getAdapters(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAdapters(const ::Ice::Context& __ctx)
    {
        return begin_getAdapters(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getAdapters(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdapters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdapters(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdapters(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdapters(const ::IceGrid::Callback_InternalRegistry_getAdaptersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdapters(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getAdapters(const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_getAdaptersPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getAdapters(&__ctx, __del, __cookie);
    }

    ::IceGrid::AdapterInfoSeq end_getAdapters(::Ice::Long& serial, const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::AdapterInfoSeq getAdapters(::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getAdapters(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::IceGrid::ObjectInfoSeq getObjects(::Ice::Long& serial)
    {
        return getObjects(serial, 0);
    }
    ::IceGrid::ObjectInfoSeq getObjects(::Ice::Long& serial, const ::Ice::Context& __ctx)
    {
        return getObjects(serial, &__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_getObjects(const ::IceInternal::Function<void (const ::IceGrid::ObjectInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObjects(0, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObjects(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObjects(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_getObjects(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::IceGrid::ObjectInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return __begin_getObjects(&__ctx, __response, __exception, __sent);
    }
    ::Ice::AsyncResultPtr
    begin_getObjects(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_getObjects(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
    
private:

    ::Ice::AsyncResultPtr __begin_getObjects(const ::Ice::Context* __ctx, const ::IceInternal::Function<void (const ::IceGrid::ObjectInfoSeq&, ::Ice::Long)>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception, const ::IceInternal::Function<void (bool)>& __sent)
    {
        class Cpp11CB : public ::IceInternal::Cpp11FnCallbackNC
        {
        public:

            Cpp11CB(const ::std::function<void (const ::IceGrid::ObjectInfoSeq&, ::Ice::Long)>& responseFunc, const ::std::function<void (const ::Ice::Exception&)>& exceptionFunc, const ::std::function<void (bool)>& sentFunc) :
                ::IceInternal::Cpp11FnCallbackNC(exceptionFunc, sentFunc),
                _response(responseFunc)
            {
                CallbackBase::checkCallback(true, responseFunc || exceptionFunc != nullptr);
            }

            virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
            {
                ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
                ::Ice::Long serial;
                ::IceGrid::ObjectInfoSeq __ret;
                try
                {
                    __ret = __proxy->end_getObjects(serial, __result);
                }
                catch(::Ice::Exception& ex)
                {
                    Cpp11FnCallbackNC::__exception(__result, ex);
                    return;
                }
                if(_response != nullptr)
                {
                    _response(__ret, serial);
                }
            }
        
        private:
            
            ::std::function<void (const ::IceGrid::ObjectInfoSeq&, ::Ice::Long)> _response;
        };
        return begin_getObjects(__ctx, new Cpp11CB(__response, __exception, __sent));
    }
    
public:
#endif

    ::Ice::AsyncResultPtr begin_getObjects()
    {
        return begin_getObjects(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObjects(const ::Ice::Context& __ctx)
    {
        return begin_getObjects(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_getObjects(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjects(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjects(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjects(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjects(const ::IceGrid::Callback_InternalRegistry_getObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjects(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_getObjects(const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_getObjectsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_getObjects(&__ctx, __del, __cookie);
    }

    ::IceGrid::ObjectInfoSeq end_getObjects(::Ice::Long& serial, const ::Ice::AsyncResultPtr&);
    
private:

    ::IceGrid::ObjectInfoSeq getObjects(::Ice::Long&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_getObjects(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void shutdown()
    {
        shutdown(0);
    }
    void shutdown(const ::Ice::Context& __ctx)
    {
        shutdown(&__ctx);
    }
#ifdef ICE_CPP11
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(0, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent));
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(0, ::Ice::newCallback(__completed, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void ()>& __response, const ::IceInternal::Function<void (const ::Ice::Exception&)>& __exception = ::IceInternal::Function<void (const ::Ice::Exception&)>(), const ::IceInternal::Function<void (bool)>& __sent = ::IceInternal::Function<void (bool)>())
    {
        return begin_shutdown(&__ctx, new ::IceInternal::Cpp11FnOnewayCallbackNC(__response, __exception, __sent), 0);
    }
    ::Ice::AsyncResultPtr
    begin_shutdown(const ::Ice::Context& __ctx, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __completed, const ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>& __sent = ::IceInternal::Function<void (const ::Ice::AsyncResultPtr&)>())
    {
        return begin_shutdown(&__ctx, ::Ice::newCallback(__completed, __sent));
    }
#endif

    ::Ice::AsyncResultPtr begin_shutdown()
    {
        return begin_shutdown(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx)
    {
        return begin_shutdown(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::IceGrid::Callback_InternalRegistry_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context& __ctx, const ::IceGrid::Callback_InternalRegistry_shutdownPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_shutdown(&__ctx, __del, __cookie);
    }

    void end_shutdown(const ::Ice::AsyncResultPtr&);
    
private:

    void shutdown(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_shutdown(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_context(const ::Ice::Context& __context) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_context(__context).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_adapterId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_locatorCacheTimeout(int __timeout) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_connectionCached(bool __cached) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_secure(bool __secure) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_preferSecure(bool __preferSecure) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_router(const ::Ice::RouterPrx& __router) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_router(__router).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_collocationOptimized(bool __co) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_twoway() const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_twoway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_oneway() const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_oneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_batchOneway() const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_datagram() const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_datagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_batchDatagram() const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_compress(bool __compress) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_timeout(int __timeout) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_connectionId(const ::std::string& __id) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    }
    
    ::IceInternal::ProxyHandle<InternalRegistry> ice_encodingVersion(const ::Ice::EncodingVersion& __v) const
    {
        return dynamic_cast<InternalRegistry*>(::IceProxy::Ice::Object::ice_encodingVersion(__v).get());
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace IceGrid
{

class InternalDbEnvDescriptor : virtual public ::IceDelegate::Ice::Object
{
public:
};

class InternalAdapterDescriptor : virtual public ::IceDelegate::Ice::Object
{
public:
};

class InternalDistributionDescriptor : virtual public ::IceDelegate::Ice::Object
{
public:
};

class InternalServerDescriptor : virtual public ::IceDelegate::Ice::Object
{
public:
};

class Adapter : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::ObjectPrx activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::ObjectPrx getDirectProxy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDirectProxy(const ::Ice::ObjectPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class FileReader : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Long getOffsetFromEnd(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool read(const ::std::string&, ::Ice::Long, ::Ice::Int, ::Ice::Long&, ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Server : virtual public ::IceDelegate::IceGrid::FileReader
{
public:

    virtual void start(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void stop(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool checkUpdate(const ::IceGrid::InternalServerDescriptorPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEnabled(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual bool isEnabled(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void sendSignal(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void writeMessage(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::ServerState getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getPid(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setProcess(const ::Ice::ProcessPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class ReplicaObserver : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void replicaInit(const ::IceGrid::InternalRegistryPrxSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void replicaAdded(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void replicaRemoved(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class PatcherFeedback : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void finished(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void failed(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class Node : virtual public ::IceDelegate::IceGrid::FileReader,
             virtual public ::IceDelegate::IceGrid::ReplicaObserver
{
public:

    virtual ::IceGrid::ServerPrx loadServer(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::ServerPrx loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroyServer(const ::std::string&, const ::std::string&, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void patch(const ::IceGrid::PatcherFeedbackPrx&, const ::std::string&, const ::std::string&, const ::IceGrid::InternalDistributionDescriptorPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::std::string getHostname(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::LoadInfo getLoad(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getProcessorSocketCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class NodeSession : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void keepAlive(const ::IceGrid::LoadInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setReplicaObserver(const ::IceGrid::ReplicaObserverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::NodeObserverPrx getObserver(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void loadServers(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::StringSeq getServers(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void waitForApplicationUpdate(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class DatabaseObserver : virtual public ::IceDelegate::IceGrid::ApplicationObserver,
                         virtual public ::IceDelegate::IceGrid::ObjectObserver,
                         virtual public ::IceDelegate::IceGrid::AdapterObserver
{
public:
};

class ReplicaSession : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void keepAlive(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::Ice::Int getTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx&, const IceUtil::Optional< ::IceGrid::StringLongDict>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setEndpoints(const ::IceGrid::StringObjectProxyDict&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void setAdapterDirectProxy(const ::std::string&, const ::std::string&, const ::Ice::ObjectPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void receivedUpdate(::IceGrid::TopicName, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

class InternalNodeInfo : virtual public ::IceDelegate::Ice::Object
{
public:
};

class InternalReplicaInfo : virtual public ::IceDelegate::Ice::Object
{
public:
};

class InternalRegistry : virtual public ::IceDelegate::IceGrid::FileReader
{
public:

    virtual ::IceGrid::NodeSessionPrx registerNode(const ::IceGrid::InternalNodeInfoPtr&, const ::IceGrid::NodePrx&, const ::IceGrid::LoadInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::ReplicaSessionPrx registerReplica(const ::IceGrid::InternalReplicaInfoPtr&, const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::NodePrxSeq getNodes(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::InternalRegistryPrxSeq getReplicas(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::ApplicationInfoSeq getApplications(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::AdapterInfoSeq getAdapters(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual ::IceGrid::ObjectInfoSeq getObjects(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&) = 0;
};

}

}

namespace IceDelegateM
{

namespace IceGrid
{

class InternalDbEnvDescriptor : virtual public ::IceDelegate::IceGrid::InternalDbEnvDescriptor,
                                virtual public ::IceDelegateM::Ice::Object
{
public:
};

class InternalAdapterDescriptor : virtual public ::IceDelegate::IceGrid::InternalAdapterDescriptor,
                                  virtual public ::IceDelegateM::Ice::Object
{
public:
};

class InternalDistributionDescriptor : virtual public ::IceDelegate::IceGrid::InternalDistributionDescriptor,
                                       virtual public ::IceDelegateM::Ice::Object
{
public:
};

class InternalServerDescriptor : virtual public ::IceDelegate::IceGrid::InternalServerDescriptor,
                                 virtual public ::IceDelegateM::Ice::Object
{
public:
};

class Adapter : virtual public ::IceDelegate::IceGrid::Adapter,
                virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::ObjectPrx activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ObjectPrx getDirectProxy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDirectProxy(const ::Ice::ObjectPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FileReader : virtual public ::IceDelegate::IceGrid::FileReader,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Long getOffsetFromEnd(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool read(const ::std::string&, ::Ice::Long, ::Ice::Int, ::Ice::Long&, ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Server : virtual public ::IceDelegate::IceGrid::Server,
               virtual public ::IceDelegateM::IceGrid::FileReader
{
public:

    virtual void start(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stop(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkUpdate(const ::IceGrid::InternalServerDescriptorPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEnabled(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isEnabled(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendSignal(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void writeMessage(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ServerState getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getPid(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setProcess(const ::Ice::ProcessPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ReplicaObserver : virtual public ::IceDelegate::IceGrid::ReplicaObserver,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void replicaInit(const ::IceGrid::InternalRegistryPrxSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void replicaAdded(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void replicaRemoved(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PatcherFeedback : virtual public ::IceDelegate::IceGrid::PatcherFeedback,
                        virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void finished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void failed(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Node : virtual public ::IceDelegate::IceGrid::Node,
             virtual public ::IceDelegateM::IceGrid::FileReader,
             virtual public ::IceDelegateM::IceGrid::ReplicaObserver
{
public:

    virtual ::IceGrid::ServerPrx loadServer(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ServerPrx loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyServer(const ::std::string&, const ::std::string&, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void patch(const ::IceGrid::PatcherFeedbackPrx&, const ::std::string&, const ::std::string&, const ::IceGrid::InternalDistributionDescriptorPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getHostname(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::LoadInfo getLoad(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getProcessorSocketCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class NodeSession : virtual public ::IceDelegate::IceGrid::NodeSession,
                    virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void keepAlive(const ::IceGrid::LoadInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setReplicaObserver(const ::IceGrid::ReplicaObserverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::NodeObserverPrx getObserver(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void loadServers(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::StringSeq getServers(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void waitForApplicationUpdate(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DatabaseObserver : virtual public ::IceDelegate::IceGrid::DatabaseObserver,
                         virtual public ::IceDelegateM::IceGrid::ApplicationObserver,
                         virtual public ::IceDelegateM::IceGrid::ObjectObserver,
                         virtual public ::IceDelegateM::IceGrid::AdapterObserver
{
public:
};

class ReplicaSession : virtual public ::IceDelegate::IceGrid::ReplicaSession,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void keepAlive(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx&, const IceUtil::Optional< ::IceGrid::StringLongDict>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEndpoints(const ::IceGrid::StringObjectProxyDict&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAdapterDirectProxy(const ::std::string&, const ::std::string&, const ::Ice::ObjectPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void receivedUpdate(::IceGrid::TopicName, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class InternalNodeInfo : virtual public ::IceDelegate::IceGrid::InternalNodeInfo,
                         virtual public ::IceDelegateM::Ice::Object
{
public:
};

class InternalReplicaInfo : virtual public ::IceDelegate::IceGrid::InternalReplicaInfo,
                            virtual public ::IceDelegateM::Ice::Object
{
public:
};

class InternalRegistry : virtual public ::IceDelegate::IceGrid::InternalRegistry,
                         virtual public ::IceDelegateM::IceGrid::FileReader
{
public:

    virtual ::IceGrid::NodeSessionPrx registerNode(const ::IceGrid::InternalNodeInfoPtr&, const ::IceGrid::NodePrx&, const ::IceGrid::LoadInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ReplicaSessionPrx registerReplica(const ::IceGrid::InternalReplicaInfoPtr&, const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::NodePrxSeq getNodes(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::InternalRegistryPrxSeq getReplicas(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ApplicationInfoSeq getApplications(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::AdapterInfoSeq getAdapters(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ObjectInfoSeq getObjects(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceDelegateD
{

namespace IceGrid
{

class InternalDbEnvDescriptor : virtual public ::IceDelegate::IceGrid::InternalDbEnvDescriptor,
                                virtual public ::IceDelegateD::Ice::Object
{
public:
};

class InternalAdapterDescriptor : virtual public ::IceDelegate::IceGrid::InternalAdapterDescriptor,
                                  virtual public ::IceDelegateD::Ice::Object
{
public:
};

class InternalDistributionDescriptor : virtual public ::IceDelegate::IceGrid::InternalDistributionDescriptor,
                                       virtual public ::IceDelegateD::Ice::Object
{
public:
};

class InternalServerDescriptor : virtual public ::IceDelegate::IceGrid::InternalServerDescriptor,
                                 virtual public ::IceDelegateD::Ice::Object
{
public:
};

class Adapter : virtual public ::IceDelegate::IceGrid::Adapter,
                virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::ObjectPrx activate(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::ObjectPrx getDirectProxy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDirectProxy(const ::Ice::ObjectPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class FileReader : virtual public ::IceDelegate::IceGrid::FileReader,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Long getOffsetFromEnd(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool read(const ::std::string&, ::Ice::Long, ::Ice::Int, ::Ice::Long&, ::Ice::StringSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Server : virtual public ::IceDelegate::IceGrid::Server,
               virtual public ::IceDelegateD::IceGrid::FileReader
{
public:

    virtual void start(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void stop(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool checkUpdate(const ::IceGrid::InternalServerDescriptorPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEnabled(bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual bool isEnabled(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void sendSignal(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void writeMessage(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ServerState getState(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getPid(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setProcess(const ::Ice::ProcessPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class ReplicaObserver : virtual public ::IceDelegate::IceGrid::ReplicaObserver,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void replicaInit(const ::IceGrid::InternalRegistryPrxSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void replicaAdded(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void replicaRemoved(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class PatcherFeedback : virtual public ::IceDelegate::IceGrid::PatcherFeedback,
                        virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void finished(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void failed(const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class Node : virtual public ::IceDelegate::IceGrid::Node,
             virtual public ::IceDelegateD::IceGrid::FileReader,
             virtual public ::IceDelegateD::IceGrid::ReplicaObserver
{
public:

    virtual ::IceGrid::ServerPrx loadServer(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ServerPrx loadServerWithoutRestart(const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, ::IceGrid::AdapterPrxDict&, ::Ice::Int&, ::Ice::Int&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroyServer(const ::std::string&, const ::std::string&, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void patch(const ::IceGrid::PatcherFeedbackPrx&, const ::std::string&, const ::std::string&, const ::IceGrid::InternalDistributionDescriptorPtr&, bool, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getName(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::std::string getHostname(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::LoadInfo getLoad(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getProcessorSocketCount(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class NodeSession : virtual public ::IceDelegate::IceGrid::NodeSession,
                    virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void keepAlive(const ::IceGrid::LoadInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setReplicaObserver(const ::IceGrid::ReplicaObserverPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::NodeObserverPrx getObserver(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void loadServers(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::StringSeq getServers(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void waitForApplicationUpdate(const ::std::string&, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class DatabaseObserver : virtual public ::IceDelegate::IceGrid::DatabaseObserver,
                         virtual public ::IceDelegateD::IceGrid::ApplicationObserver,
                         virtual public ::IceDelegateD::IceGrid::ObjectObserver,
                         virtual public ::IceDelegateD::IceGrid::AdapterObserver
{
public:
};

class ReplicaSession : virtual public ::IceDelegate::IceGrid::ReplicaSession,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void keepAlive(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::Ice::Int getTimeout(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx&, const IceUtil::Optional< ::IceGrid::StringLongDict>&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setEndpoints(const ::IceGrid::StringObjectProxyDict&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void setAdapterDirectProxy(const ::std::string&, const ::std::string&, const ::Ice::ObjectPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void receivedUpdate(::IceGrid::TopicName, ::Ice::Int, const ::std::string&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void destroy(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

class InternalNodeInfo : virtual public ::IceDelegate::IceGrid::InternalNodeInfo,
                         virtual public ::IceDelegateD::Ice::Object
{
public:
};

class InternalReplicaInfo : virtual public ::IceDelegate::IceGrid::InternalReplicaInfo,
                            virtual public ::IceDelegateD::Ice::Object
{
public:
};

class InternalRegistry : virtual public ::IceDelegate::IceGrid::InternalRegistry,
                         virtual public ::IceDelegateD::IceGrid::FileReader
{
public:

    virtual ::IceGrid::NodeSessionPrx registerNode(const ::IceGrid::InternalNodeInfoPtr&, const ::IceGrid::NodePrx&, const ::IceGrid::LoadInfo&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ReplicaSessionPrx registerReplica(const ::IceGrid::InternalReplicaInfoPtr&, const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::NodePrxSeq getNodes(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::InternalRegistryPrxSeq getReplicas(const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ApplicationInfoSeq getApplications(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::AdapterInfoSeq getAdapters(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual ::IceGrid::ObjectInfoSeq getObjects(::Ice::Long&, const ::Ice::Context*, ::IceInternal::InvocationObserver&);

    virtual void shutdown(const ::Ice::Context*, ::IceInternal::InvocationObserver&);
};

}

}

namespace IceGrid
{

class InternalDbEnvDescriptor : virtual public ::Ice::Object
{
public:

    typedef InternalDbEnvDescriptorPrx ProxyType;
    typedef InternalDbEnvDescriptorPtr PointerType;

    InternalDbEnvDescriptor()
    {
    }

    InternalDbEnvDescriptor(const ::std::string& __ice_name, const ::IceGrid::PropertyDescriptorSeq& __ice_properties) :
        name(__ice_name),
        properties(__ice_properties)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string name;

    ::IceGrid::PropertyDescriptorSeq properties;

protected:

    virtual ~InternalDbEnvDescriptor() {}

    friend class InternalDbEnvDescriptor__staticInit;
};

class InternalDbEnvDescriptor__staticInit
{
public:

    ::IceGrid::InternalDbEnvDescriptor _init;
};

static InternalDbEnvDescriptor__staticInit _InternalDbEnvDescriptor_init;

inline bool operator==(const InternalDbEnvDescriptor& l, const InternalDbEnvDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InternalDbEnvDescriptor& l, const InternalDbEnvDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class InternalAdapterDescriptor : virtual public ::Ice::Object
{
public:

    typedef InternalAdapterDescriptorPrx ProxyType;
    typedef InternalAdapterDescriptorPtr PointerType;

    InternalAdapterDescriptor()
    {
    }

    InternalAdapterDescriptor(const ::std::string& __ice_id, bool __ice_serverLifetime) :
        id(__ice_id),
        serverLifetime(__ice_serverLifetime)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string id;

    bool serverLifetime;

protected:

    virtual ~InternalAdapterDescriptor() {}
};

inline bool operator==(const InternalAdapterDescriptor& l, const InternalAdapterDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InternalAdapterDescriptor& l, const InternalAdapterDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class InternalDistributionDescriptor : virtual public ::Ice::Object
{
public:

    typedef InternalDistributionDescriptorPrx ProxyType;
    typedef InternalDistributionDescriptorPtr PointerType;

    InternalDistributionDescriptor()
    {
    }

    InternalDistributionDescriptor(const ::std::string& __ice_icepatch, const ::Ice::StringSeq& __ice_directories) :
        icepatch(__ice_icepatch),
        directories(__ice_directories)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string icepatch;

    ::Ice::StringSeq directories;

protected:

    virtual ~InternalDistributionDescriptor() {}
};

inline bool operator==(const InternalDistributionDescriptor& l, const InternalDistributionDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InternalDistributionDescriptor& l, const InternalDistributionDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class InternalServerDescriptor : virtual public ::Ice::Object, public IceInternal::GCShared
{
public:

    typedef InternalServerDescriptorPrx ProxyType;
    typedef InternalServerDescriptorPtr PointerType;

    InternalServerDescriptor()
    {
    }

    InternalServerDescriptor(const ::std::string& __ice_id, const ::std::string& __ice_application, const ::std::string& __ice_uuid, ::Ice::Int __ice_revision, const ::std::string& __ice_sessionId, const ::std::string& __ice_exe, const ::std::string& __ice_pwd, const ::std::string& __ice_user, const ::std::string& __ice_activation, const ::std::string& __ice_activationTimeout, const ::std::string& __ice_deactivationTimeout, bool __ice_applicationDistrib, const ::IceGrid::InternalDistributionDescriptorPtr& __ice_distrib, bool __ice_processRegistered, const ::Ice::StringSeq& __ice_options, const ::Ice::StringSeq& __ice_envs, const ::Ice::StringSeq& __ice_logs, const ::IceGrid::InternalAdapterDescriptorSeq& __ice_adapters, const ::IceGrid::InternalDbEnvDescriptorSeq& __ice_dbEnvs, const ::IceGrid::PropertyDescriptorSeqDict& __ice_properties) :
        id(__ice_id),
        application(__ice_application),
        uuid(__ice_uuid),
        revision(__ice_revision),
        sessionId(__ice_sessionId),
        exe(__ice_exe),
        pwd(__ice_pwd),
        user(__ice_user),
        activation(__ice_activation),
        activationTimeout(__ice_activationTimeout),
        deactivationTimeout(__ice_deactivationTimeout),
        applicationDistrib(__ice_applicationDistrib),
        distrib(__ice_distrib),
        processRegistered(__ice_processRegistered),
        options(__ice_options),
        envs(__ice_envs),
        logs(__ice_logs),
        adapters(__ice_adapters),
        dbEnvs(__ice_dbEnvs),
        properties(__ice_properties)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void __addObject(::IceInternal::GCCountMap&);
    virtual bool __usesGC();
    virtual void __gcReachable(::IceInternal::GCCountMap&) const;
    virtual void __gcClear();

    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string id;

    ::std::string application;

    ::std::string uuid;

    ::Ice::Int revision;

    ::std::string sessionId;

    ::std::string exe;

    ::std::string pwd;

    ::std::string user;

    ::std::string activation;

    ::std::string activationTimeout;

    ::std::string deactivationTimeout;

    bool applicationDistrib;

    ::IceGrid::InternalDistributionDescriptorPtr distrib;

    bool processRegistered;

    ::Ice::StringSeq options;

    ::Ice::StringSeq envs;

    ::Ice::StringSeq logs;

    ::IceGrid::InternalAdapterDescriptorSeq adapters;

    ::IceGrid::InternalDbEnvDescriptorSeq dbEnvs;

    ::IceGrid::PropertyDescriptorSeqDict properties;

protected:

    virtual ~InternalServerDescriptor() {}
};

inline bool operator==(const InternalServerDescriptor& l, const InternalServerDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InternalServerDescriptor& l, const InternalServerDescriptor& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Adapter : virtual public ::Ice::Object
{
public:

    typedef AdapterPrx ProxyType;
    typedef AdapterPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void activate_async(const ::IceGrid::AMD_Adapter_activatePtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___activate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::ObjectPrx getDirectProxy(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getDirectProxy(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setDirectProxy(const ::Ice::ObjectPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDirectProxy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Adapter& l, const Adapter& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Adapter& l, const Adapter& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class FileReader : virtual public ::Ice::Object
{
public:

    typedef FileReaderPrx ProxyType;
    typedef FileReaderPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Long getOffsetFromEnd(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getOffsetFromEnd(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual bool read(const ::std::string&, ::Ice::Long, ::Ice::Int, ::Ice::Long&, ::Ice::StringSeq&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___read(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const FileReader& l, const FileReader& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const FileReader& l, const FileReader& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Server : virtual public ::IceGrid::FileReader
{
public:

    typedef ServerPrx ProxyType;
    typedef ServerPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void start_async(const ::IceGrid::AMD_Server_startPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___start(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void stop_async(const ::IceGrid::AMD_Server_stopPtr&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___stop(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool checkUpdate(const ::IceGrid::InternalServerDescriptorPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___checkUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setEnabled(bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEnabled(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual bool isEnabled(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___isEnabled(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void sendSignal(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendSignal(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void writeMessage(const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___writeMessage(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::IceGrid::ServerState getState(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getState(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int getPid(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getPid(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setProcess_async(const ::IceGrid::AMD_Server_setProcessPtr&, const ::Ice::ProcessPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setProcess(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Server& l, const Server& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Server& l, const Server& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ReplicaObserver : virtual public ::Ice::Object
{
public:

    typedef ReplicaObserverPrx ProxyType;
    typedef ReplicaObserverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void replicaInit(const ::IceGrid::InternalRegistryPrxSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___replicaInit(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void replicaAdded(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___replicaAdded(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void replicaRemoved(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___replicaRemoved(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ReplicaObserver& l, const ReplicaObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ReplicaObserver& l, const ReplicaObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class PatcherFeedback : virtual public ::Ice::Object
{
public:

    typedef PatcherFeedbackPrx ProxyType;
    typedef PatcherFeedbackPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void finished(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___finished(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void failed(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___failed(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const PatcherFeedback& l, const PatcherFeedback& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const PatcherFeedback& l, const PatcherFeedback& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class Node : virtual public ::IceGrid::FileReader,
             virtual public ::IceGrid::ReplicaObserver
{
public:

    typedef NodePrx ProxyType;
    typedef NodePtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void loadServer_async(const ::IceGrid::AMD_Node_loadServerPtr&, const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadServer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void loadServerWithoutRestart_async(const ::IceGrid::AMD_Node_loadServerWithoutRestartPtr&, const ::IceGrid::InternalServerDescriptorPtr&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___loadServerWithoutRestart(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroyServer_async(const ::IceGrid::AMD_Node_destroyServerPtr&, const ::std::string&, const ::std::string&, ::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroyServer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void patch_async(const ::IceGrid::AMD_Node_patchPtr&, const ::IceGrid::PatcherFeedbackPrx&, const ::std::string&, const ::std::string&, const ::IceGrid::InternalDistributionDescriptorPtr&, bool, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___patch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerWithReplica(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string getName(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getName(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::std::string getHostname(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getHostname(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IceGrid::LoadInfo getLoad(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getLoad(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::Int getProcessorSocketCount(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getProcessorSocketCount(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const Node& l, const Node& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Node& l, const Node& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class NodeSession : virtual public ::Ice::Object
{
public:

    typedef NodeSessionPrx ProxyType;
    typedef NodeSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void keepAlive(const ::IceGrid::LoadInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___keepAlive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setReplicaObserver(const ::IceGrid::ReplicaObserverPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setReplicaObserver(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getTimeout(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getTimeout(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IceGrid::NodeObserverPrx getObserver(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getObserver(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void loadServers_async(const ::IceGrid::AMD_NodeSession_loadServersPtr&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___loadServers(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::StringSeq getServers(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getServers(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void waitForApplicationUpdate_async(const ::IceGrid::AMD_NodeSession_waitForApplicationUpdatePtr&, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___waitForApplicationUpdate(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const NodeSession& l, const NodeSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const NodeSession& l, const NodeSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class DatabaseObserver : virtual public ::IceGrid::ApplicationObserver,
                         virtual public ::IceGrid::ObjectObserver,
                         virtual public ::IceGrid::AdapterObserver
{
public:

    typedef DatabaseObserverPrx ProxyType;
    typedef DatabaseObserverPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const DatabaseObserver& l, const DatabaseObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const DatabaseObserver& l, const DatabaseObserver& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class ReplicaSession : virtual public ::Ice::Object
{
public:

    typedef ReplicaSessionPrx ProxyType;
    typedef ReplicaSessionPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void keepAlive(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___keepAlive(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int getTimeout(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getTimeout(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void setDatabaseObserver(const ::IceGrid::DatabaseObserverPrx&, const IceUtil::Optional< ::IceGrid::StringLongDict>&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setDatabaseObserver(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setEndpoints(const ::IceGrid::StringObjectProxyDict&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setEndpoints(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void registerWellKnownObjects(const ::IceGrid::ObjectInfoSeq&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerWellKnownObjects(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void setAdapterDirectProxy(const ::std::string&, const ::std::string&, const ::Ice::ObjectPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___setAdapterDirectProxy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void receivedUpdate(::IceGrid::TopicName, ::Ice::Int, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___receivedUpdate(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void destroy(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___destroy(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const ReplicaSession& l, const ReplicaSession& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const ReplicaSession& l, const ReplicaSession& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class InternalNodeInfo : virtual public ::Ice::Object
{
public:

    typedef InternalNodeInfoPrx ProxyType;
    typedef InternalNodeInfoPtr PointerType;

    InternalNodeInfo()
    {
    }

    InternalNodeInfo(const ::std::string& __ice_name, const ::std::string& __ice_os, const ::std::string& __ice_hostname, const ::std::string& __ice_release, const ::std::string& __ice_version, const ::std::string& __ice_machine, ::Ice::Int __ice_nProcessors, const ::std::string& __ice_dataDir) :
        name(__ice_name),
        os(__ice_os),
        hostname(__ice_hostname),
        release(__ice_release),
        version(__ice_version),
        machine(__ice_machine),
        nProcessors(__ice_nProcessors),
        dataDir(__ice_dataDir)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string name;

    ::std::string os;

    ::std::string hostname;

    ::std::string release;

    ::std::string version;

    ::std::string machine;

    ::Ice::Int nProcessors;

    ::std::string dataDir;

protected:

    virtual ~InternalNodeInfo() {}
};

inline bool operator==(const InternalNodeInfo& l, const InternalNodeInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InternalNodeInfo& l, const InternalNodeInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class InternalReplicaInfo : virtual public ::Ice::Object
{
public:

    typedef InternalReplicaInfoPrx ProxyType;
    typedef InternalReplicaInfoPtr PointerType;

    InternalReplicaInfo()
    {
    }

    InternalReplicaInfo(const ::std::string& __ice_name, const ::std::string& __ice_hostname) :
        name(__ice_name),
        hostname(__ice_hostname)
    {
    }

    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();


    static const ::Ice::ObjectFactoryPtr& ice_factory();

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif

public:

    ::std::string name;

    ::std::string hostname;

protected:

    virtual ~InternalReplicaInfo() {}
};

inline bool operator==(const InternalReplicaInfo& l, const InternalReplicaInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InternalReplicaInfo& l, const InternalReplicaInfo& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class InternalRegistry : virtual public ::IceGrid::FileReader
{
public:

    typedef InternalRegistryPrx ProxyType;
    typedef InternalRegistryPtr PointerType;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::IceGrid::NodeSessionPrx registerNode(const ::IceGrid::InternalNodeInfoPtr&, const ::IceGrid::NodePrx&, const ::IceGrid::LoadInfo&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerNode(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::IceGrid::ReplicaSessionPrx registerReplica(const ::IceGrid::InternalReplicaInfoPtr&, const ::IceGrid::InternalRegistryPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerReplica(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void registerWithReplica(const ::IceGrid::InternalRegistryPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___registerWithReplica(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::IceGrid::NodePrxSeq getNodes(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getNodes(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IceGrid::InternalRegistryPrxSeq getReplicas(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getReplicas(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IceGrid::ApplicationInfoSeq getApplications(::Ice::Long&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getApplications(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IceGrid::AdapterInfoSeq getAdapters(::Ice::Long&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getAdapters(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::IceGrid::ObjectInfoSeq getObjects(::Ice::Long&, const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___getObjects(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual void shutdown(const ::Ice::Current& = ::Ice::Current()) const = 0;
    ::Ice::DispatchStatus ___shutdown(::IceInternal::Incoming&, const ::Ice::Current&) const;

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

protected:
    virtual void __writeImpl(::IceInternal::BasicStream*) const;
    virtual void __readImpl(::IceInternal::BasicStream*);
    #ifdef __SUNPRO_CC
    using ::Ice::Object::__writeImpl;
    using ::Ice::Object::__readImpl;
    #endif
};

inline bool operator==(const InternalRegistry& l, const InternalRegistry& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const InternalRegistry& l, const InternalRegistry& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace IceGrid
{

template<class T>
class CallbackNC_Adapter_activate : public Callback_Adapter_activate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ObjectPrx&);

    CallbackNC_Adapter_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
        ::Ice::ObjectPrx __ret;
        try
        {
            __ret = __proxy->end_activate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Adapter_activatePtr
newCallback_Adapter_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ObjectPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_activate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Adapter_activatePtr
newCallback_Adapter_activate(T* instance, void (T::*cb)(const ::Ice::ObjectPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_activate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Adapter_activate : public Callback_Adapter_activate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ObjectPrx&, const CT&);

    Callback_Adapter_activate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
        ::Ice::ObjectPrx __ret;
        try
        {
            __ret = __proxy->end_activate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Adapter_activatePtr
newCallback_Adapter_activate(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ObjectPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Adapter_activatePtr
newCallback_Adapter_activate(T* instance, void (T::*cb)(const ::Ice::ObjectPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_activate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Adapter_getDirectProxy : public Callback_Adapter_getDirectProxy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::ObjectPrx&);

    CallbackNC_Adapter_getDirectProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
        ::Ice::ObjectPrx __ret;
        try
        {
            __ret = __proxy->end_getDirectProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Adapter_getDirectProxyPtr
newCallback_Adapter_getDirectProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ObjectPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_getDirectProxy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Adapter_getDirectProxyPtr
newCallback_Adapter_getDirectProxy(T* instance, void (T::*cb)(const ::Ice::ObjectPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_getDirectProxy<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Adapter_getDirectProxy : public Callback_Adapter_getDirectProxy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::ObjectPrx&, const CT&);

    Callback_Adapter_getDirectProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
        ::Ice::ObjectPrx __ret;
        try
        {
            __ret = __proxy->end_getDirectProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Adapter_getDirectProxyPtr
newCallback_Adapter_getDirectProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::ObjectPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_getDirectProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Adapter_getDirectProxyPtr
newCallback_Adapter_getDirectProxy(T* instance, void (T::*cb)(const ::Ice::ObjectPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_getDirectProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Adapter_setDirectProxy : public Callback_Adapter_setDirectProxy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Adapter_setDirectProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDirectProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_setDirectProxy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_setDirectProxy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_setDirectProxy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Adapter_setDirectProxy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Adapter_setDirectProxy : public Callback_Adapter_setDirectProxy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Adapter_setDirectProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::AdapterPrx __proxy = ::IceGrid::AdapterPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDirectProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_setDirectProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_setDirectProxy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_setDirectProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Adapter_setDirectProxyPtr
newCallback_Adapter_setDirectProxy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Adapter_setDirectProxy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_FileReader_getOffsetFromEnd : public Callback_FileReader_getOffsetFromEnd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Long);

    CallbackNC_FileReader_getOffsetFromEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::FileReaderPrx __proxy = ::IceGrid::FileReaderPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getOffsetFromEnd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_FileReader_getOffsetFromEndPtr
newCallback_FileReader_getOffsetFromEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileReader_getOffsetFromEnd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileReader_getOffsetFromEndPtr
newCallback_FileReader_getOffsetFromEnd(T* instance, void (T::*cb)(::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileReader_getOffsetFromEnd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileReader_getOffsetFromEnd : public Callback_FileReader_getOffsetFromEnd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Long, const CT&);

    Callback_FileReader_getOffsetFromEnd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::FileReaderPrx __proxy = ::IceGrid::FileReaderPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long __ret;
        try
        {
            __ret = __proxy->end_getOffsetFromEnd(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileReader_getOffsetFromEndPtr
newCallback_FileReader_getOffsetFromEnd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileReader_getOffsetFromEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileReader_getOffsetFromEndPtr
newCallback_FileReader_getOffsetFromEnd(T* instance, void (T::*cb)(::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileReader_getOffsetFromEnd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_FileReader_read : public Callback_FileReader_read_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool, ::Ice::Long, const ::Ice::StringSeq&);

    CallbackNC_FileReader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::FileReaderPrx __proxy = ::IceGrid::FileReaderPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long newPos;
        ::Ice::StringSeq lines;
        bool __ret;
        try
        {
            __ret = __proxy->end_read(newPos, lines, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, newPos, lines);
        }
    }

    Response response;
};

template<class T> Callback_FileReader_readPtr
newCallback_FileReader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Long, const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileReader_read<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_FileReader_readPtr
newCallback_FileReader_read(T* instance, void (T::*cb)(bool, ::Ice::Long, const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_FileReader_read<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_FileReader_read : public Callback_FileReader_read_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, ::Ice::Long, const ::Ice::StringSeq&, const CT&);

    Callback_FileReader_read(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::FileReaderPrx __proxy = ::IceGrid::FileReaderPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long newPos;
        ::Ice::StringSeq lines;
        bool __ret;
        try
        {
            __ret = __proxy->end_read(newPos, lines, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, newPos, lines, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_FileReader_readPtr
newCallback_FileReader_read(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, ::Ice::Long, const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileReader_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_FileReader_readPtr
newCallback_FileReader_read(T* instance, void (T::*cb)(bool, ::Ice::Long, const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_FileReader_read<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_start : public Callback_Server_start_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_start(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Server_startPtr
newCallback_Server_start(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_start<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_startPtr
newCallback_Server_start(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_start<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_startPtr
newCallback_Server_start(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_start<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_startPtr
newCallback_Server_start(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_start<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_start : public Callback_Server_start_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_start(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_start(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_startPtr
newCallback_Server_start(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_start<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_startPtr
newCallback_Server_start(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_start<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_startPtr
newCallback_Server_start(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_start<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_startPtr
newCallback_Server_start(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_start<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_stop : public Callback_Server_stop_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stop(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Server_stopPtr
newCallback_Server_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_stopPtr
newCallback_Server_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stop<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_stopPtr
newCallback_Server_stop(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stop<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_stopPtr
newCallback_Server_stop(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_stop<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_stop : public Callback_Server_stop_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_stop(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_stop(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_stopPtr
newCallback_Server_stop(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_stopPtr
newCallback_Server_stop(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_stopPtr
newCallback_Server_stop(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stop<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_stopPtr
newCallback_Server_stop(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_stop<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_checkUpdate : public Callback_Server_checkUpdate_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Server_checkUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkUpdate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Server_checkUpdatePtr
newCallback_Server_checkUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_checkUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_checkUpdatePtr
newCallback_Server_checkUpdate(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_checkUpdate<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_checkUpdate : public Callback_Server_checkUpdate_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Server_checkUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_checkUpdate(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_checkUpdatePtr
newCallback_Server_checkUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_checkUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_checkUpdatePtr
newCallback_Server_checkUpdate(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_checkUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_setEnabled : public Callback_Server_setEnabled_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_setEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setEnabled<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setEnabled<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setEnabled<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setEnabled<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_setEnabled : public Callback_Server_setEnabled_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_setEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setEnabled<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_setEnabledPtr
newCallback_Server_setEnabled(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setEnabled<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_isEnabled : public Callback_Server_isEnabled_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(bool);

    CallbackNC_Server_isEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isEnabled(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Server_isEnabledPtr
newCallback_Server_isEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_isEnabled<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_isEnabledPtr
newCallback_Server_isEnabled(T* instance, void (T::*cb)(bool), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_isEnabled<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_isEnabled : public Callback_Server_isEnabled_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(bool, const CT&);

    Callback_Server_isEnabled(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        bool __ret;
        try
        {
            __ret = __proxy->end_isEnabled(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_isEnabledPtr
newCallback_Server_isEnabled(const IceUtil::Handle<T>& instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_isEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_isEnabledPtr
newCallback_Server_isEnabled(T* instance, void (T::*cb)(bool, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_isEnabled<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_sendSignal : public Callback_Server_sendSignal_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_sendSignal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_sendSignal(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_sendSignal<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_sendSignal<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_sendSignal<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_sendSignal<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_sendSignal : public Callback_Server_sendSignal_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_sendSignal(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_sendSignal(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_sendSignal<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_sendSignal<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_sendSignal<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_sendSignalPtr
newCallback_Server_sendSignal(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_sendSignal<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_writeMessage : public Callback_Server_writeMessage_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_writeMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_writeMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_writeMessage<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_writeMessage<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_writeMessage<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_writeMessage : public Callback_Server_writeMessage_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_writeMessage(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_writeMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_writeMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_writeMessage<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_writeMessagePtr
newCallback_Server_writeMessage(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_writeMessage<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Server_getState : public Callback_Server_getState_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::IceGrid::ServerState);

    CallbackNC_Server_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::ServerState __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Server_getStatePtr
newCallback_Server_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(::IceGrid::ServerState), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getState<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_getStatePtr
newCallback_Server_getState(T* instance, void (T::*cb)(::IceGrid::ServerState), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getState<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_getState : public Callback_Server_getState_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::IceGrid::ServerState, const CT&);

    Callback_Server_getState(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::ServerState __ret;
        try
        {
            __ret = __proxy->end_getState(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_getStatePtr
newCallback_Server_getState(const IceUtil::Handle<T>& instance, void (T::*cb)(::IceGrid::ServerState, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getState<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_getStatePtr
newCallback_Server_getState(T* instance, void (T::*cb)(::IceGrid::ServerState, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getState<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_getPid : public Callback_Server_getPid_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Server_getPid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPid(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Server_getPidPtr
newCallback_Server_getPid(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getPid<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_getPidPtr
newCallback_Server_getPid(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_getPid<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_getPid : public Callback_Server_getPid_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Server_getPid(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ServerPrx __proxy = ::IceGrid::ServerPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getPid(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Server_getPidPtr
newCallback_Server_getPid(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getPid<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_getPidPtr
newCallback_Server_getPid(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_getPid<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Server_setProcess : public Callback_Server_setProcess_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Server_setProcess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Server_setProcessPtr
newCallback_Server_setProcess(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setProcess<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_setProcessPtr
newCallback_Server_setProcess(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setProcess<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Server_setProcessPtr
newCallback_Server_setProcess(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setProcess<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Server_setProcessPtr
newCallback_Server_setProcess(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Server_setProcess<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Server_setProcess : public Callback_Server_setProcess_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Server_setProcess(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Server_setProcessPtr
newCallback_Server_setProcess(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setProcess<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_setProcessPtr
newCallback_Server_setProcess(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setProcess<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Server_setProcessPtr
newCallback_Server_setProcess(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setProcess<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Server_setProcessPtr
newCallback_Server_setProcess(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Server_setProcess<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaObserver_replicaInit : public Callback_ReplicaObserver_replicaInit_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaObserver_replicaInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaInit<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaInit<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaInit<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaObserver_replicaInit : public Callback_ReplicaObserver_replicaInit_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaObserver_replicaInit(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaInit<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaInitPtr
newCallback_ReplicaObserver_replicaInit(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaInit<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaObserver_replicaAdded : public Callback_ReplicaObserver_replicaAdded_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaObserver_replicaAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaAdded<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaAdded<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaAdded<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaObserver_replicaAdded : public Callback_ReplicaObserver_replicaAdded_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaObserver_replicaAdded(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaAdded<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaAddedPtr
newCallback_ReplicaObserver_replicaAdded(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaAdded<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaObserver_replicaRemoved : public Callback_ReplicaObserver_replicaRemoved_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaObserver_replicaRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaRemoved<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaRemoved<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaObserver_replicaRemoved<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaObserver_replicaRemoved : public Callback_ReplicaObserver_replicaRemoved_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaObserver_replicaRemoved(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaRemoved<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaObserver_replicaRemovedPtr
newCallback_ReplicaObserver_replicaRemoved(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaObserver_replicaRemoved<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PatcherFeedback_finished : public Callback_PatcherFeedback_finished_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PatcherFeedback_finished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_finished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_finished<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_finished<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_finished<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PatcherFeedback_finished : public Callback_PatcherFeedback_finished_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PatcherFeedback_finished(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_finished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_finished<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_finished<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PatcherFeedback_finishedPtr
newCallback_PatcherFeedback_finished(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_finished<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_PatcherFeedback_failed : public Callback_PatcherFeedback_failed_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_PatcherFeedback_failed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_failed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_failed<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_failed<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_PatcherFeedback_failed<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_PatcherFeedback_failed : public Callback_PatcherFeedback_failed_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_PatcherFeedback_failed(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_failed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_failed<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_failed<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_PatcherFeedback_failedPtr
newCallback_PatcherFeedback_failed(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_PatcherFeedback_failed<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_loadServer : public Callback_Node_loadServer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int);

    CallbackNC_Node_loadServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdapterPrxDict adapters;
        ::Ice::Int actTimeout;
        ::Ice::Int deactTimeout;
        ::IceGrid::ServerPrx __ret;
        try
        {
            __ret = __proxy->end_loadServer(adapters, actTimeout, deactTimeout, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, adapters, actTimeout, deactTimeout);
        }
    }

    Response response;
};

template<class T> Callback_Node_loadServerPtr
newCallback_Node_loadServer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_loadServer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_loadServerPtr
newCallback_Node_loadServer(T* instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_loadServer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_loadServer : public Callback_Node_loadServer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int, const CT&);

    Callback_Node_loadServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdapterPrxDict adapters;
        ::Ice::Int actTimeout;
        ::Ice::Int deactTimeout;
        ::IceGrid::ServerPrx __ret;
        try
        {
            __ret = __proxy->end_loadServer(adapters, actTimeout, deactTimeout, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, adapters, actTimeout, deactTimeout, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_loadServerPtr
newCallback_Node_loadServer(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_loadServer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_loadServerPtr
newCallback_Node_loadServer(T* instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_loadServer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_loadServerWithoutRestart : public Callback_Node_loadServerWithoutRestart_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int);

    CallbackNC_Node_loadServerWithoutRestart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdapterPrxDict adapters;
        ::Ice::Int actTimeout;
        ::Ice::Int deactTimeout;
        ::IceGrid::ServerPrx __ret;
        try
        {
            __ret = __proxy->end_loadServerWithoutRestart(adapters, actTimeout, deactTimeout, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, adapters, actTimeout, deactTimeout);
        }
    }

    Response response;
};

template<class T> Callback_Node_loadServerWithoutRestartPtr
newCallback_Node_loadServerWithoutRestart(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_loadServerWithoutRestart<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_loadServerWithoutRestartPtr
newCallback_Node_loadServerWithoutRestart(T* instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_loadServerWithoutRestart<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_loadServerWithoutRestart : public Callback_Node_loadServerWithoutRestart_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int, const CT&);

    Callback_Node_loadServerWithoutRestart(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::IceGrid::AdapterPrxDict adapters;
        ::Ice::Int actTimeout;
        ::Ice::Int deactTimeout;
        ::IceGrid::ServerPrx __ret;
        try
        {
            __ret = __proxy->end_loadServerWithoutRestart(adapters, actTimeout, deactTimeout, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, adapters, actTimeout, deactTimeout, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_loadServerWithoutRestartPtr
newCallback_Node_loadServerWithoutRestart(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_loadServerWithoutRestart<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_loadServerWithoutRestartPtr
newCallback_Node_loadServerWithoutRestart(T* instance, void (T::*cb)(const ::IceGrid::ServerPrx&, const ::IceGrid::AdapterPrxDict&, ::Ice::Int, ::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_loadServerWithoutRestart<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_destroyServer : public Callback_Node_destroyServer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_destroyServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroyServer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_destroyServer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_destroyServer<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_destroyServer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_destroyServer<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_destroyServer : public Callback_Node_destroyServer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_destroyServer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_destroyServer(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_destroyServer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_destroyServer<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_destroyServer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_destroyServerPtr
newCallback_Node_destroyServer(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_destroyServer<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_patch : public Callback_Node_patch_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_patch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_patchPtr
newCallback_Node_patch(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_patch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_patchPtr
newCallback_Node_patch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_patch<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_patchPtr
newCallback_Node_patch(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_patch<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_patchPtr
newCallback_Node_patch(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_patch<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_patch : public Callback_Node_patch_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_patch(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_patchPtr
newCallback_Node_patch(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_patch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_patchPtr
newCallback_Node_patch(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_patch<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_patchPtr
newCallback_Node_patch(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_patch<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_patchPtr
newCallback_Node_patch(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_patch<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_registerWithReplica : public Callback_Node_registerWithReplica_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_registerWithReplica(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_registerWithReplica<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_registerWithReplica<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_registerWithReplica<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_registerWithReplica<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_registerWithReplica : public Callback_Node_registerWithReplica_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_registerWithReplica(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_registerWithReplica<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_registerWithReplica<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_registerWithReplica<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_registerWithReplicaPtr
newCallback_Node_registerWithReplica(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_registerWithReplica<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getName : public Callback_Node_getName_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Node_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getNamePtr
newCallback_Node_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getName<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getNamePtr
newCallback_Node_getName(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getName<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getName : public Callback_Node_getName_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Node_getName(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getName(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getNamePtr
newCallback_Node_getName(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getNamePtr
newCallback_Node_getName(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getName<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getHostname : public Callback_Node_getHostname_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_Node_getHostname(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getHostname(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getHostnamePtr
newCallback_Node_getHostname(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getHostname<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getHostnamePtr
newCallback_Node_getHostname(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getHostname<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getHostname : public Callback_Node_getHostname_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_Node_getHostname(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_getHostname(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getHostnamePtr
newCallback_Node_getHostname(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getHostname<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getHostnamePtr
newCallback_Node_getHostname(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getHostname<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getLoad : public Callback_Node_getLoad_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::LoadInfo&);

    CallbackNC_Node_getLoad(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::IceGrid::LoadInfo __ret;
        try
        {
            __ret = __proxy->end_getLoad(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getLoadPtr
newCallback_Node_getLoad(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::LoadInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getLoad<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getLoadPtr
newCallback_Node_getLoad(T* instance, void (T::*cb)(const ::IceGrid::LoadInfo&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getLoad<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getLoad : public Callback_Node_getLoad_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::LoadInfo&, const CT&);

    Callback_Node_getLoad(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::IceGrid::LoadInfo __ret;
        try
        {
            __ret = __proxy->end_getLoad(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getLoadPtr
newCallback_Node_getLoad(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::LoadInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getLoad<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getLoadPtr
newCallback_Node_getLoad(T* instance, void (T::*cb)(const ::IceGrid::LoadInfo&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getLoad<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_getProcessorSocketCount : public Callback_Node_getProcessorSocketCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Node_getProcessorSocketCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getProcessorSocketCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_Node_getProcessorSocketCountPtr
newCallback_Node_getProcessorSocketCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getProcessorSocketCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_getProcessorSocketCountPtr
newCallback_Node_getProcessorSocketCount(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_getProcessorSocketCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_getProcessorSocketCount : public Callback_Node_getProcessorSocketCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Node_getProcessorSocketCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodePrx __proxy = ::IceGrid::NodePrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getProcessorSocketCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Node_getProcessorSocketCountPtr
newCallback_Node_getProcessorSocketCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getProcessorSocketCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_getProcessorSocketCountPtr
newCallback_Node_getProcessorSocketCount(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_getProcessorSocketCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Node_shutdown : public Callback_Node_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Node_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Node_shutdownPtr
newCallback_Node_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_shutdownPtr
newCallback_Node_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Node_shutdownPtr
newCallback_Node_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Node_shutdownPtr
newCallback_Node_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Node_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Node_shutdown : public Callback_Node_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Node_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Node_shutdownPtr
newCallback_Node_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_shutdownPtr
newCallback_Node_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Node_shutdownPtr
newCallback_Node_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Node_shutdownPtr
newCallback_Node_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Node_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_keepAlive : public Callback_NodeSession_keepAlive_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeSession_keepAlive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_keepAlive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_keepAlive<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_keepAlive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_keepAlive<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_keepAlive : public Callback_NodeSession_keepAlive_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeSession_keepAlive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_keepAlive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_keepAlive<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_keepAlive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_keepAlivePtr
newCallback_NodeSession_keepAlive(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_keepAlive<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_setReplicaObserver : public Callback_NodeSession_setReplicaObserver_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeSession_setReplicaObserver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_setReplicaObserver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_setReplicaObserver<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_setReplicaObserver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_setReplicaObserver<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_setReplicaObserver : public Callback_NodeSession_setReplicaObserver_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeSession_setReplicaObserver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_setReplicaObserver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_setReplicaObserver<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_setReplicaObserver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_setReplicaObserverPtr
newCallback_NodeSession_setReplicaObserver(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_setReplicaObserver<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_getTimeout : public Callback_NodeSession_getTimeout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_NodeSession_getTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_NodeSession_getTimeoutPtr
newCallback_NodeSession_getTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_getTimeout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_getTimeoutPtr
newCallback_NodeSession_getTimeout(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_getTimeout<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_getTimeout : public Callback_NodeSession_getTimeout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_NodeSession_getTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_NodeSession_getTimeoutPtr
newCallback_NodeSession_getTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_getTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_getTimeoutPtr
newCallback_NodeSession_getTimeout(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_getTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_getObserver : public Callback_NodeSession_getObserver_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::NodeObserverPrx&);

    CallbackNC_NodeSession_getObserver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::NodeObserverPrx __ret;
        try
        {
            __ret = __proxy->end_getObserver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_NodeSession_getObserverPtr
newCallback_NodeSession_getObserver(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::NodeObserverPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_getObserver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_getObserverPtr
newCallback_NodeSession_getObserver(T* instance, void (T::*cb)(const ::IceGrid::NodeObserverPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_getObserver<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_getObserver : public Callback_NodeSession_getObserver_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::NodeObserverPrx&, const CT&);

    Callback_NodeSession_getObserver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::NodeObserverPrx __ret;
        try
        {
            __ret = __proxy->end_getObserver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_NodeSession_getObserverPtr
newCallback_NodeSession_getObserver(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::NodeObserverPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_getObserver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_getObserverPtr
newCallback_NodeSession_getObserver(T* instance, void (T::*cb)(const ::IceGrid::NodeObserverPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_getObserver<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_loadServers : public Callback_NodeSession_loadServers_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeSession_loadServers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_loadServers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_loadServers<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_loadServers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_loadServers<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_loadServers : public Callback_NodeSession_loadServers_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeSession_loadServers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_loadServers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_loadServers<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_loadServers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_loadServersPtr
newCallback_NodeSession_loadServers(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_loadServers<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_getServers : public Callback_NodeSession_getServers_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Ice::StringSeq&);

    CallbackNC_NodeSession_getServers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_getServers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_NodeSession_getServersPtr
newCallback_NodeSession_getServers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_getServers<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_getServersPtr
newCallback_NodeSession_getServers(T* instance, void (T::*cb)(const ::Ice::StringSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_getServers<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_getServers : public Callback_NodeSession_getServers_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Ice::StringSeq&, const CT&);

    Callback_NodeSession_getServers(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::NodeSessionPrx __proxy = ::IceGrid::NodeSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::StringSeq __ret;
        try
        {
            __ret = __proxy->end_getServers(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_NodeSession_getServersPtr
newCallback_NodeSession_getServers(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_getServers<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_getServersPtr
newCallback_NodeSession_getServers(T* instance, void (T::*cb)(const ::Ice::StringSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_getServers<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_waitForApplicationUpdate : public Callback_NodeSession_waitForApplicationUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeSession_waitForApplicationUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_waitForApplicationUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_waitForApplicationUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_waitForApplicationUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_waitForApplicationUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_waitForApplicationUpdate : public Callback_NodeSession_waitForApplicationUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeSession_waitForApplicationUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_waitForApplicationUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_waitForApplicationUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_waitForApplicationUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_waitForApplicationUpdatePtr
newCallback_NodeSession_waitForApplicationUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_waitForApplicationUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_NodeSession_destroy : public Callback_NodeSession_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_NodeSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_NodeSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_NodeSession_destroy : public Callback_NodeSession_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_NodeSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_NodeSession_destroyPtr
newCallback_NodeSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_NodeSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_keepAlive : public Callback_ReplicaSession_keepAlive_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaSession_keepAlive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_keepAlive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_keepAlive<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_keepAlive<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_keepAlive<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_keepAlive : public Callback_ReplicaSession_keepAlive_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaSession_keepAlive(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_keepAlive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_keepAlive<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_keepAlive<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_keepAlivePtr
newCallback_ReplicaSession_keepAlive(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_keepAlive<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_getTimeout : public Callback_ReplicaSession_getTimeout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_ReplicaSession_getTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_ReplicaSession_getTimeoutPtr
newCallback_ReplicaSession_getTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_getTimeout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_getTimeoutPtr
newCallback_ReplicaSession_getTimeout(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_getTimeout<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_getTimeout : public Callback_ReplicaSession_getTimeout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_ReplicaSession_getTimeout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_getTimeout(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ReplicaSession_getTimeoutPtr
newCallback_ReplicaSession_getTimeout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_getTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_getTimeoutPtr
newCallback_ReplicaSession_getTimeout(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_getTimeout<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_setDatabaseObserver : public Callback_ReplicaSession_setDatabaseObserver_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaSession_setDatabaseObserver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDatabaseObserver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setDatabaseObserver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setDatabaseObserver<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setDatabaseObserver<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setDatabaseObserver<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_setDatabaseObserver : public Callback_ReplicaSession_setDatabaseObserver_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaSession_setDatabaseObserver(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setDatabaseObserver(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setDatabaseObserver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setDatabaseObserver<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setDatabaseObserver<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setDatabaseObserverPtr
newCallback_ReplicaSession_setDatabaseObserver(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setDatabaseObserver<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_setEndpoints : public Callback_ReplicaSession_setEndpoints_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaSession_setEndpoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setEndpoints<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setEndpoints<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setEndpoints<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setEndpoints<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_setEndpoints : public Callback_ReplicaSession_setEndpoints_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaSession_setEndpoints(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setEndpoints<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setEndpoints<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setEndpoints<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setEndpointsPtr
newCallback_ReplicaSession_setEndpoints(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setEndpoints<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_registerWellKnownObjects : public Callback_ReplicaSession_registerWellKnownObjects_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaSession_registerWellKnownObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_registerWellKnownObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_registerWellKnownObjects<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_registerWellKnownObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_registerWellKnownObjects<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_registerWellKnownObjects : public Callback_ReplicaSession_registerWellKnownObjects_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaSession_registerWellKnownObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_registerWellKnownObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_registerWellKnownObjects<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_registerWellKnownObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_registerWellKnownObjectsPtr
newCallback_ReplicaSession_registerWellKnownObjects(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_registerWellKnownObjects<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_setAdapterDirectProxy : public Callback_ReplicaSession_setAdapterDirectProxy_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaSession_setAdapterDirectProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setAdapterDirectProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)();
        }
    }

    Response response;
};

template<class T> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setAdapterDirectProxy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setAdapterDirectProxy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setAdapterDirectProxy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_setAdapterDirectProxy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_setAdapterDirectProxy : public Callback_ReplicaSession_setAdapterDirectProxy_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaSession_setAdapterDirectProxy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::ReplicaSessionPrx __proxy = ::IceGrid::ReplicaSessionPrx::uncheckedCast(__result->getProxy());
        try
        {
            __proxy->end_setAdapterDirectProxy(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setAdapterDirectProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setAdapterDirectProxy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setAdapterDirectProxy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_setAdapterDirectProxyPtr
newCallback_ReplicaSession_setAdapterDirectProxy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_setAdapterDirectProxy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_receivedUpdate : public Callback_ReplicaSession_receivedUpdate_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaSession_receivedUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_receivedUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_receivedUpdate<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_receivedUpdate<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_receivedUpdate<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_receivedUpdate : public Callback_ReplicaSession_receivedUpdate_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaSession_receivedUpdate(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_receivedUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_receivedUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_receivedUpdate<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_receivedUpdatePtr
newCallback_ReplicaSession_receivedUpdate(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_receivedUpdate<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_ReplicaSession_destroy : public Callback_ReplicaSession_destroy_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_ReplicaSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_destroy<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_ReplicaSession_destroy<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_ReplicaSession_destroy : public Callback_ReplicaSession_destroy_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_ReplicaSession_destroy(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_destroy<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_ReplicaSession_destroyPtr
newCallback_ReplicaSession_destroy(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_ReplicaSession_destroy<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_registerNode : public Callback_InternalRegistry_registerNode_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::NodeSessionPrx&);

    CallbackNC_InternalRegistry_registerNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::NodeSessionPrx __ret;
        try
        {
            __ret = __proxy->end_registerNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InternalRegistry_registerNodePtr
newCallback_InternalRegistry_registerNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::NodeSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerNode<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_registerNodePtr
newCallback_InternalRegistry_registerNode(T* instance, void (T::*cb)(const ::IceGrid::NodeSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerNode<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_registerNode : public Callback_InternalRegistry_registerNode_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::NodeSessionPrx&, const CT&);

    Callback_InternalRegistry_registerNode(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::NodeSessionPrx __ret;
        try
        {
            __ret = __proxy->end_registerNode(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InternalRegistry_registerNodePtr
newCallback_InternalRegistry_registerNode(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::NodeSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_registerNodePtr
newCallback_InternalRegistry_registerNode(T* instance, void (T::*cb)(const ::IceGrid::NodeSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerNode<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_registerReplica : public Callback_InternalRegistry_registerReplica_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::ReplicaSessionPrx&);

    CallbackNC_InternalRegistry_registerReplica(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::ReplicaSessionPrx __ret;
        try
        {
            __ret = __proxy->end_registerReplica(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InternalRegistry_registerReplicaPtr
newCallback_InternalRegistry_registerReplica(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ReplicaSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerReplica<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_registerReplicaPtr
newCallback_InternalRegistry_registerReplica(T* instance, void (T::*cb)(const ::IceGrid::ReplicaSessionPrx&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerReplica<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_registerReplica : public Callback_InternalRegistry_registerReplica_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::ReplicaSessionPrx&, const CT&);

    Callback_InternalRegistry_registerReplica(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::ReplicaSessionPrx __ret;
        try
        {
            __ret = __proxy->end_registerReplica(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InternalRegistry_registerReplicaPtr
newCallback_InternalRegistry_registerReplica(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ReplicaSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerReplica<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_registerReplicaPtr
newCallback_InternalRegistry_registerReplica(T* instance, void (T::*cb)(const ::IceGrid::ReplicaSessionPrx&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerReplica<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_registerWithReplica : public Callback_InternalRegistry_registerWithReplica_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_InternalRegistry_registerWithReplica(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerWithReplica<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerWithReplica<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerWithReplica<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_registerWithReplica<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_registerWithReplica : public Callback_InternalRegistry_registerWithReplica_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_InternalRegistry_registerWithReplica(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerWithReplica<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerWithReplica<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerWithReplica<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_registerWithReplicaPtr
newCallback_InternalRegistry_registerWithReplica(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_registerWithReplica<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_getNodes : public Callback_InternalRegistry_getNodes_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::NodePrxSeq&);

    CallbackNC_InternalRegistry_getNodes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::NodePrxSeq __ret;
        try
        {
            __ret = __proxy->end_getNodes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InternalRegistry_getNodesPtr
newCallback_InternalRegistry_getNodes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::NodePrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getNodes<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_getNodesPtr
newCallback_InternalRegistry_getNodes(T* instance, void (T::*cb)(const ::IceGrid::NodePrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getNodes<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_getNodes : public Callback_InternalRegistry_getNodes_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::NodePrxSeq&, const CT&);

    Callback_InternalRegistry_getNodes(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::NodePrxSeq __ret;
        try
        {
            __ret = __proxy->end_getNodes(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InternalRegistry_getNodesPtr
newCallback_InternalRegistry_getNodes(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::NodePrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getNodes<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_getNodesPtr
newCallback_InternalRegistry_getNodes(T* instance, void (T::*cb)(const ::IceGrid::NodePrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getNodes<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_getReplicas : public Callback_InternalRegistry_getReplicas_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::InternalRegistryPrxSeq&);

    CallbackNC_InternalRegistry_getReplicas(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::InternalRegistryPrxSeq __ret;
        try
        {
            __ret = __proxy->end_getReplicas(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
        }
    }

    Response response;
};

template<class T> Callback_InternalRegistry_getReplicasPtr
newCallback_InternalRegistry_getReplicas(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::InternalRegistryPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getReplicas<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_getReplicasPtr
newCallback_InternalRegistry_getReplicas(T* instance, void (T::*cb)(const ::IceGrid::InternalRegistryPrxSeq&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getReplicas<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_getReplicas : public Callback_InternalRegistry_getReplicas_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::InternalRegistryPrxSeq&, const CT&);

    Callback_InternalRegistry_getReplicas(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::IceGrid::InternalRegistryPrxSeq __ret;
        try
        {
            __ret = __proxy->end_getReplicas(__result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InternalRegistry_getReplicasPtr
newCallback_InternalRegistry_getReplicas(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::InternalRegistryPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getReplicas<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_getReplicasPtr
newCallback_InternalRegistry_getReplicas(T* instance, void (T::*cb)(const ::IceGrid::InternalRegistryPrxSeq&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getReplicas<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_getApplications : public Callback_InternalRegistry_getApplications_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long);

    CallbackNC_InternalRegistry_getApplications(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long serial;
        ::IceGrid::ApplicationInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getApplications(serial, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, serial);
        }
    }

    Response response;
};

template<class T> Callback_InternalRegistry_getApplicationsPtr
newCallback_InternalRegistry_getApplications(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getApplications<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_getApplicationsPtr
newCallback_InternalRegistry_getApplications(T* instance, void (T::*cb)(const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getApplications<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_getApplications : public Callback_InternalRegistry_getApplications_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long, const CT&);

    Callback_InternalRegistry_getApplications(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long serial;
        ::IceGrid::ApplicationInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getApplications(serial, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, serial, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InternalRegistry_getApplicationsPtr
newCallback_InternalRegistry_getApplications(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getApplications<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_getApplicationsPtr
newCallback_InternalRegistry_getApplications(T* instance, void (T::*cb)(const ::IceGrid::ApplicationInfoSeq&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getApplications<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_getAdapters : public Callback_InternalRegistry_getAdapters_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::AdapterInfoSeq&, ::Ice::Long);

    CallbackNC_InternalRegistry_getAdapters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long serial;
        ::IceGrid::AdapterInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getAdapters(serial, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, serial);
        }
    }

    Response response;
};

template<class T> Callback_InternalRegistry_getAdaptersPtr
newCallback_InternalRegistry_getAdapters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::AdapterInfoSeq&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getAdapters<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_getAdaptersPtr
newCallback_InternalRegistry_getAdapters(T* instance, void (T::*cb)(const ::IceGrid::AdapterInfoSeq&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getAdapters<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_getAdapters : public Callback_InternalRegistry_getAdapters_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::AdapterInfoSeq&, ::Ice::Long, const CT&);

    Callback_InternalRegistry_getAdapters(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long serial;
        ::IceGrid::AdapterInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getAdapters(serial, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, serial, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InternalRegistry_getAdaptersPtr
newCallback_InternalRegistry_getAdapters(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::AdapterInfoSeq&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getAdapters<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_getAdaptersPtr
newCallback_InternalRegistry_getAdapters(T* instance, void (T::*cb)(const ::IceGrid::AdapterInfoSeq&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getAdapters<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_getObjects : public Callback_InternalRegistry_getObjects_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::IceGrid::ObjectInfoSeq&, ::Ice::Long);

    CallbackNC_InternalRegistry_getObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long serial;
        ::IceGrid::ObjectInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getObjects(serial, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret, serial);
        }
    }

    Response response;
};

template<class T> Callback_InternalRegistry_getObjectsPtr
newCallback_InternalRegistry_getObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ObjectInfoSeq&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getObjects<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_getObjectsPtr
newCallback_InternalRegistry_getObjects(T* instance, void (T::*cb)(const ::IceGrid::ObjectInfoSeq&, ::Ice::Long), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_getObjects<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_getObjects : public Callback_InternalRegistry_getObjects_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::IceGrid::ObjectInfoSeq&, ::Ice::Long, const CT&);

    Callback_InternalRegistry_getObjects(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::IceGrid::InternalRegistryPrx __proxy = ::IceGrid::InternalRegistryPrx::uncheckedCast(__result->getProxy());
        ::Ice::Long serial;
        ::IceGrid::ObjectInfoSeq __ret;
        try
        {
            __ret = __proxy->end_getObjects(serial, __result);
        }
        catch(::Ice::Exception& ex)
        {
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
            return;
        }
        if(response)
        {
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, serial, CT::dynamicCast(__result->getCookie()));
        }
    }

    Response response;
};

template<class T, typename CT> Callback_InternalRegistry_getObjectsPtr
newCallback_InternalRegistry_getObjects(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::IceGrid::ObjectInfoSeq&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_getObjectsPtr
newCallback_InternalRegistry_getObjects(T* instance, void (T::*cb)(const ::IceGrid::ObjectInfoSeq&, ::Ice::Long, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_getObjects<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_InternalRegistry_shutdown : public Callback_InternalRegistry_shutdown_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_InternalRegistry_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_shutdown<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_InternalRegistry_shutdown<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_InternalRegistry_shutdown : public Callback_InternalRegistry_shutdown_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_InternalRegistry_shutdown(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_shutdown<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_shutdown<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_InternalRegistry_shutdownPtr
newCallback_InternalRegistry_shutdown(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_InternalRegistry_shutdown<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
