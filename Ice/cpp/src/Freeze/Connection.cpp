// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Connection.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef FREEZE_API_EXPORTS
#   define FREEZE_API_EXPORTS
#endif
#include <Freeze/Connection.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}

namespace
{

const char* __Freeze__TransactionAlreadyInProgressException_name = "Freeze::TransactionAlreadyInProgressException";

}

Freeze::TransactionAlreadyInProgressException::TransactionAlreadyInProgressException(const char* __file, int __line) :
    ::Ice::LocalException(__file, __line)
{
}

Freeze::TransactionAlreadyInProgressException::~TransactionAlreadyInProgressException() throw()
{
}

::std::string
Freeze::TransactionAlreadyInProgressException::ice_name() const
{
    return __Freeze__TransactionAlreadyInProgressException_name;
}

Freeze::TransactionAlreadyInProgressException*
Freeze::TransactionAlreadyInProgressException::ice_clone() const
{
    return new TransactionAlreadyInProgressException(*this);
}

void
Freeze::TransactionAlreadyInProgressException::ice_throw() const
{
    throw *this;
}

namespace Ice
{
}

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* Freeze::upCast(::Freeze::Connection* p) { return p; }
