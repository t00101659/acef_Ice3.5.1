// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IceStorm.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_STORM_LIB_API_EXPORTS
#   define ICE_STORM_LIB_API_EXPORTS
#endif
#include <IceStorm/IceStorm.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/SliceChecksums.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __IceStorm__Topic__getName_name = "getName";

const ::std::string __IceStorm__Topic__getPublisher_name = "getPublisher";

const ::std::string __IceStorm__Topic__getNonReplicatedPublisher_name = "getNonReplicatedPublisher";

const ::std::string __IceStorm__Topic__subscribe_name = "subscribe";

const ::std::string __IceStorm__Topic__subscribeAndGetPublisher_name = "subscribeAndGetPublisher";

const ::std::string __IceStorm__Topic__unsubscribe_name = "unsubscribe";

const ::std::string __IceStorm__Topic__link_name = "link";

const ::std::string __IceStorm__Topic__unlink_name = "unlink";

const ::std::string __IceStorm__Topic__getLinkInfoSeq_name = "getLinkInfoSeq";

const ::std::string __IceStorm__Topic__getSubscribers_name = "getSubscribers";

const ::std::string __IceStorm__Topic__destroy_name = "destroy";

const ::std::string __IceStorm__TopicManager__create_name = "create";

const ::std::string __IceStorm__TopicManager__retrieve_name = "retrieve";

const ::std::string __IceStorm__TopicManager__retrieveAll_name = "retrieveAll";

const ::std::string __IceStorm__TopicManager__getSliceChecksums_name = "getSliceChecksums";

}

namespace
{

const char* __IceStorm__LinkExists_name = "IceStorm::LinkExists";

struct __F__IceStorm__LinkExists : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceStorm::LinkExists();
    }
};

class __F__IceStorm__LinkExists__Init
{
public:

    __F__IceStorm__LinkExists__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceStorm::LinkExists", new __F__IceStorm__LinkExists);
    }

    ~__F__IceStorm__LinkExists__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceStorm::LinkExists");
    }
};

const __F__IceStorm__LinkExists__Init __F__IceStorm__LinkExists__i;

}

IceStorm::LinkExists::LinkExists(const ::std::string& __ice_name) :
    ::Ice::UserException(),
    name(__ice_name)
{
}

IceStorm::LinkExists::~LinkExists() throw()
{
}

::std::string
IceStorm::LinkExists::ice_name() const
{
    return __IceStorm__LinkExists_name;
}

IceStorm::LinkExists*
IceStorm::LinkExists::ice_clone() const
{
    return new LinkExists(*this);
}

void
IceStorm::LinkExists::ice_throw() const
{
    throw *this;
}

void
IceStorm::LinkExists::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceStorm::LinkExists", -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
IceStorm::LinkExists::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const char* __IceStorm__NoSuchLink_name = "IceStorm::NoSuchLink";

struct __F__IceStorm__NoSuchLink : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceStorm::NoSuchLink();
    }
};

class __F__IceStorm__NoSuchLink__Init
{
public:

    __F__IceStorm__NoSuchLink__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceStorm::NoSuchLink", new __F__IceStorm__NoSuchLink);
    }

    ~__F__IceStorm__NoSuchLink__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceStorm::NoSuchLink");
    }
};

const __F__IceStorm__NoSuchLink__Init __F__IceStorm__NoSuchLink__i;

}

IceStorm::NoSuchLink::NoSuchLink(const ::std::string& __ice_name) :
    ::Ice::UserException(),
    name(__ice_name)
{
}

IceStorm::NoSuchLink::~NoSuchLink() throw()
{
}

::std::string
IceStorm::NoSuchLink::ice_name() const
{
    return __IceStorm__NoSuchLink_name;
}

IceStorm::NoSuchLink*
IceStorm::NoSuchLink::ice_clone() const
{
    return new NoSuchLink(*this);
}

void
IceStorm::NoSuchLink::ice_throw() const
{
    throw *this;
}

void
IceStorm::NoSuchLink::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceStorm::NoSuchLink", -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
IceStorm::NoSuchLink::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const char* __IceStorm__AlreadySubscribed_name = "IceStorm::AlreadySubscribed";

struct __F__IceStorm__AlreadySubscribed : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceStorm::AlreadySubscribed();
    }
};

class __F__IceStorm__AlreadySubscribed__Init
{
public:

    __F__IceStorm__AlreadySubscribed__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceStorm::AlreadySubscribed", new __F__IceStorm__AlreadySubscribed);
    }

    ~__F__IceStorm__AlreadySubscribed__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceStorm::AlreadySubscribed");
    }
};

const __F__IceStorm__AlreadySubscribed__Init __F__IceStorm__AlreadySubscribed__i;

}

IceStorm::AlreadySubscribed::~AlreadySubscribed() throw()
{
}

::std::string
IceStorm::AlreadySubscribed::ice_name() const
{
    return __IceStorm__AlreadySubscribed_name;
}

IceStorm::AlreadySubscribed*
IceStorm::AlreadySubscribed::ice_clone() const
{
    return new AlreadySubscribed(*this);
}

void
IceStorm::AlreadySubscribed::ice_throw() const
{
    throw *this;
}

void
IceStorm::AlreadySubscribed::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceStorm::AlreadySubscribed", -1, true);
    __os->endWriteSlice();
}

void
IceStorm::AlreadySubscribed::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __IceStorm__BadQoS_name = "IceStorm::BadQoS";

struct __F__IceStorm__BadQoS : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceStorm::BadQoS();
    }
};

class __F__IceStorm__BadQoS__Init
{
public:

    __F__IceStorm__BadQoS__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceStorm::BadQoS", new __F__IceStorm__BadQoS);
    }

    ~__F__IceStorm__BadQoS__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceStorm::BadQoS");
    }
};

const __F__IceStorm__BadQoS__Init __F__IceStorm__BadQoS__i;

}

IceStorm::BadQoS::BadQoS(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

IceStorm::BadQoS::~BadQoS() throw()
{
}

::std::string
IceStorm::BadQoS::ice_name() const
{
    return __IceStorm__BadQoS_name;
}

IceStorm::BadQoS*
IceStorm::BadQoS::ice_clone() const
{
    return new BadQoS(*this);
}

void
IceStorm::BadQoS::ice_throw() const
{
    throw *this;
}

void
IceStorm::BadQoS::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceStorm::BadQoS", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceStorm::BadQoS::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceStorm__TopicExists_name = "IceStorm::TopicExists";

struct __F__IceStorm__TopicExists : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceStorm::TopicExists();
    }
};

class __F__IceStorm__TopicExists__Init
{
public:

    __F__IceStorm__TopicExists__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceStorm::TopicExists", new __F__IceStorm__TopicExists);
    }

    ~__F__IceStorm__TopicExists__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceStorm::TopicExists");
    }
};

const __F__IceStorm__TopicExists__Init __F__IceStorm__TopicExists__i;

}

IceStorm::TopicExists::TopicExists(const ::std::string& __ice_name) :
    ::Ice::UserException(),
    name(__ice_name)
{
}

IceStorm::TopicExists::~TopicExists() throw()
{
}

::std::string
IceStorm::TopicExists::ice_name() const
{
    return __IceStorm__TopicExists_name;
}

IceStorm::TopicExists*
IceStorm::TopicExists::ice_clone() const
{
    return new TopicExists(*this);
}

void
IceStorm::TopicExists::ice_throw() const
{
    throw *this;
}

void
IceStorm::TopicExists::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceStorm::TopicExists", -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
IceStorm::TopicExists::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const char* __IceStorm__NoSuchTopic_name = "IceStorm::NoSuchTopic";

struct __F__IceStorm__NoSuchTopic : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceStorm::NoSuchTopic();
    }
};

class __F__IceStorm__NoSuchTopic__Init
{
public:

    __F__IceStorm__NoSuchTopic__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceStorm::NoSuchTopic", new __F__IceStorm__NoSuchTopic);
    }

    ~__F__IceStorm__NoSuchTopic__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceStorm::NoSuchTopic");
    }
};

const __F__IceStorm__NoSuchTopic__Init __F__IceStorm__NoSuchTopic__i;

}

IceStorm::NoSuchTopic::NoSuchTopic(const ::std::string& __ice_name) :
    ::Ice::UserException(),
    name(__ice_name)
{
}

IceStorm::NoSuchTopic::~NoSuchTopic() throw()
{
}

::std::string
IceStorm::NoSuchTopic::ice_name() const
{
    return __IceStorm__NoSuchTopic_name;
}

IceStorm::NoSuchTopic*
IceStorm::NoSuchTopic::ice_clone() const
{
    return new NoSuchTopic(*this);
}

void
IceStorm::NoSuchTopic::ice_throw() const
{
    throw *this;
}

void
IceStorm::NoSuchTopic::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceStorm::NoSuchTopic", -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
IceStorm::NoSuchTopic::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace Ice
{
#ifdef ICE_HAS_DECLSPEC_IMPORT_EXPORT
template struct ICE_STORM_LIB_API StreamWriter< ::IceStorm::LinkInfo, ::IceInternal::BasicStream>;
template struct ICE_STORM_LIB_API StreamReader< ::IceStorm::LinkInfo, ::IceInternal::BasicStream>;
#endif
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::IceStorm::Topic;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::IceStorm::upCast(::IceProxy::IceStorm::Topic* p) { return p; }

void
::IceProxy::IceStorm::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::Topic>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IceStorm::Topic;
        v->__copyFrom(proxy);
    }
}

::std::string
IceProxy::IceStorm::Topic::getName(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__getName_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__getName_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            return __del->getName(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_getName(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__getName_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__getName_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__getName_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::IceStorm::Topic::end_getName(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__getName_name);
    ::std::string __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::ObjectPrx
IceProxy::IceStorm::Topic::getPublisher(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__getPublisher_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__getPublisher_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            return __del->getPublisher(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_getPublisher(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__getPublisher_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__getPublisher_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__getPublisher_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::ObjectPrx
IceProxy::IceStorm::Topic::end_getPublisher(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__getPublisher_name);
    ::Ice::ObjectPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::ObjectPrx
IceProxy::IceStorm::Topic::getNonReplicatedPublisher(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__getNonReplicatedPublisher_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__getNonReplicatedPublisher_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            return __del->getNonReplicatedPublisher(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_getNonReplicatedPublisher(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__getNonReplicatedPublisher_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__getNonReplicatedPublisher_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__getNonReplicatedPublisher_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::ObjectPrx
IceProxy::IceStorm::Topic::end_getNonReplicatedPublisher(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__getNonReplicatedPublisher_name);
    ::Ice::ObjectPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IceStorm::Topic::subscribe(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__subscribe_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            __del->subscribe(theQoS, subscriber, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_subscribe(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__subscribe_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__subscribe_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(theQoS);
        __os->write(subscriber);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceStorm::Topic::end_subscribe(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __IceStorm__Topic__subscribe_name);
}

::Ice::ObjectPrx
IceProxy::IceStorm::Topic::subscribeAndGetPublisher(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__subscribeAndGetPublisher_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__subscribeAndGetPublisher_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            return __del->subscribeAndGetPublisher(theQoS, subscriber, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_subscribeAndGetPublisher(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__subscribeAndGetPublisher_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__subscribeAndGetPublisher_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__subscribeAndGetPublisher_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(theQoS);
        __os->write(subscriber);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::ObjectPrx
IceProxy::IceStorm::Topic::end_subscribeAndGetPublisher(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__subscribeAndGetPublisher_name);
    ::Ice::ObjectPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IceStorm::AlreadySubscribed&)
            {
                throw;
            }
            catch(const ::IceStorm::BadQoS&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IceStorm::Topic::unsubscribe(const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__unsubscribe_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            __del->unsubscribe(subscriber, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_unsubscribe(const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__unsubscribe_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__unsubscribe_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(subscriber);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceStorm::Topic::end_unsubscribe(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __IceStorm__Topic__unsubscribe_name);
}

void
IceProxy::IceStorm::Topic::link(const ::IceStorm::TopicPrx& linkTo, ::Ice::Int cost, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__link_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__link_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            __del->link(linkTo, cost, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_link(const ::IceStorm::TopicPrx& linkTo, ::Ice::Int cost, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__link_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__link_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__link_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(linkTo);
        __os->write(cost);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceStorm::Topic::end_link(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__link_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IceStorm::LinkExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IceStorm::Topic::unlink(const ::IceStorm::TopicPrx& linkTo, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__unlink_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__unlink_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            __del->unlink(linkTo, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_unlink(const ::IceStorm::TopicPrx& linkTo, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__unlink_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__unlink_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__unlink_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(linkTo);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceStorm::Topic::end_unlink(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__unlink_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IceStorm::NoSuchLink&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IceStorm::LinkInfoSeq
IceProxy::IceStorm::Topic::getLinkInfoSeq(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__getLinkInfoSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__getLinkInfoSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            return __del->getLinkInfoSeq(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_getLinkInfoSeq(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__getLinkInfoSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__getLinkInfoSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__getLinkInfoSeq_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IceStorm::LinkInfoSeq
IceProxy::IceStorm::Topic::end_getLinkInfoSeq(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__getLinkInfoSeq_name);
    ::IceStorm::LinkInfoSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::IdentitySeq
IceProxy::IceStorm::Topic::getSubscribers(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__getSubscribers_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__Topic__getSubscribers_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            return __del->getSubscribers(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_getSubscribers(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__Topic__getSubscribers_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__getSubscribers_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__getSubscribers_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::IdentitySeq
IceProxy::IceStorm::Topic::end_getSubscribers(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__Topic__getSubscribers_name);
    ::Ice::IdentitySeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IceStorm::Topic::destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__Topic__destroy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::Topic* __del = dynamic_cast< ::IceDelegate::IceStorm::Topic*>(__delBase.get());
            __del->destroy(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::Topic::begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__Topic__destroy_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__Topic__destroy_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceStorm::Topic::end_destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __IceStorm__Topic__destroy_name);
}

const ::std::string&
IceProxy::IceStorm::Topic::ice_staticId()
{
    return ::IceStorm::Topic::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IceStorm::Topic::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IceStorm::Topic);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IceStorm::Topic::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IceStorm::Topic);
}

::IceProxy::Ice::Object*
IceProxy::IceStorm::Topic::__newInstance() const
{
    return new Topic;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::IceStorm::TopicManager;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::IceStorm::upCast(::IceProxy::IceStorm::TopicManager* p) { return p; }

void
::IceProxy::IceStorm::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IceStorm::TopicManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IceStorm::TopicManager;
        v->__copyFrom(proxy);
    }
}

::IceStorm::TopicPrx
IceProxy::IceStorm::TopicManager::create(const ::std::string& name, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__TopicManager__create_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__TopicManager__create_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::TopicManager* __del = dynamic_cast< ::IceDelegate::IceStorm::TopicManager*>(__delBase.get());
            return __del->create(name, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::TopicManager::begin_create(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__TopicManager__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__TopicManager__create_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__TopicManager__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IceStorm::TopicPrx
IceProxy::IceStorm::TopicManager::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__TopicManager__create_name);
    ::IceStorm::TopicPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IceStorm::TopicExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IceStorm::TopicPrx
IceProxy::IceStorm::TopicManager::retrieve(const ::std::string& name, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__TopicManager__retrieve_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__TopicManager__retrieve_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::TopicManager* __del = dynamic_cast< ::IceDelegate::IceStorm::TopicManager*>(__delBase.get());
            return __del->retrieve(name, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::TopicManager::begin_retrieve(const ::std::string& name, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__TopicManager__retrieve_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__TopicManager__retrieve_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__TopicManager__retrieve_name, ::Ice::Nonmutating, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IceStorm::TopicPrx
IceProxy::IceStorm::TopicManager::end_retrieve(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__TopicManager__retrieve_name);
    ::IceStorm::TopicPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IceStorm::NoSuchTopic&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IceStorm::TopicDict
IceProxy::IceStorm::TopicManager::retrieveAll(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__TopicManager__retrieveAll_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__TopicManager__retrieveAll_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::TopicManager* __del = dynamic_cast< ::IceDelegate::IceStorm::TopicManager*>(__delBase.get());
            return __del->retrieveAll(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::TopicManager::begin_retrieveAll(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__TopicManager__retrieveAll_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__TopicManager__retrieveAll_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__TopicManager__retrieveAll_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IceStorm::TopicDict
IceProxy::IceStorm::TopicManager::end_retrieveAll(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__TopicManager__retrieveAll_name);
    ::IceStorm::TopicDict __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::SliceChecksumDict
IceProxy::IceStorm::TopicManager::getSliceChecksums(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceStorm__TopicManager__getSliceChecksums_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceStorm__TopicManager__getSliceChecksums_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceStorm::TopicManager* __del = dynamic_cast< ::IceDelegate::IceStorm::TopicManager*>(__delBase.get());
            return __del->getSliceChecksums(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceStorm::TopicManager::begin_getSliceChecksums(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceStorm__TopicManager__getSliceChecksums_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceStorm__TopicManager__getSliceChecksums_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceStorm__TopicManager__getSliceChecksums_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::SliceChecksumDict
IceProxy::IceStorm::TopicManager::end_getSliceChecksums(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceStorm__TopicManager__getSliceChecksums_name);
    ::Ice::SliceChecksumDict __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::IceStorm::TopicManager::ice_staticId()
{
    return ::IceStorm::TopicManager::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IceStorm::TopicManager::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IceStorm::TopicManager);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IceStorm::TopicManager::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IceStorm::TopicManager);
}

::IceProxy::Ice::Object*
IceProxy::IceStorm::TopicManager::__newInstance() const
{
    return new TopicManager;
}

::std::string
IceDelegateM::IceStorm::Topic::getName(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__getName_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::ObjectPrx
IceDelegateM::IceStorm::Topic::getPublisher(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__getPublisher_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::ObjectPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::ObjectPrx
IceDelegateM::IceStorm::Topic::getNonReplicatedPublisher(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__getNonReplicatedPublisher_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::ObjectPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IceStorm::Topic::subscribe(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__subscribe_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(theQoS);
        __os->write(subscriber);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::ObjectPrx
IceDelegateM::IceStorm::Topic::subscribeAndGetPublisher(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__subscribeAndGetPublisher_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(theQoS);
        __os->write(subscriber);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::ObjectPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IceStorm::AlreadySubscribed&)
            {
                throw;
            }
            catch(const ::IceStorm::BadQoS&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IceStorm::Topic::unsubscribe(const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__unsubscribe_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(subscriber);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::IceStorm::Topic::link(const ::IceStorm::TopicPrx& linkTo, ::Ice::Int cost, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__link_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(linkTo);
        __os->write(cost);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IceStorm::LinkExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IceStorm::Topic::unlink(const ::IceStorm::TopicPrx& linkTo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__unlink_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(linkTo);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IceStorm::NoSuchLink&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IceStorm::LinkInfoSeq
IceDelegateM::IceStorm::Topic::getLinkInfoSeq(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__getLinkInfoSeq_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IceStorm::LinkInfoSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::IdentitySeq
IceDelegateM::IceStorm::Topic::getSubscribers(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__getSubscribers_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::IdentitySeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IceStorm::Topic::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__Topic__destroy_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::IceStorm::TopicPrx
IceDelegateM::IceStorm::TopicManager::create(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__TopicManager__create_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::IceStorm::TopicPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IceStorm::TopicExists&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IceStorm::TopicPrx
IceDelegateM::IceStorm::TopicManager::retrieve(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__TopicManager__retrieve_name, ::Ice::Nonmutating, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(name);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::IceStorm::TopicPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IceStorm::NoSuchTopic&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IceStorm::TopicDict
IceDelegateM::IceStorm::TopicManager::retrieveAll(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__TopicManager__retrieveAll_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IceStorm::TopicDict __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::SliceChecksumDict
IceDelegateM::IceStorm::TopicManager::getSliceChecksums(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceStorm__TopicManager__getSliceChecksums_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::SliceChecksumDict __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateD::IceStorm::Topic::getName(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getName(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__getName_name, ::Ice::Nonmutating, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPrx
IceDelegateD::IceStorm::Topic::getPublisher(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::ObjectPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getPublisher(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::ObjectPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__getPublisher_name, ::Ice::Nonmutating, __context);
    ::Ice::ObjectPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPrx
IceDelegateD::IceStorm::Topic::getNonReplicatedPublisher(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::ObjectPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getNonReplicatedPublisher(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::ObjectPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__getNonReplicatedPublisher_name, ::Ice::Nonmutating, __context);
    ::Ice::ObjectPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::IceStorm::Topic::subscribe(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::IceStorm::QoS& __p_theQoS, const ::Ice::ObjectPrx& __p_subscriber, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_theQoS(__p_theQoS),
            _m_subscriber(__p_subscriber)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->subscribe(_m_theQoS, _m_subscriber, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::IceStorm::QoS& _m_theQoS;
        const ::Ice::ObjectPrx& _m_subscriber;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__subscribe_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(theQoS, subscriber, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::ObjectPrx
IceDelegateD::IceStorm::Topic::subscribeAndGetPublisher(const ::IceStorm::QoS& theQoS, const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::ObjectPrx& __result, const ::IceStorm::QoS& __p_theQoS, const ::Ice::ObjectPrx& __p_subscriber, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_theQoS(__p_theQoS),
            _m_subscriber(__p_subscriber)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->subscribeAndGetPublisher(_m_theQoS, _m_subscriber, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Ice::ObjectPrx& _result;
        const ::IceStorm::QoS& _m_theQoS;
        const ::Ice::ObjectPrx& _m_subscriber;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__subscribeAndGetPublisher_name, ::Ice::Normal, __context);
    ::Ice::ObjectPrx __result;
    try
    {
        _DirectI __direct(__result, theQoS, subscriber, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IceStorm::AlreadySubscribed&)
    {
        throw;
    }
    catch(const ::IceStorm::BadQoS&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::IceStorm::Topic::unsubscribe(const ::Ice::ObjectPrx& subscriber, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::ObjectPrx& __p_subscriber, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_subscriber(__p_subscriber)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->unsubscribe(_m_subscriber, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::ObjectPrx& _m_subscriber;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__unsubscribe_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(subscriber, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::IceStorm::Topic::link(const ::IceStorm::TopicPrx& linkTo, ::Ice::Int cost, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::IceStorm::TopicPrx& __p_linkTo, ::Ice::Int __p_cost, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_linkTo(__p_linkTo),
            _m_cost(__p_cost)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->link(_m_linkTo, _m_cost, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::IceStorm::TopicPrx& _m_linkTo;
        ::Ice::Int _m_cost;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__link_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(linkTo, cost, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IceStorm::LinkExists&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::IceStorm::Topic::unlink(const ::IceStorm::TopicPrx& linkTo, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::IceStorm::TopicPrx& __p_linkTo, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_linkTo(__p_linkTo)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->unlink(_m_linkTo, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::IceStorm::TopicPrx& _m_linkTo;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__unlink_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(linkTo, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IceStorm::NoSuchLink&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::IceStorm::LinkInfoSeq
IceDelegateD::IceStorm::Topic::getLinkInfoSeq(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IceStorm::LinkInfoSeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getLinkInfoSeq(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IceStorm::LinkInfoSeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__getLinkInfoSeq_name, ::Ice::Nonmutating, __context);
    ::IceStorm::LinkInfoSeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::IdentitySeq
IceDelegateD::IceStorm::Topic::getSubscribers(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::IdentitySeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getSubscribers(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::IdentitySeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__getSubscribers_name, ::Ice::Normal, __context);
    ::Ice::IdentitySeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::IceStorm::Topic::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::Topic* servant = dynamic_cast< ::IceStorm::Topic*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->destroy(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__Topic__destroy_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::IceStorm::TopicPrx
IceDelegateD::IceStorm::TopicManager::create(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IceStorm::TopicPrx& __result, const ::std::string& __p_name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(__p_name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::TopicManager* servant = dynamic_cast< ::IceStorm::TopicManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->create(_m_name, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::IceStorm::TopicPrx& _result;
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__TopicManager__create_name, ::Ice::Normal, __context);
    ::IceStorm::TopicPrx __result;
    try
    {
        _DirectI __direct(__result, name, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IceStorm::TopicExists&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IceStorm::TopicPrx
IceDelegateD::IceStorm::TopicManager::retrieve(const ::std::string& name, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IceStorm::TopicPrx& __result, const ::std::string& __p_name, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_name(__p_name)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::TopicManager* servant = dynamic_cast< ::IceStorm::TopicManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->retrieve(_m_name, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::IceStorm::TopicPrx& _result;
        const ::std::string& _m_name;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__TopicManager__retrieve_name, ::Ice::Nonmutating, __context);
    ::IceStorm::TopicPrx __result;
    try
    {
        _DirectI __direct(__result, name, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IceStorm::NoSuchTopic&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IceStorm::TopicDict
IceDelegateD::IceStorm::TopicManager::retrieveAll(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IceStorm::TopicDict& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::TopicManager* servant = dynamic_cast< ::IceStorm::TopicManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->retrieveAll(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IceStorm::TopicDict& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__TopicManager__retrieveAll_name, ::Ice::Nonmutating, __context);
    ::IceStorm::TopicDict __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::SliceChecksumDict
IceDelegateD::IceStorm::TopicManager::getSliceChecksums(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::SliceChecksumDict& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceStorm::TopicManager* servant = dynamic_cast< ::IceStorm::TopicManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getSliceChecksums(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::SliceChecksumDict& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceStorm__TopicManager__getSliceChecksums_name, ::Ice::Nonmutating, __context);
    ::Ice::SliceChecksumDict __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

ICE_DECLSPEC_EXPORT ::Ice::Object* IceStorm::upCast(::IceStorm::Topic* p) { return p; }

namespace
{
const ::std::string __IceStorm__Topic_ids[2] =
{
    "::Ice::Object",
    "::IceStorm::Topic"
};

}

bool
IceStorm::Topic::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IceStorm__Topic_ids, __IceStorm__Topic_ids + 2, _s);
}

::std::vector< ::std::string>
IceStorm::Topic::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IceStorm__Topic_ids[0], &__IceStorm__Topic_ids[2]);
}

const ::std::string&
IceStorm::Topic::ice_id(const ::Ice::Current&) const
{
    return __IceStorm__Topic_ids[1];
}

const ::std::string&
IceStorm::Topic::ice_staticId()
{
    return __IceStorm__Topic_ids[1];
}

::Ice::DispatchStatus
IceStorm::Topic::___getName(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::std::string __ret = getName(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::Topic::___getPublisher(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::ObjectPrx __ret = getPublisher(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::Topic::___getNonReplicatedPublisher(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::ObjectPrx __ret = getNonReplicatedPublisher(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::Topic::___subscribe(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IceStorm::QoS theQoS;
    ::Ice::ObjectPrx subscriber;
    __is->read(theQoS);
    __is->read(subscriber);
    __inS.endReadParams();
    subscribe(theQoS, subscriber, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::Topic::___subscribeAndGetPublisher(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IceStorm::QoS theQoS;
    ::Ice::ObjectPrx subscriber;
    __is->read(theQoS);
    __is->read(subscriber);
    __inS.endReadParams();
    try
    {
        ::Ice::ObjectPrx __ret = subscribeAndGetPublisher(theQoS, subscriber, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::IceStorm::AlreadySubscribed& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::IceStorm::BadQoS& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IceStorm::Topic::___unsubscribe(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::ObjectPrx subscriber;
    __is->read(subscriber);
    __inS.endReadParams();
    unsubscribe(subscriber, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::Topic::___link(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IceStorm::TopicPrx linkTo;
    ::Ice::Int cost;
    __is->read(linkTo);
    __is->read(cost);
    __inS.endReadParams();
    try
    {
        link(linkTo, cost, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::IceStorm::LinkExists& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IceStorm::Topic::___unlink(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IceStorm::TopicPrx linkTo;
    __is->read(linkTo);
    __inS.endReadParams();
    try
    {
        unlink(linkTo, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::IceStorm::NoSuchLink& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IceStorm::Topic::___getLinkInfoSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::IceStorm::LinkInfoSeq __ret = getLinkInfoSeq(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::Topic::___getSubscribers(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Ice::IdentitySeq __ret = getSubscribers(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::Topic::___destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __IceStorm__Topic_all[] =
{
    "destroy",
    "getLinkInfoSeq",
    "getName",
    "getNonReplicatedPublisher",
    "getPublisher",
    "getSubscribers",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "link",
    "subscribe",
    "subscribeAndGetPublisher",
    "unlink",
    "unsubscribe"
};

}

::Ice::DispatchStatus
IceStorm::Topic::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IceStorm__Topic_all, __IceStorm__Topic_all + 15, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IceStorm__Topic_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___getLinkInfoSeq(in, current);
        }
        case 2:
        {
            return ___getName(in, current);
        }
        case 3:
        {
            return ___getNonReplicatedPublisher(in, current);
        }
        case 4:
        {
            return ___getPublisher(in, current);
        }
        case 5:
        {
            return ___getSubscribers(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
        case 10:
        {
            return ___link(in, current);
        }
        case 11:
        {
            return ___subscribe(in, current);
        }
        case 12:
        {
            return ___subscribeAndGetPublisher(in, current);
        }
        case 13:
        {
            return ___unlink(in, current);
        }
        case 14:
        {
            return ___unsubscribe(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IceStorm::Topic::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IceStorm::Topic::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
IceStorm::__patch(TopicPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IceStorm::TopicPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IceStorm::Topic::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* IceStorm::upCast(::IceStorm::TopicManager* p) { return p; }

namespace
{
const ::std::string __IceStorm__TopicManager_ids[2] =
{
    "::Ice::Object",
    "::IceStorm::TopicManager"
};

}

bool
IceStorm::TopicManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IceStorm__TopicManager_ids, __IceStorm__TopicManager_ids + 2, _s);
}

::std::vector< ::std::string>
IceStorm::TopicManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IceStorm__TopicManager_ids[0], &__IceStorm__TopicManager_ids[2]);
}

const ::std::string&
IceStorm::TopicManager::ice_id(const ::Ice::Current&) const
{
    return __IceStorm__TopicManager_ids[1];
}

const ::std::string&
IceStorm::TopicManager::ice_staticId()
{
    return __IceStorm__TopicManager_ids[1];
}

::Ice::DispatchStatus
IceStorm::TopicManager::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    __is->read(name);
    __inS.endReadParams();
    try
    {
        ::IceStorm::TopicPrx __ret = create(name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::IceStorm::TopicExists& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IceStorm::TopicManager::___retrieve(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string name;
    __is->read(name);
    __inS.endReadParams();
    try
    {
        ::IceStorm::TopicPrx __ret = retrieve(name, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::IceStorm::NoSuchTopic& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IceStorm::TopicManager::___retrieveAll(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::IceStorm::TopicDict __ret = retrieveAll(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceStorm::TopicManager::___getSliceChecksums(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::SliceChecksumDict __ret = getSliceChecksums(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __IceStorm__TopicManager_all[] =
{
    "create",
    "getSliceChecksums",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "retrieve",
    "retrieveAll"
};

}

::Ice::DispatchStatus
IceStorm::TopicManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IceStorm__TopicManager_all, __IceStorm__TopicManager_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IceStorm__TopicManager_all)
    {
        case 0:
        {
            return ___create(in, current);
        }
        case 1:
        {
            return ___getSliceChecksums(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___retrieve(in, current);
        }
        case 7:
        {
            return ___retrieveAll(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IceStorm::TopicManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IceStorm::TopicManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
IceStorm::__patch(TopicManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IceStorm::TopicManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IceStorm::TopicManager::ice_staticId(), v);
    }
}

namespace
{

const char* __sliceChecksums[] =
{
    "::IceStorm::AlreadySubscribed", "5a82e77b38f02f3118c536f9446a889e",
    "::IceStorm::BadQoS", "44f2de592dd62e3f7f4ffdf043692d",
    "::IceStorm::LinkExists", "e11768febd56a8813729ce69be6c4c2",
    "::IceStorm::LinkInfo", "d0e073e5e0925ec95656f71d572e2e13",
    "::IceStorm::LinkInfoSeq", "a8921e43838692bbe6ca63f3dcf9b6",
    "::IceStorm::NoSuchLink", "fd8f652776796bffca2df1a3baf455a3",
    "::IceStorm::NoSuchTopic", "7a9479a5c39cdd32335d722bbc971176",
    "::IceStorm::QoS", "3e27cb32bc95cca7b013efbf5c254b35",
    "::IceStorm::Topic", "8d43d11b24e2f41378faab0c9819e86",
    "::IceStorm::TopicDict", "fff078a98be068c52d9e1d7d8f6df2a",
    "::IceStorm::TopicExists", "38e6913833539b8d616d114d4e7b28d",
    "::IceStorm::TopicManager", "ffc1baf19222891f8b432be6551fed5",
    0
};
const IceInternal::SliceChecksumInit __sliceChecksumInit(__sliceChecksums);

}
