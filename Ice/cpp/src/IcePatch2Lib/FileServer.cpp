// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `FileServer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_PATCH2_API_EXPORTS
#   define ICE_PATCH2_API_EXPORTS
#endif
#include <IcePatch2/FileServer.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __IcePatch2__FileServer__getFileInfoSeq_name = "getFileInfoSeq";

const ::std::string __IcePatch2__FileServer__getChecksumSeq_name = "getChecksumSeq";

const ::std::string __IcePatch2__FileServer__getChecksum_name = "getChecksum";

const ::std::string __IcePatch2__FileServer__getFileCompressed_name = "getFileCompressed";

}

namespace
{

const char* __IcePatch2__PartitionOutOfRangeException_name = "IcePatch2::PartitionOutOfRangeException";

struct __F__IcePatch2__PartitionOutOfRangeException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IcePatch2::PartitionOutOfRangeException();
    }
};

class __F__IcePatch2__PartitionOutOfRangeException__Init
{
public:

    __F__IcePatch2__PartitionOutOfRangeException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IcePatch2::PartitionOutOfRangeException", new __F__IcePatch2__PartitionOutOfRangeException);
    }

    ~__F__IcePatch2__PartitionOutOfRangeException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IcePatch2::PartitionOutOfRangeException");
    }
};

const __F__IcePatch2__PartitionOutOfRangeException__Init __F__IcePatch2__PartitionOutOfRangeException__i;

}

IcePatch2::PartitionOutOfRangeException::~PartitionOutOfRangeException() throw()
{
}

::std::string
IcePatch2::PartitionOutOfRangeException::ice_name() const
{
    return __IcePatch2__PartitionOutOfRangeException_name;
}

IcePatch2::PartitionOutOfRangeException*
IcePatch2::PartitionOutOfRangeException::ice_clone() const
{
    return new PartitionOutOfRangeException(*this);
}

void
IcePatch2::PartitionOutOfRangeException::ice_throw() const
{
    throw *this;
}

void
IcePatch2::PartitionOutOfRangeException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IcePatch2::PartitionOutOfRangeException", -1, true);
    __os->endWriteSlice();
}

void
IcePatch2::PartitionOutOfRangeException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __IcePatch2__FileAccessException_name = "IcePatch2::FileAccessException";

struct __F__IcePatch2__FileAccessException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IcePatch2::FileAccessException();
    }
};

class __F__IcePatch2__FileAccessException__Init
{
public:

    __F__IcePatch2__FileAccessException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IcePatch2::FileAccessException", new __F__IcePatch2__FileAccessException);
    }

    ~__F__IcePatch2__FileAccessException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IcePatch2::FileAccessException");
    }
};

const __F__IcePatch2__FileAccessException__Init __F__IcePatch2__FileAccessException__i;

}

IcePatch2::FileAccessException::FileAccessException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

IcePatch2::FileAccessException::~FileAccessException() throw()
{
}

::std::string
IcePatch2::FileAccessException::ice_name() const
{
    return __IcePatch2__FileAccessException_name;
}

IcePatch2::FileAccessException*
IcePatch2::FileAccessException::ice_clone() const
{
    return new FileAccessException(*this);
}

void
IcePatch2::FileAccessException::ice_throw() const
{
    throw *this;
}

void
IcePatch2::FileAccessException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IcePatch2::FileAccessException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IcePatch2::FileAccessException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}

IceAsync::IcePatch2::AMD_FileServer_getFileCompressed::AMD_FileServer_getFileCompressed(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::IcePatch2::AMD_FileServer_getFileCompressed::ice_response(const ::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __ret)
{
    if(__validateResponse(true))
    {
        try
        {
            ::IceInternal::BasicStream* __os = __startWriteParams(::Ice::DefaultFormat);
            __os->write(__ret);
            __endWriteParams(true);
        }
        catch(const ::Ice::Exception& __ex)
        {
            __exception(__ex);
            return;
        }
        __response();
    }
}

void
IceAsync::IcePatch2::AMD_FileServer_getFileCompressed::ice_exception(const ::std::exception& ex)
{
    if(const ::IcePatch2::FileAccessException* __ex = dynamic_cast<const ::IcePatch2::FileAccessException*>(&ex))
    {
        if(__validateResponse(false))
        {
            __writeUserException(*__ex, ::Ice::DefaultFormat);
            __response();
        }
    }
    else
    {
        ::IceInternal::IncomingAsync::ice_exception(ex);
    }
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::IcePatch2::FileServer;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::IcePatch2::upCast(::IceProxy::IcePatch2::FileServer* p) { return p; }

void
::IceProxy::IcePatch2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IcePatch2::FileServer>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IcePatch2::FileServer;
        v->__copyFrom(proxy);
    }
}

::IcePatch2::FileInfoSeq
IceProxy::IcePatch2::FileServer::getFileInfoSeq(::Ice::Int partition, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IcePatch2__FileServer__getFileInfoSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IcePatch2__FileServer__getFileInfoSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IcePatch2::FileServer* __del = dynamic_cast< ::IceDelegate::IcePatch2::FileServer*>(__delBase.get());
            return __del->getFileInfoSeq(partition, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IcePatch2::FileServer::begin_getFileInfoSeq(::Ice::Int partition, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IcePatch2__FileServer__getFileInfoSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IcePatch2__FileServer__getFileInfoSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__IcePatch2__FileServer__getFileInfoSeq_name, ::Ice::Nonmutating, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(partition);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IcePatch2::FileInfoSeq
IceProxy::IcePatch2::FileServer::end_getFileInfoSeq(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IcePatch2__FileServer__getFileInfoSeq_name);
    ::IcePatch2::FileInfoSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IcePatch2::PartitionOutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::IcePatch2::ByteSeqSeq
IceProxy::IcePatch2::FileServer::getChecksumSeq(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IcePatch2__FileServer__getChecksumSeq_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IcePatch2__FileServer__getChecksumSeq_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IcePatch2::FileServer* __del = dynamic_cast< ::IceDelegate::IcePatch2::FileServer*>(__delBase.get());
            return __del->getChecksumSeq(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IcePatch2::FileServer::begin_getChecksumSeq(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IcePatch2__FileServer__getChecksumSeq_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IcePatch2__FileServer__getChecksumSeq_name, __del, __cookie);
    try
    {
        __result->__prepare(__IcePatch2__FileServer__getChecksumSeq_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::IcePatch2::ByteSeqSeq
IceProxy::IcePatch2::FileServer::end_getChecksumSeq(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IcePatch2__FileServer__getChecksumSeq_name);
    ::IcePatch2::ByteSeqSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::ByteSeq
IceProxy::IcePatch2::FileServer::getChecksum(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IcePatch2__FileServer__getChecksum_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IcePatch2__FileServer__getChecksum_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IcePatch2::FileServer* __del = dynamic_cast< ::IceDelegate::IcePatch2::FileServer*>(__delBase.get());
            return __del->getChecksum(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IcePatch2::FileServer::begin_getChecksum(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IcePatch2__FileServer__getChecksum_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IcePatch2__FileServer__getChecksum_name, __del, __cookie);
    try
    {
        __result->__prepare(__IcePatch2__FileServer__getChecksum_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::ByteSeq
IceProxy::IcePatch2::FileServer::end_getChecksum(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IcePatch2__FileServer__getChecksum_name);
    ::Ice::ByteSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::ByteSeq
IceProxy::IcePatch2::FileServer::getFileCompressed(const ::std::string& path, ::Ice::Int pos, ::Ice::Int num, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IcePatch2__FileServer__getFileCompressed_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IcePatch2__FileServer__getFileCompressed_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IcePatch2::FileServer* __del = dynamic_cast< ::IceDelegate::IcePatch2::FileServer*>(__delBase.get());
            return __del->getFileCompressed(path, pos, num, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IcePatch2::FileServer::begin_getFileCompressed(const ::std::string& path, ::Ice::Int pos, ::Ice::Int num, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IcePatch2__FileServer__getFileCompressed_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IcePatch2__FileServer__getFileCompressed_name, __del, __cookie);
    try
    {
        __result->__prepare(__IcePatch2__FileServer__getFileCompressed_name, ::Ice::Nonmutating, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __os->write(pos);
        __os->write(num);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::ByteSeq
IceProxy::IcePatch2::FileServer::end_getFileCompressed(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IcePatch2__FileServer__getFileCompressed_name);
    ::Ice::ByteSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IcePatch2::FileAccessException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void IceProxy::IcePatch2::FileServer::___end_getFileCompressed(::std::pair<const ::Ice::Byte*, const ::Ice::Byte*>& __ret, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IcePatch2__FileServer__getFileCompressed_name);
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::IcePatch2::FileAccessException&)
        {
            throw;
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__startReadParams();
    __is->read(__ret);
    __result->__endReadParams();
}

const ::std::string&
IceProxy::IcePatch2::FileServer::ice_staticId()
{
    return ::IcePatch2::FileServer::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IcePatch2::FileServer::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IcePatch2::FileServer);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IcePatch2::FileServer::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IcePatch2::FileServer);
}

::IceProxy::Ice::Object*
IceProxy::IcePatch2::FileServer::__newInstance() const
{
    return new FileServer;
}

::IcePatch2::FileInfoSeq
IceDelegateM::IcePatch2::FileServer::getFileInfoSeq(::Ice::Int partition, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IcePatch2__FileServer__getFileInfoSeq_name, ::Ice::Nonmutating, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(partition);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::IcePatch2::FileInfoSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IcePatch2::PartitionOutOfRangeException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IcePatch2::ByteSeqSeq
IceDelegateM::IcePatch2::FileServer::getChecksumSeq(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IcePatch2__FileServer__getChecksumSeq_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::IcePatch2::ByteSeqSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::ByteSeq
IceDelegateM::IcePatch2::FileServer::getChecksum(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IcePatch2__FileServer__getChecksum_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::ByteSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::ByteSeq
IceDelegateM::IcePatch2::FileServer::getFileCompressed(const ::std::string& path, ::Ice::Int pos, ::Ice::Int num, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IcePatch2__FileServer__getFileCompressed_name, ::Ice::Nonmutating, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(path);
        __os->write(pos);
        __os->write(num);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::ByteSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IcePatch2::FileAccessException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::IcePatch2::FileInfoSeq
IceDelegateD::IcePatch2::FileServer::getFileInfoSeq(::Ice::Int partition, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IcePatch2::FileInfoSeq& __result, ::Ice::Int __p_partition, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_partition(__p_partition)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IcePatch2::FileServer* servant = dynamic_cast< ::IcePatch2::FileServer*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->getFileInfoSeq(_m_partition, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::IcePatch2::FileInfoSeq& _result;
        ::Ice::Int _m_partition;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IcePatch2__FileServer__getFileInfoSeq_name, ::Ice::Nonmutating, __context);
    ::IcePatch2::FileInfoSeq __result;
    try
    {
        _DirectI __direct(__result, partition, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IcePatch2::PartitionOutOfRangeException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::IcePatch2::ByteSeqSeq
IceDelegateD::IcePatch2::FileServer::getChecksumSeq(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::IcePatch2::ByteSeqSeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IcePatch2::FileServer* servant = dynamic_cast< ::IcePatch2::FileServer*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getChecksumSeq(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::IcePatch2::ByteSeqSeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IcePatch2__FileServer__getChecksumSeq_name, ::Ice::Nonmutating, __context);
    ::IcePatch2::ByteSeqSeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ByteSeq
IceDelegateD::IcePatch2::FileServer::getChecksum(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::ByteSeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IcePatch2::FileServer* servant = dynamic_cast< ::IcePatch2::FileServer*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getChecksum(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::ByteSeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IcePatch2__FileServer__getChecksum_name, ::Ice::Nonmutating, __context);
    ::Ice::ByteSeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ByteSeq
IceDelegateD::IcePatch2::FileServer::getFileCompressed(const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, ::IceInternal::InvocationObserver&)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
    return ::Ice::ByteSeq(); // to avoid a warning with some compilers;
}

ICE_DECLSPEC_EXPORT ::Ice::Object* IcePatch2::upCast(::IcePatch2::FileServer* p) { return p; }

namespace
{
const ::std::string __IcePatch2__FileServer_ids[2] =
{
    "::Ice::Object",
    "::IcePatch2::FileServer"
};

}

bool
IcePatch2::FileServer::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IcePatch2__FileServer_ids, __IcePatch2__FileServer_ids + 2, _s);
}

::std::vector< ::std::string>
IcePatch2::FileServer::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IcePatch2__FileServer_ids[0], &__IcePatch2__FileServer_ids[2]);
}

const ::std::string&
IcePatch2::FileServer::ice_id(const ::Ice::Current&) const
{
    return __IcePatch2__FileServer_ids[1];
}

const ::std::string&
IcePatch2::FileServer::ice_staticId()
{
    return __IcePatch2__FileServer_ids[1];
}

::Ice::DispatchStatus
IcePatch2::FileServer::___getFileInfoSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::Int partition;
    __is->read(partition);
    __inS.endReadParams();
    try
    {
        ::IcePatch2::FileInfoSeq __ret = getFileInfoSeq(partition, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::IcePatch2::PartitionOutOfRangeException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IcePatch2::FileServer::___getChecksumSeq(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::IcePatch2::ByteSeqSeq __ret = getChecksumSeq(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IcePatch2::FileServer::___getChecksum(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::ByteSeq __ret = getChecksum(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IcePatch2::FileServer::___getFileCompressed(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string path;
    ::Ice::Int pos;
    ::Ice::Int num;
    __is->read(path);
    __is->read(pos);
    __is->read(num);
    __inS.endReadParams();
    ::IcePatch2::AMD_FileServer_getFileCompressedPtr __cb = new IceAsync::IcePatch2::AMD_FileServer_getFileCompressed(__inS);
    try
    {
        getFileCompressed_async(__cb, path, pos, num, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

namespace
{
const ::std::string __IcePatch2__FileServer_all[] =
{
    "getChecksum",
    "getChecksumSeq",
    "getFileCompressed",
    "getFileInfoSeq",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
IcePatch2::FileServer::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IcePatch2__FileServer_all, __IcePatch2__FileServer_all + 8, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IcePatch2__FileServer_all)
    {
        case 0:
        {
            return ___getChecksum(in, current);
        }
        case 1:
        {
            return ___getChecksumSeq(in, current);
        }
        case 2:
        {
            return ___getFileCompressed(in, current);
        }
        case 3:
        {
            return ___getFileInfoSeq(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IcePatch2::FileServer::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IcePatch2::FileServer::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
IcePatch2::__patch(FileServerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IcePatch2::FileServerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IcePatch2::FileServer::ice_staticId(), v);
    }
}
