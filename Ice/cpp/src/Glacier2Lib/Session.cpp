// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Session.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#include <Glacier2/Session.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/SlicedData.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Glacier2__Session__destroy_name = "destroy";

const ::std::string __Glacier2__StringSet__add_name = "add";

const ::std::string __Glacier2__StringSet__remove_name = "remove";

const ::std::string __Glacier2__StringSet__get_name = "get";

const ::std::string __Glacier2__IdentitySet__add_name = "add";

const ::std::string __Glacier2__IdentitySet__remove_name = "remove";

const ::std::string __Glacier2__IdentitySet__get_name = "get";

const ::std::string __Glacier2__SessionControl__categories_name = "categories";

const ::std::string __Glacier2__SessionControl__adapterIds_name = "adapterIds";

const ::std::string __Glacier2__SessionControl__identities_name = "identities";

const ::std::string __Glacier2__SessionControl__getSessionTimeout_name = "getSessionTimeout";

const ::std::string __Glacier2__SessionControl__destroy_name = "destroy";

const ::std::string __Glacier2__SessionManager__create_name = "create";

const ::std::string __Glacier2__SSLSessionManager__create_name = "create";

}

namespace
{

const char* __Glacier2__CannotCreateSessionException_name = "Glacier2::CannotCreateSessionException";

struct __F__Glacier2__CannotCreateSessionException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Glacier2::CannotCreateSessionException();
    }
};

class __F__Glacier2__CannotCreateSessionException__Init
{
public:

    __F__Glacier2__CannotCreateSessionException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Glacier2::CannotCreateSessionException", new __F__Glacier2__CannotCreateSessionException);
    }

    ~__F__Glacier2__CannotCreateSessionException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Glacier2::CannotCreateSessionException");
    }
};

const __F__Glacier2__CannotCreateSessionException__Init __F__Glacier2__CannotCreateSessionException__i;

}

Glacier2::CannotCreateSessionException::CannotCreateSessionException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

Glacier2::CannotCreateSessionException::~CannotCreateSessionException() throw()
{
}

::std::string
Glacier2::CannotCreateSessionException::ice_name() const
{
    return __Glacier2__CannotCreateSessionException_name;
}

Glacier2::CannotCreateSessionException*
Glacier2::CannotCreateSessionException::ice_clone() const
{
    return new CannotCreateSessionException(*this);
}

void
Glacier2::CannotCreateSessionException::ice_throw() const
{
    throw *this;
}

void
Glacier2::CannotCreateSessionException::__write(::IceInternal::BasicStream* __os) const
{
    __os->startWriteException(__slicedData);
    __writeImpl(__os);
    __os->endWriteException();
}

void
Glacier2::CannotCreateSessionException::__read(::IceInternal::BasicStream* __is)
{
    __is->startReadException();
    __readImpl(__is);
    __slicedData = __is->endReadException(true);
}

void
Glacier2::CannotCreateSessionException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Glacier2::CannotCreateSessionException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
Glacier2::CannotCreateSessionException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::Session;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::Session* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::Session>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::Session;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Glacier2::Session::destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__Session__destroy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::Session* __del = dynamic_cast< ::IceDelegate::Glacier2::Session*>(__delBase.get());
            __del->destroy(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::Session::begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__Session__destroy_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__Session__destroy_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Glacier2::Session::end_destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Glacier2__Session__destroy_name);
}

const ::std::string&
IceProxy::Glacier2::Session::ice_staticId()
{
    return ::Glacier2::Session::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::Session::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::Session);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::Session::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::Session);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::Session::__newInstance() const
{
    return new Session;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::StringSet;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::StringSet* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::StringSet>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::StringSet;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Glacier2::StringSet::add(const ::Ice::StringSeq& additions, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__StringSet__add_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::StringSet* __del = dynamic_cast< ::IceDelegate::Glacier2::StringSet*>(__delBase.get());
            __del->add(additions, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::StringSet::begin_add(const ::Ice::StringSeq& additions, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__StringSet__add_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__StringSet__add_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(additions);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Glacier2::StringSet::end_add(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Glacier2__StringSet__add_name);
}

void
IceProxy::Glacier2::StringSet::remove(const ::Ice::StringSeq& deletions, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__StringSet__remove_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::StringSet* __del = dynamic_cast< ::IceDelegate::Glacier2::StringSet*>(__delBase.get());
            __del->remove(deletions, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::StringSet::begin_remove(const ::Ice::StringSeq& deletions, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__StringSet__remove_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__StringSet__remove_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(deletions);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Glacier2::StringSet::end_remove(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Glacier2__StringSet__remove_name);
}

::Ice::StringSeq
IceProxy::Glacier2::StringSet::get(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__StringSet__get_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__StringSet__get_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::StringSet* __del = dynamic_cast< ::IceDelegate::Glacier2::StringSet*>(__delBase.get());
            return __del->get(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::StringSet::begin_get(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__StringSet__get_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__StringSet__get_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__StringSet__get_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::StringSeq
IceProxy::Glacier2::StringSet::end_get(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__StringSet__get_name);
    ::Ice::StringSeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Glacier2::StringSet::ice_staticId()
{
    return ::Glacier2::StringSet::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::StringSet::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::StringSet);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::StringSet::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::StringSet);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::StringSet::__newInstance() const
{
    return new StringSet;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::IdentitySet;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::IdentitySet* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::IdentitySet>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::IdentitySet;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::Glacier2::IdentitySet::add(const ::Ice::IdentitySeq& additions, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__IdentitySet__add_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::IdentitySet* __del = dynamic_cast< ::IceDelegate::Glacier2::IdentitySet*>(__delBase.get());
            __del->add(additions, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::IdentitySet::begin_add(const ::Ice::IdentitySeq& additions, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__IdentitySet__add_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__IdentitySet__add_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(additions);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Glacier2::IdentitySet::end_add(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Glacier2__IdentitySet__add_name);
}

void
IceProxy::Glacier2::IdentitySet::remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__IdentitySet__remove_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::IdentitySet* __del = dynamic_cast< ::IceDelegate::Glacier2::IdentitySet*>(__delBase.get());
            __del->remove(deletions, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::IdentitySet::begin_remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__IdentitySet__remove_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__IdentitySet__remove_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(deletions);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Glacier2::IdentitySet::end_remove(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Glacier2__IdentitySet__remove_name);
}

::Ice::IdentitySeq
IceProxy::Glacier2::IdentitySet::get(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__IdentitySet__get_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__IdentitySet__get_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::IdentitySet* __del = dynamic_cast< ::IceDelegate::Glacier2::IdentitySet*>(__delBase.get());
            return __del->get(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::IdentitySet::begin_get(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__IdentitySet__get_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__IdentitySet__get_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__IdentitySet__get_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::IdentitySeq
IceProxy::Glacier2::IdentitySet::end_get(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__IdentitySet__get_name);
    ::Ice::IdentitySeq __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Glacier2::IdentitySet::ice_staticId()
{
    return ::Glacier2::IdentitySet::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::IdentitySet::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::IdentitySet);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::IdentitySet::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::IdentitySet);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::IdentitySet::__newInstance() const
{
    return new IdentitySet;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::SessionControl;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::SessionControl* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SessionControl>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::SessionControl;
        v->__copyFrom(proxy);
    }
}

::Glacier2::StringSetPrx
IceProxy::Glacier2::SessionControl::categories(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SessionControl__categories_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__SessionControl__categories_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SessionControl* __del = dynamic_cast< ::IceDelegate::Glacier2::SessionControl*>(__delBase.get());
            return __del->categories(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SessionControl::begin_categories(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__SessionControl__categories_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SessionControl__categories_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SessionControl__categories_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Glacier2::StringSetPrx
IceProxy::Glacier2::SessionControl::end_categories(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__SessionControl__categories_name);
    ::Glacier2::StringSetPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Glacier2::StringSetPrx
IceProxy::Glacier2::SessionControl::adapterIds(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SessionControl__adapterIds_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__SessionControl__adapterIds_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SessionControl* __del = dynamic_cast< ::IceDelegate::Glacier2::SessionControl*>(__delBase.get());
            return __del->adapterIds(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SessionControl::begin_adapterIds(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__SessionControl__adapterIds_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SessionControl__adapterIds_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SessionControl__adapterIds_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Glacier2::StringSetPrx
IceProxy::Glacier2::SessionControl::end_adapterIds(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__SessionControl__adapterIds_name);
    ::Glacier2::StringSetPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Glacier2::IdentitySetPrx
IceProxy::Glacier2::SessionControl::identities(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SessionControl__identities_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__SessionControl__identities_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SessionControl* __del = dynamic_cast< ::IceDelegate::Glacier2::SessionControl*>(__delBase.get());
            return __del->identities(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SessionControl::begin_identities(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__SessionControl__identities_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SessionControl__identities_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SessionControl__identities_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Glacier2::IdentitySetPrx
IceProxy::Glacier2::SessionControl::end_identities(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__SessionControl__identities_name);
    ::Glacier2::IdentitySetPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

::Ice::Int
IceProxy::Glacier2::SessionControl::getSessionTimeout(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SessionControl__getSessionTimeout_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__SessionControl__getSessionTimeout_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SessionControl* __del = dynamic_cast< ::IceDelegate::Glacier2::SessionControl*>(__delBase.get());
            return __del->getSessionTimeout(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SessionControl::begin_getSessionTimeout(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__SessionControl__getSessionTimeout_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SessionControl__getSessionTimeout_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SessionControl__getSessionTimeout_name, ::Ice::Idempotent, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::Glacier2::SessionControl::end_getSessionTimeout(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__SessionControl__getSessionTimeout_name);
    ::Ice::Int __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::Glacier2::SessionControl::destroy(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SessionControl__destroy_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SessionControl* __del = dynamic_cast< ::IceDelegate::Glacier2::SessionControl*>(__delBase.get());
            __del->destroy(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SessionControl::begin_destroy(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SessionControl__destroy_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SessionControl__destroy_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Glacier2::SessionControl::end_destroy(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Glacier2__SessionControl__destroy_name);
}

const ::std::string&
IceProxy::Glacier2::SessionControl::ice_staticId()
{
    return ::Glacier2::SessionControl::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::SessionControl::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::SessionControl);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::SessionControl::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::SessionControl);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::SessionControl::__newInstance() const
{
    return new SessionControl;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::SessionManager;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::SessionManager* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SessionManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::SessionManager;
        v->__copyFrom(proxy);
    }
}

::Glacier2::SessionPrx
IceProxy::Glacier2::SessionManager::create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SessionManager__create_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__SessionManager__create_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SessionManager* __del = dynamic_cast< ::IceDelegate::Glacier2::SessionManager*>(__delBase.get());
            return __del->create(userId, control, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SessionManager::begin_create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__SessionManager__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SessionManager__create_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SessionManager__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::SlicedFormat);
        __os->write(userId);
        __os->write(control);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Glacier2::SessionPrx
IceProxy::Glacier2::SessionManager::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__SessionManager__create_name);
    ::Glacier2::SessionPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Glacier2::CannotCreateSessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Glacier2::SessionManager::ice_staticId()
{
    return ::Glacier2::SessionManager::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::SessionManager::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::SessionManager);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::SessionManager::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::SessionManager);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::SessionManager::__newInstance() const
{
    return new SessionManager;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::SSLSessionManager;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::SSLSessionManager* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SSLSessionManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::SSLSessionManager;
        v->__copyFrom(proxy);
    }
}

::Glacier2::SessionPrx
IceProxy::Glacier2::SSLSessionManager::create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SSLSessionManager__create_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__SSLSessionManager__create_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SSLSessionManager* __del = dynamic_cast< ::IceDelegate::Glacier2::SSLSessionManager*>(__delBase.get());
            return __del->create(info, control, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SSLSessionManager::begin_create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__SSLSessionManager__create_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SSLSessionManager__create_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SSLSessionManager__create_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::SlicedFormat);
        __os->write(info);
        __os->write(control);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Glacier2::SessionPrx
IceProxy::Glacier2::SSLSessionManager::end_create(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__SSLSessionManager__create_name);
    ::Glacier2::SessionPrx __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Glacier2::CannotCreateSessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Glacier2::SSLSessionManager::ice_staticId()
{
    return ::Glacier2::SSLSessionManager::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::SSLSessionManager::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::SSLSessionManager);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::SSLSessionManager::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::SSLSessionManager);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::SSLSessionManager::__newInstance() const
{
    return new SSLSessionManager;
}

void
IceDelegateM::Glacier2::Session::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__Session__destroy_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Glacier2::StringSet::add(const ::Ice::StringSeq& additions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__StringSet__add_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(additions);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Glacier2::StringSet::remove(const ::Ice::StringSeq& deletions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__StringSet__remove_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(deletions);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::StringSeq
IceDelegateM::Glacier2::StringSet::get(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__StringSet__get_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::StringSeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Glacier2::IdentitySet::add(const ::Ice::IdentitySeq& additions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__IdentitySet__add_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(additions);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::Glacier2::IdentitySet::remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__IdentitySet__remove_name, ::Ice::Idempotent, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(deletions);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::IdentitySeq
IceDelegateM::Glacier2::IdentitySet::get(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__IdentitySet__get_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::IdentitySeq __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Glacier2::StringSetPrx
IceDelegateM::Glacier2::SessionControl::categories(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SessionControl__categories_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Glacier2::StringSetPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Glacier2::StringSetPrx
IceDelegateM::Glacier2::SessionControl::adapterIds(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SessionControl__adapterIds_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Glacier2::StringSetPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Glacier2::IdentitySetPrx
IceDelegateM::Glacier2::SessionControl::identities(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SessionControl__identities_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Glacier2::IdentitySetPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::Glacier2::SessionControl::getSessionTimeout(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SessionControl__getSessionTimeout_name, ::Ice::Idempotent, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Glacier2::SessionControl::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SessionControl__destroy_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Glacier2::SessionPrx
IceDelegateM::Glacier2::SessionManager::create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SessionManager__create_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::SlicedFormat);
        __os->write(userId);
        __os->write(control);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Glacier2::SessionPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Glacier2::CannotCreateSessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Glacier2::SessionPrx
IceDelegateM::Glacier2::SSLSessionManager::create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SSLSessionManager__create_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::SlicedFormat);
        __os->write(info);
        __os->write(control);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Glacier2::SessionPrx __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Glacier2::CannotCreateSessionException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::Glacier2::Session::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::Session* servant = dynamic_cast< ::Glacier2::Session*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->destroy(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__Session__destroy_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Glacier2::StringSet::add(const ::Ice::StringSeq& additions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::StringSeq& __p_additions, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_additions(__p_additions)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::StringSet* servant = dynamic_cast< ::Glacier2::StringSet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->add(_m_additions, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::StringSeq& _m_additions;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__StringSet__add_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(additions, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Glacier2::StringSet::remove(const ::Ice::StringSeq& deletions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::StringSeq& __p_deletions, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_deletions(__p_deletions)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::StringSet* servant = dynamic_cast< ::Glacier2::StringSet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->remove(_m_deletions, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::StringSeq& _m_deletions;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__StringSet__remove_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(deletions, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::StringSeq
IceDelegateD::Glacier2::StringSet::get(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::StringSeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::StringSet* servant = dynamic_cast< ::Glacier2::StringSet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->get(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::StringSeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__StringSet__get_name, ::Ice::Idempotent, __context);
    ::Ice::StringSeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Glacier2::IdentitySet::add(const ::Ice::IdentitySeq& additions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::IdentitySeq& __p_additions, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_additions(__p_additions)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::IdentitySet* servant = dynamic_cast< ::Glacier2::IdentitySet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->add(_m_additions, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::IdentitySeq& _m_additions;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__IdentitySet__add_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(additions, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::Glacier2::IdentitySet::remove(const ::Ice::IdentitySeq& deletions, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::IdentitySeq& __p_deletions, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_deletions(__p_deletions)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::IdentitySet* servant = dynamic_cast< ::Glacier2::IdentitySet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->remove(_m_deletions, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::IdentitySeq& _m_deletions;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__IdentitySet__remove_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(deletions, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::IdentitySeq
IceDelegateD::Glacier2::IdentitySet::get(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::IdentitySeq& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::IdentitySet* servant = dynamic_cast< ::Glacier2::IdentitySet*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->get(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::IdentitySeq& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__IdentitySet__get_name, ::Ice::Idempotent, __context);
    ::Ice::IdentitySeq __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Glacier2::StringSetPrx
IceDelegateD::Glacier2::SessionControl::categories(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Glacier2::StringSetPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SessionControl* servant = dynamic_cast< ::Glacier2::SessionControl*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->categories(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Glacier2::StringSetPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SessionControl__categories_name, ::Ice::Normal, __context);
    ::Glacier2::StringSetPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Glacier2::StringSetPrx
IceDelegateD::Glacier2::SessionControl::adapterIds(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Glacier2::StringSetPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SessionControl* servant = dynamic_cast< ::Glacier2::SessionControl*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->adapterIds(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Glacier2::StringSetPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SessionControl__adapterIds_name, ::Ice::Normal, __context);
    ::Glacier2::StringSetPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Glacier2::IdentitySetPrx
IceDelegateD::Glacier2::SessionControl::identities(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Glacier2::IdentitySetPrx& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SessionControl* servant = dynamic_cast< ::Glacier2::SessionControl*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->identities(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Glacier2::IdentitySetPrx& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SessionControl__identities_name, ::Ice::Normal, __context);
    ::Glacier2::IdentitySetPrx __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::Glacier2::SessionControl::getSessionTimeout(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SessionControl* servant = dynamic_cast< ::Glacier2::SessionControl*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getSessionTimeout(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SessionControl__getSessionTimeout_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Glacier2::SessionControl::destroy(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SessionControl* servant = dynamic_cast< ::Glacier2::SessionControl*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->destroy(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SessionControl__destroy_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Glacier2::SessionPrx
IceDelegateD::Glacier2::SessionManager::create(const ::std::string& userId, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Glacier2::SessionPrx& __result, const ::std::string& __p_userId, const ::Glacier2::SessionControlPrx& __p_control, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_userId(__p_userId),
            _m_control(__p_control)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SessionManager* servant = dynamic_cast< ::Glacier2::SessionManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->create(_m_userId, _m_control, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Glacier2::SessionPrx& _result;
        const ::std::string& _m_userId;
        const ::Glacier2::SessionControlPrx& _m_control;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SessionManager__create_name, ::Ice::Normal, __context);
    ::Glacier2::SessionPrx __result;
    try
    {
        _DirectI __direct(__result, userId, control, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Glacier2::CannotCreateSessionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Glacier2::SessionPrx
IceDelegateD::Glacier2::SSLSessionManager::create(const ::Glacier2::SSLInfo& info, const ::Glacier2::SessionControlPrx& control, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Glacier2::SessionPrx& __result, const ::Glacier2::SSLInfo& __p_info, const ::Glacier2::SessionControlPrx& __p_control, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_info(__p_info),
            _m_control(__p_control)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SSLSessionManager* servant = dynamic_cast< ::Glacier2::SSLSessionManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->create(_m_info, _m_control, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        ::Glacier2::SessionPrx& _result;
        const ::Glacier2::SSLInfo& _m_info;
        const ::Glacier2::SessionControlPrx& _m_control;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SSLSessionManager__create_name, ::Ice::Normal, __context);
    ::Glacier2::SessionPrx __result;
    try
    {
        _DirectI __direct(__result, info, control, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Glacier2::CannotCreateSessionException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::Session* p) { return p; }

namespace
{
const ::std::string __Glacier2__Session_ids[2] =
{
    "::Glacier2::Session",
    "::Ice::Object"
};

}

bool
Glacier2::Session::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__Session_ids, __Glacier2__Session_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::Session::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__Session_ids[0], &__Glacier2__Session_ids[2]);
}

const ::std::string&
Glacier2::Session::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__Session_ids[0];
}

const ::std::string&
Glacier2::Session::ice_staticId()
{
    return __Glacier2__Session_ids[0];
}

::Ice::DispatchStatus
Glacier2::Session::___destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Glacier2__Session_all[] =
{
    "destroy",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Glacier2::Session::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__Session_all, __Glacier2__Session_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__Session_all)
    {
        case 0:
        {
            return ___destroy(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::Session::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::Session::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(SessionPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::SessionPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::Session::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::StringSet* p) { return p; }

namespace
{
const ::std::string __Glacier2__StringSet_ids[2] =
{
    "::Glacier2::StringSet",
    "::Ice::Object"
};

}

bool
Glacier2::StringSet::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__StringSet_ids, __Glacier2__StringSet_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::StringSet::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__StringSet_ids[0], &__Glacier2__StringSet_ids[2]);
}

const ::std::string&
Glacier2::StringSet::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__StringSet_ids[0];
}

const ::std::string&
Glacier2::StringSet::ice_staticId()
{
    return __Glacier2__StringSet_ids[0];
}

::Ice::DispatchStatus
Glacier2::StringSet::___add(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::StringSeq additions;
    __is->read(additions);
    __inS.endReadParams();
    add(additions, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::StringSet::___remove(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::StringSeq deletions;
    __is->read(deletions);
    __inS.endReadParams();
    remove(deletions, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::StringSet::___get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::StringSeq __ret = get(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Glacier2__StringSet_all[] =
{
    "add",
    "get",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "remove"
};

}

::Ice::DispatchStatus
Glacier2::StringSet::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__StringSet_all, __Glacier2__StringSet_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__StringSet_all)
    {
        case 0:
        {
            return ___add(in, current);
        }
        case 1:
        {
            return ___get(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___remove(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::StringSet::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::StringSet::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(StringSetPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::StringSetPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::StringSet::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::IdentitySet* p) { return p; }

namespace
{
const ::std::string __Glacier2__IdentitySet_ids[2] =
{
    "::Glacier2::IdentitySet",
    "::Ice::Object"
};

}

bool
Glacier2::IdentitySet::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__IdentitySet_ids, __Glacier2__IdentitySet_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::IdentitySet::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__IdentitySet_ids[0], &__Glacier2__IdentitySet_ids[2]);
}

const ::std::string&
Glacier2::IdentitySet::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__IdentitySet_ids[0];
}

const ::std::string&
Glacier2::IdentitySet::ice_staticId()
{
    return __Glacier2__IdentitySet_ids[0];
}

::Ice::DispatchStatus
Glacier2::IdentitySet::___add(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::IdentitySeq additions;
    __is->read(additions);
    __inS.endReadParams();
    add(additions, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::IdentitySet::___remove(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::IdentitySeq deletions;
    __is->read(deletions);
    __inS.endReadParams();
    remove(deletions, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::IdentitySet::___get(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::IdentitySeq __ret = get(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Glacier2__IdentitySet_all[] =
{
    "add",
    "get",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "remove"
};

}

::Ice::DispatchStatus
Glacier2::IdentitySet::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__IdentitySet_all, __Glacier2__IdentitySet_all + 7, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__IdentitySet_all)
    {
        case 0:
        {
            return ___add(in, current);
        }
        case 1:
        {
            return ___get(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___remove(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::IdentitySet::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::IdentitySet::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(IdentitySetPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::IdentitySetPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::IdentitySet::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::SessionControl* p) { return p; }

namespace
{
const ::std::string __Glacier2__SessionControl_ids[2] =
{
    "::Glacier2::SessionControl",
    "::Ice::Object"
};

}

bool
Glacier2::SessionControl::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__SessionControl_ids, __Glacier2__SessionControl_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::SessionControl::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__SessionControl_ids[0], &__Glacier2__SessionControl_ids[2]);
}

const ::std::string&
Glacier2::SessionControl::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__SessionControl_ids[0];
}

const ::std::string&
Glacier2::SessionControl::ice_staticId()
{
    return __Glacier2__SessionControl_ids[0];
}

::Ice::DispatchStatus
Glacier2::SessionControl::___categories(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Glacier2::StringSetPrx __ret = categories(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::SessionControl::___adapterIds(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Glacier2::StringSetPrx __ret = adapterIds(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::SessionControl::___identities(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    ::Glacier2::IdentitySetPrx __ret = identities(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::SessionControl::___getSessionTimeout(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::Int __ret = getSessionTimeout(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Glacier2::SessionControl::___destroy(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    destroy(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __Glacier2__SessionControl_all[] =
{
    "adapterIds",
    "categories",
    "destroy",
    "getSessionTimeout",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "identities"
};

}

::Ice::DispatchStatus
Glacier2::SessionControl::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__SessionControl_all, __Glacier2__SessionControl_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__SessionControl_all)
    {
        case 0:
        {
            return ___adapterIds(in, current);
        }
        case 1:
        {
            return ___categories(in, current);
        }
        case 2:
        {
            return ___destroy(in, current);
        }
        case 3:
        {
            return ___getSessionTimeout(in, current);
        }
        case 4:
        {
            return ___ice_id(in, current);
        }
        case 5:
        {
            return ___ice_ids(in, current);
        }
        case 6:
        {
            return ___ice_isA(in, current);
        }
        case 7:
        {
            return ___ice_ping(in, current);
        }
        case 8:
        {
            return ___identities(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::SessionControl::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::SessionControl::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(SessionControlPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::SessionControlPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::SessionControl::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::SessionManager* p) { return p; }

namespace
{
const ::std::string __Glacier2__SessionManager_ids[2] =
{
    "::Glacier2::SessionManager",
    "::Ice::Object"
};

}

bool
Glacier2::SessionManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__SessionManager_ids, __Glacier2__SessionManager_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::SessionManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__SessionManager_ids[0], &__Glacier2__SessionManager_ids[2]);
}

const ::std::string&
Glacier2::SessionManager::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__SessionManager_ids[0];
}

const ::std::string&
Glacier2::SessionManager::ice_staticId()
{
    return __Glacier2__SessionManager_ids[0];
}

::Ice::DispatchStatus
Glacier2::SessionManager::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string userId;
    ::Glacier2::SessionControlPrx control;
    __is->read(userId);
    __is->read(control);
    __inS.endReadParams();
    try
    {
        ::Glacier2::SessionPrx __ret = create(userId, control, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::SlicedFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Glacier2::CannotCreateSessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::SlicedFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Glacier2__SessionManager_all[] =
{
    "create",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Glacier2::SessionManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__SessionManager_all, __Glacier2__SessionManager_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__SessionManager_all)
    {
        case 0:
        {
            return ___create(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::SessionManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::SessionManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(SessionManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::SessionManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::SessionManager::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::SSLSessionManager* p) { return p; }

namespace
{
const ::std::string __Glacier2__SSLSessionManager_ids[2] =
{
    "::Glacier2::SSLSessionManager",
    "::Ice::Object"
};

}

bool
Glacier2::SSLSessionManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__SSLSessionManager_ids, __Glacier2__SSLSessionManager_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::SSLSessionManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__SSLSessionManager_ids[0], &__Glacier2__SSLSessionManager_ids[2]);
}

const ::std::string&
Glacier2::SSLSessionManager::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__SSLSessionManager_ids[0];
}

const ::std::string&
Glacier2::SSLSessionManager::ice_staticId()
{
    return __Glacier2__SSLSessionManager_ids[0];
}

::Ice::DispatchStatus
Glacier2::SSLSessionManager::___create(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Glacier2::SSLInfo info;
    ::Glacier2::SessionControlPrx control;
    __is->read(info);
    __is->read(control);
    __inS.endReadParams();
    try
    {
        ::Glacier2::SessionPrx __ret = create(info, control, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::SlicedFormat);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Glacier2::CannotCreateSessionException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::SlicedFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Glacier2__SSLSessionManager_all[] =
{
    "create",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Glacier2::SSLSessionManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__SSLSessionManager_all, __Glacier2__SSLSessionManager_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__SSLSessionManager_all)
    {
        case 0:
        {
            return ___create(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::SSLSessionManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::SSLSessionManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(SSLSessionManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::SSLSessionManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::SSLSessionManager::ice_staticId(), v);
    }
}
