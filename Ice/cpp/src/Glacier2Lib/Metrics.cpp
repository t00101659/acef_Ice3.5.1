// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Metrics.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#include <Glacier2/Metrics.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::IceMX::SessionMetrics;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::IceMX::upCast(::IceProxy::IceMX::SessionMetrics* p) { return p; }

void
::IceProxy::IceMX::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IceMX::SessionMetrics>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IceMX::SessionMetrics;
        v->__copyFrom(proxy);
    }
}

const ::std::string&
IceProxy::IceMX::SessionMetrics::ice_staticId()
{
    return ::IceMX::SessionMetrics::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IceMX::SessionMetrics::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IceMX::SessionMetrics);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IceMX::SessionMetrics::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IceMX::SessionMetrics);
}

::IceProxy::Ice::Object*
IceProxy::IceMX::SessionMetrics::__newInstance() const
{
    return new SessionMetrics;
}

ICE_DECLSPEC_EXPORT ::Ice::Object* IceMX::upCast(::IceMX::SessionMetrics* p) { return p; }
::Ice::ObjectPtr
IceMX::SessionMetrics::ice_clone() const
{
    ::Ice::Object* __p = new SessionMetrics(*this);
    return __p;
}

namespace
{
const ::std::string __IceMX__SessionMetrics_ids[3] =
{
    "::Ice::Object",
    "::IceMX::Metrics",
    "::IceMX::SessionMetrics"
};

}

bool
IceMX::SessionMetrics::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IceMX__SessionMetrics_ids, __IceMX__SessionMetrics_ids + 3, _s);
}

::std::vector< ::std::string>
IceMX::SessionMetrics::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IceMX__SessionMetrics_ids[0], &__IceMX__SessionMetrics_ids[3]);
}

const ::std::string&
IceMX::SessionMetrics::ice_id(const ::Ice::Current&) const
{
    return __IceMX__SessionMetrics_ids[2];
}

const ::std::string&
IceMX::SessionMetrics::ice_staticId()
{
    return __IceMX__SessionMetrics_ids[2];
}

void
IceMX::SessionMetrics::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, false);
    __os->write(forwardedClient);
    __os->write(forwardedServer);
    __os->write(routingTableSize);
    __os->write(queuedClient);
    __os->write(queuedServer);
    __os->write(overriddenClient);
    __os->write(overriddenServer);
    __os->endWriteSlice();
    ::IceMX::Metrics::__writeImpl(__os);
}

void
IceMX::SessionMetrics::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(forwardedClient);
    __is->read(forwardedServer);
    __is->read(routingTableSize);
    __is->read(queuedClient);
    __is->read(queuedServer);
    __is->read(overriddenClient);
    __is->read(overriddenServer);
    __is->endReadSlice();
    ::IceMX::Metrics::__readImpl(__is);
}

namespace
{

class __F__IceMX__SessionMetrics : public ::Ice::ObjectFactory
{
public:
#ifndef NDEBUG
virtual ::Ice::ObjectPtr
    create(const ::std::string& type)
#else
virtual ::Ice::ObjectPtr
    create(const ::std::string&)
#endif
    {
        assert(type == ::IceMX::SessionMetrics::ice_staticId());
        return new ::IceMX::SessionMetrics;
    }

    virtual void
    destroy()
    {
    }
};
const ::Ice::ObjectFactoryPtr __F__IceMX__SessionMetrics_Ptr = new __F__IceMX__SessionMetrics;

class __F__IceMX__SessionMetrics__Init
{
public:

    __F__IceMX__SessionMetrics__Init()
    {
        ::IceInternal::factoryTable->addObjectFactory(::IceMX::SessionMetrics::ice_staticId(), __F__IceMX__SessionMetrics_Ptr);
    }

    ~__F__IceMX__SessionMetrics__Init()
    {
        ::IceInternal::factoryTable->removeObjectFactory(::IceMX::SessionMetrics::ice_staticId());
    }
};

const __F__IceMX__SessionMetrics__Init __F__IceMX__SessionMetrics__i;

}

const ::Ice::ObjectFactoryPtr&
IceMX::SessionMetrics::ice_factory()
{
    return __F__IceMX__SessionMetrics_Ptr;
}

void ICE_DECLSPEC_EXPORT 
IceMX::__patch(SessionMetricsPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IceMX::SessionMetricsPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IceMX::SessionMetrics::ice_staticId(), v);
    }
}
