// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `PermissionsVerifier.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef GLACIER2_API_EXPORTS
#   define GLACIER2_API_EXPORTS
#endif
#include <Glacier2/PermissionsVerifier.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/SlicedData.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __Glacier2__PermissionsVerifier__checkPermissions_name = "checkPermissions";

const ::std::string __Glacier2__SSLPermissionsVerifier__authorize_name = "authorize";

}

namespace
{

const char* __Glacier2__PermissionDeniedException_name = "Glacier2::PermissionDeniedException";

struct __F__Glacier2__PermissionDeniedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::Glacier2::PermissionDeniedException();
    }
};

class __F__Glacier2__PermissionDeniedException__Init
{
public:

    __F__Glacier2__PermissionDeniedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::Glacier2::PermissionDeniedException", new __F__Glacier2__PermissionDeniedException);
    }

    ~__F__Glacier2__PermissionDeniedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::Glacier2::PermissionDeniedException");
    }
};

const __F__Glacier2__PermissionDeniedException__Init __F__Glacier2__PermissionDeniedException__i;

}

Glacier2::PermissionDeniedException::PermissionDeniedException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

Glacier2::PermissionDeniedException::~PermissionDeniedException() throw()
{
}

::std::string
Glacier2::PermissionDeniedException::ice_name() const
{
    return __Glacier2__PermissionDeniedException_name;
}

Glacier2::PermissionDeniedException*
Glacier2::PermissionDeniedException::ice_clone() const
{
    return new PermissionDeniedException(*this);
}

void
Glacier2::PermissionDeniedException::ice_throw() const
{
    throw *this;
}

void
Glacier2::PermissionDeniedException::__write(::IceInternal::BasicStream* __os) const
{
    __os->startWriteException(__slicedData);
    __writeImpl(__os);
    __os->endWriteException();
}

void
Glacier2::PermissionDeniedException::__read(::IceInternal::BasicStream* __is)
{
    __is->startReadException();
    __readImpl(__is);
    __slicedData = __is->endReadException(true);
}

void
Glacier2::PermissionDeniedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::Glacier2::PermissionDeniedException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
Glacier2::PermissionDeniedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::PermissionsVerifier;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::PermissionsVerifier* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::PermissionsVerifier>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::PermissionsVerifier;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::Glacier2::PermissionsVerifier::checkPermissions(const ::std::string& userId, const ::std::string& password, ::std::string& reason, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__PermissionsVerifier__checkPermissions_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__PermissionsVerifier__checkPermissions_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::PermissionsVerifier* __del = dynamic_cast< ::IceDelegate::Glacier2::PermissionsVerifier*>(__delBase.get());
            return __del->checkPermissions(userId, password, reason, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::PermissionsVerifier::begin_checkPermissions(const ::std::string& userId, const ::std::string& password, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__PermissionsVerifier__checkPermissions_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__PermissionsVerifier__checkPermissions_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__PermissionsVerifier__checkPermissions_name, ::Ice::Nonmutating, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::SlicedFormat);
        __os->write(userId);
        __os->write(password);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Glacier2::PermissionsVerifier::end_checkPermissions(::std::string& reason, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__PermissionsVerifier__checkPermissions_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Glacier2::PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(reason);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Glacier2::PermissionsVerifier::ice_staticId()
{
    return ::Glacier2::PermissionsVerifier::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::PermissionsVerifier::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::PermissionsVerifier);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::PermissionsVerifier::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::PermissionsVerifier);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::PermissionsVerifier::__newInstance() const
{
    return new PermissionsVerifier;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::Glacier2::SSLPermissionsVerifier;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::Glacier2::upCast(::IceProxy::Glacier2::SSLPermissionsVerifier* p) { return p; }

void
::IceProxy::Glacier2::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::Glacier2::SSLPermissionsVerifier>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Glacier2::SSLPermissionsVerifier;
        v->__copyFrom(proxy);
    }
}

bool
IceProxy::Glacier2::SSLPermissionsVerifier::authorize(const ::Glacier2::SSLInfo& info, ::std::string& reason, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __Glacier2__SSLPermissionsVerifier__authorize_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Glacier2__SSLPermissionsVerifier__authorize_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Glacier2::SSLPermissionsVerifier* __del = dynamic_cast< ::IceDelegate::Glacier2::SSLPermissionsVerifier*>(__delBase.get());
            return __del->authorize(info, reason, __ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Glacier2::SSLPermissionsVerifier::begin_authorize(const ::Glacier2::SSLInfo& info, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Glacier2__SSLPermissionsVerifier__authorize_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Glacier2__SSLPermissionsVerifier__authorize_name, __del, __cookie);
    try
    {
        __result->__prepare(__Glacier2__SSLPermissionsVerifier__authorize_name, ::Ice::Nonmutating, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::SlicedFormat);
        __os->write(info);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

bool
IceProxy::Glacier2::SSLPermissionsVerifier::end_authorize(::std::string& reason, const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Glacier2__SSLPermissionsVerifier__authorize_name);
    bool __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Glacier2::PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(reason);
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

const ::std::string&
IceProxy::Glacier2::SSLPermissionsVerifier::ice_staticId()
{
    return ::Glacier2::SSLPermissionsVerifier::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Glacier2::SSLPermissionsVerifier::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Glacier2::SSLPermissionsVerifier);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Glacier2::SSLPermissionsVerifier::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Glacier2::SSLPermissionsVerifier);
}

::IceProxy::Ice::Object*
IceProxy::Glacier2::SSLPermissionsVerifier::__newInstance() const
{
    return new SSLPermissionsVerifier;
}

bool
IceDelegateM::Glacier2::PermissionsVerifier::checkPermissions(const ::std::string& userId, const ::std::string& password, ::std::string& reason, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__PermissionsVerifier__checkPermissions_name, ::Ice::Nonmutating, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::SlicedFormat);
        __os->write(userId);
        __os->write(password);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Glacier2::PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(reason);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateM::Glacier2::SSLPermissionsVerifier::authorize(const ::Glacier2::SSLInfo& info, ::std::string& reason, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Glacier2__SSLPermissionsVerifier__authorize_name, ::Ice::Nonmutating, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::SlicedFormat);
        __os->write(info);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    bool __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Glacier2::PermissionDeniedException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(reason);
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

bool
IceDelegateD::Glacier2::PermissionsVerifier::checkPermissions(const ::std::string& userId, const ::std::string& password, ::std::string& reason, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::std::string& __p_userId, const ::std::string& __p_password, ::std::string& __p_reason, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_userId(__p_userId),
            _m_password(__p_password),
            _m_reason(__p_reason)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::PermissionsVerifier* servant = dynamic_cast< ::Glacier2::PermissionsVerifier*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->checkPermissions(_m_userId, _m_password, _m_reason, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::std::string& _m_userId;
        const ::std::string& _m_password;
        ::std::string& _m_reason;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__PermissionsVerifier__checkPermissions_name, ::Ice::Nonmutating, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, userId, password, reason, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Glacier2::PermissionDeniedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

bool
IceDelegateD::Glacier2::SSLPermissionsVerifier::authorize(const ::Glacier2::SSLInfo& info, ::std::string& reason, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(bool& __result, const ::Glacier2::SSLInfo& __p_info, ::std::string& __p_reason, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_info(__p_info),
            _m_reason(__p_reason)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Glacier2::SSLPermissionsVerifier* servant = dynamic_cast< ::Glacier2::SSLPermissionsVerifier*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                _result = servant->authorize(_m_info, _m_reason, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        bool& _result;
        const ::Glacier2::SSLInfo& _m_info;
        ::std::string& _m_reason;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Glacier2__SSLPermissionsVerifier__authorize_name, ::Ice::Nonmutating, __context);
    bool __result;
    try
    {
        _DirectI __direct(__result, info, reason, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Glacier2::PermissionDeniedException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::PermissionsVerifier* p) { return p; }

namespace
{
const ::std::string __Glacier2__PermissionsVerifier_ids[2] =
{
    "::Glacier2::PermissionsVerifier",
    "::Ice::Object"
};

}

bool
Glacier2::PermissionsVerifier::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__PermissionsVerifier_ids, __Glacier2__PermissionsVerifier_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::PermissionsVerifier::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__PermissionsVerifier_ids[0], &__Glacier2__PermissionsVerifier_ids[2]);
}

const ::std::string&
Glacier2::PermissionsVerifier::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__PermissionsVerifier_ids[0];
}

const ::std::string&
Glacier2::PermissionsVerifier::ice_staticId()
{
    return __Glacier2__PermissionsVerifier_ids[0];
}

::Ice::DispatchStatus
Glacier2::PermissionsVerifier::___checkPermissions(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string userId;
    ::std::string password;
    __is->read(userId);
    __is->read(password);
    __inS.endReadParams();
    ::std::string reason;
    try
    {
        bool __ret = checkPermissions(userId, password, reason, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::SlicedFormat);
        __os->write(reason);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Glacier2::PermissionDeniedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::SlicedFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Glacier2__PermissionsVerifier_all[] =
{
    "checkPermissions",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Glacier2::PermissionsVerifier::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__PermissionsVerifier_all, __Glacier2__PermissionsVerifier_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__PermissionsVerifier_all)
    {
        case 0:
        {
            return ___checkPermissions(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::PermissionsVerifier::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::PermissionsVerifier::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(PermissionsVerifierPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::PermissionsVerifierPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::PermissionsVerifier::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* Glacier2::upCast(::Glacier2::SSLPermissionsVerifier* p) { return p; }

namespace
{
const ::std::string __Glacier2__SSLPermissionsVerifier_ids[2] =
{
    "::Glacier2::SSLPermissionsVerifier",
    "::Ice::Object"
};

}

bool
Glacier2::SSLPermissionsVerifier::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Glacier2__SSLPermissionsVerifier_ids, __Glacier2__SSLPermissionsVerifier_ids + 2, _s);
}

::std::vector< ::std::string>
Glacier2::SSLPermissionsVerifier::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Glacier2__SSLPermissionsVerifier_ids[0], &__Glacier2__SSLPermissionsVerifier_ids[2]);
}

const ::std::string&
Glacier2::SSLPermissionsVerifier::ice_id(const ::Ice::Current&) const
{
    return __Glacier2__SSLPermissionsVerifier_ids[0];
}

const ::std::string&
Glacier2::SSLPermissionsVerifier::ice_staticId()
{
    return __Glacier2__SSLPermissionsVerifier_ids[0];
}

::Ice::DispatchStatus
Glacier2::SSLPermissionsVerifier::___authorize(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Glacier2::SSLInfo info;
    __is->read(info);
    __inS.endReadParams();
    ::std::string reason;
    try
    {
        bool __ret = authorize(info, reason, __current);
        ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::SlicedFormat);
        __os->write(reason);
        __os->write(__ret);
        __inS.__endWriteParams(true);
        return ::Ice::DispatchOK;
    }
    catch(const ::Glacier2::PermissionDeniedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::SlicedFormat);
    }
    return ::Ice::DispatchUserException;
}

namespace
{
const ::std::string __Glacier2__SSLPermissionsVerifier_all[] =
{
    "authorize",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

}

::Ice::DispatchStatus
Glacier2::SSLPermissionsVerifier::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__Glacier2__SSLPermissionsVerifier_all, __Glacier2__SSLPermissionsVerifier_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Glacier2__SSLPermissionsVerifier_all)
    {
        case 0:
        {
            return ___authorize(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Glacier2::SSLPermissionsVerifier::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
Glacier2::SSLPermissionsVerifier::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
Glacier2::__patch(SSLPermissionsVerifierPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::Glacier2::SSLPermissionsVerifierPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::Glacier2::SSLPermissionsVerifier::ice_staticId(), v);
    }
}
