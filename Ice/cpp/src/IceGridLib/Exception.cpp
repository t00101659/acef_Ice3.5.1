// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Exception.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_GRID_API_EXPORTS
#   define ICE_GRID_API_EXPORTS
#endif
#include <IceGrid/Exception.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/LocalException.h>
#include <Ice/SliceChecksums.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const char* __IceGrid__ApplicationNotExistException_name = "IceGrid::ApplicationNotExistException";

struct __F__IceGrid__ApplicationNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ApplicationNotExistException();
    }
};

class __F__IceGrid__ApplicationNotExistException__Init
{
public:

    __F__IceGrid__ApplicationNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ApplicationNotExistException", new __F__IceGrid__ApplicationNotExistException);
    }

    ~__F__IceGrid__ApplicationNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ApplicationNotExistException");
    }
};

const __F__IceGrid__ApplicationNotExistException__Init __F__IceGrid__ApplicationNotExistException__i;

}

IceGrid::ApplicationNotExistException::ApplicationNotExistException(const ::std::string& __ice_name) :
    ::Ice::UserException(),
    name(__ice_name)
{
}

IceGrid::ApplicationNotExistException::~ApplicationNotExistException() throw()
{
}

::std::string
IceGrid::ApplicationNotExistException::ice_name() const
{
    return __IceGrid__ApplicationNotExistException_name;
}

IceGrid::ApplicationNotExistException*
IceGrid::ApplicationNotExistException::ice_clone() const
{
    return new ApplicationNotExistException(*this);
}

void
IceGrid::ApplicationNotExistException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ApplicationNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ApplicationNotExistException", -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
IceGrid::ApplicationNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__ServerNotExistException_name = "IceGrid::ServerNotExistException";

struct __F__IceGrid__ServerNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ServerNotExistException();
    }
};

class __F__IceGrid__ServerNotExistException__Init
{
public:

    __F__IceGrid__ServerNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ServerNotExistException", new __F__IceGrid__ServerNotExistException);
    }

    ~__F__IceGrid__ServerNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ServerNotExistException");
    }
};

const __F__IceGrid__ServerNotExistException__Init __F__IceGrid__ServerNotExistException__i;

}

IceGrid::ServerNotExistException::ServerNotExistException(const ::std::string& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

IceGrid::ServerNotExistException::~ServerNotExistException() throw()
{
}

::std::string
IceGrid::ServerNotExistException::ice_name() const
{
    return __IceGrid__ServerNotExistException_name;
}

IceGrid::ServerNotExistException*
IceGrid::ServerNotExistException::ice_clone() const
{
    return new ServerNotExistException(*this);
}

void
IceGrid::ServerNotExistException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ServerNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ServerNotExistException", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
IceGrid::ServerNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__ServerStartException_name = "IceGrid::ServerStartException";

struct __F__IceGrid__ServerStartException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ServerStartException();
    }
};

class __F__IceGrid__ServerStartException__Init
{
public:

    __F__IceGrid__ServerStartException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ServerStartException", new __F__IceGrid__ServerStartException);
    }

    ~__F__IceGrid__ServerStartException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ServerStartException");
    }
};

const __F__IceGrid__ServerStartException__Init __F__IceGrid__ServerStartException__i;

}

IceGrid::ServerStartException::ServerStartException(const ::std::string& __ice_id, const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    id(__ice_id),
    reason(__ice_reason)
{
}

IceGrid::ServerStartException::~ServerStartException() throw()
{
}

::std::string
IceGrid::ServerStartException::ice_name() const
{
    return __IceGrid__ServerStartException_name;
}

IceGrid::ServerStartException*
IceGrid::ServerStartException::ice_clone() const
{
    return new ServerStartException(*this);
}

void
IceGrid::ServerStartException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ServerStartException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ServerStartException", -1, true);
    __os->write(id);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::ServerStartException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__ServerStopException_name = "IceGrid::ServerStopException";

struct __F__IceGrid__ServerStopException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ServerStopException();
    }
};

class __F__IceGrid__ServerStopException__Init
{
public:

    __F__IceGrid__ServerStopException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ServerStopException", new __F__IceGrid__ServerStopException);
    }

    ~__F__IceGrid__ServerStopException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ServerStopException");
    }
};

const __F__IceGrid__ServerStopException__Init __F__IceGrid__ServerStopException__i;

}

IceGrid::ServerStopException::ServerStopException(const ::std::string& __ice_id, const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    id(__ice_id),
    reason(__ice_reason)
{
}

IceGrid::ServerStopException::~ServerStopException() throw()
{
}

::std::string
IceGrid::ServerStopException::ice_name() const
{
    return __IceGrid__ServerStopException_name;
}

IceGrid::ServerStopException*
IceGrid::ServerStopException::ice_clone() const
{
    return new ServerStopException(*this);
}

void
IceGrid::ServerStopException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ServerStopException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ServerStopException", -1, true);
    __os->write(id);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::ServerStopException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__AdapterNotExistException_name = "IceGrid::AdapterNotExistException";

struct __F__IceGrid__AdapterNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::AdapterNotExistException();
    }
};

class __F__IceGrid__AdapterNotExistException__Init
{
public:

    __F__IceGrid__AdapterNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::AdapterNotExistException", new __F__IceGrid__AdapterNotExistException);
    }

    ~__F__IceGrid__AdapterNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::AdapterNotExistException");
    }
};

const __F__IceGrid__AdapterNotExistException__Init __F__IceGrid__AdapterNotExistException__i;

}

IceGrid::AdapterNotExistException::AdapterNotExistException(const ::std::string& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

IceGrid::AdapterNotExistException::~AdapterNotExistException() throw()
{
}

::std::string
IceGrid::AdapterNotExistException::ice_name() const
{
    return __IceGrid__AdapterNotExistException_name;
}

IceGrid::AdapterNotExistException*
IceGrid::AdapterNotExistException::ice_clone() const
{
    return new AdapterNotExistException(*this);
}

void
IceGrid::AdapterNotExistException::ice_throw() const
{
    throw *this;
}

void
IceGrid::AdapterNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::AdapterNotExistException", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
IceGrid::AdapterNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__ObjectExistsException_name = "IceGrid::ObjectExistsException";

struct __F__IceGrid__ObjectExistsException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ObjectExistsException();
    }
};

class __F__IceGrid__ObjectExistsException__Init
{
public:

    __F__IceGrid__ObjectExistsException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ObjectExistsException", new __F__IceGrid__ObjectExistsException);
    }

    ~__F__IceGrid__ObjectExistsException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ObjectExistsException");
    }
};

const __F__IceGrid__ObjectExistsException__Init __F__IceGrid__ObjectExistsException__i;

}

IceGrid::ObjectExistsException::ObjectExistsException(const ::Ice::Identity& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

IceGrid::ObjectExistsException::~ObjectExistsException() throw()
{
}

::std::string
IceGrid::ObjectExistsException::ice_name() const
{
    return __IceGrid__ObjectExistsException_name;
}

IceGrid::ObjectExistsException*
IceGrid::ObjectExistsException::ice_clone() const
{
    return new ObjectExistsException(*this);
}

void
IceGrid::ObjectExistsException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ObjectExistsException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ObjectExistsException", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
IceGrid::ObjectExistsException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__ObjectNotRegisteredException_name = "IceGrid::ObjectNotRegisteredException";

struct __F__IceGrid__ObjectNotRegisteredException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ObjectNotRegisteredException();
    }
};

class __F__IceGrid__ObjectNotRegisteredException__Init
{
public:

    __F__IceGrid__ObjectNotRegisteredException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ObjectNotRegisteredException", new __F__IceGrid__ObjectNotRegisteredException);
    }

    ~__F__IceGrid__ObjectNotRegisteredException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ObjectNotRegisteredException");
    }
};

const __F__IceGrid__ObjectNotRegisteredException__Init __F__IceGrid__ObjectNotRegisteredException__i;

}

IceGrid::ObjectNotRegisteredException::ObjectNotRegisteredException(const ::Ice::Identity& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

IceGrid::ObjectNotRegisteredException::~ObjectNotRegisteredException() throw()
{
}

::std::string
IceGrid::ObjectNotRegisteredException::ice_name() const
{
    return __IceGrid__ObjectNotRegisteredException_name;
}

IceGrid::ObjectNotRegisteredException*
IceGrid::ObjectNotRegisteredException::ice_clone() const
{
    return new ObjectNotRegisteredException(*this);
}

void
IceGrid::ObjectNotRegisteredException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ObjectNotRegisteredException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ObjectNotRegisteredException", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
IceGrid::ObjectNotRegisteredException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__NodeNotExistException_name = "IceGrid::NodeNotExistException";

struct __F__IceGrid__NodeNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::NodeNotExistException();
    }
};

class __F__IceGrid__NodeNotExistException__Init
{
public:

    __F__IceGrid__NodeNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::NodeNotExistException", new __F__IceGrid__NodeNotExistException);
    }

    ~__F__IceGrid__NodeNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::NodeNotExistException");
    }
};

const __F__IceGrid__NodeNotExistException__Init __F__IceGrid__NodeNotExistException__i;

}

IceGrid::NodeNotExistException::NodeNotExistException(const ::std::string& __ice_name) :
    ::Ice::UserException(),
    name(__ice_name)
{
}

IceGrid::NodeNotExistException::~NodeNotExistException() throw()
{
}

::std::string
IceGrid::NodeNotExistException::ice_name() const
{
    return __IceGrid__NodeNotExistException_name;
}

IceGrid::NodeNotExistException*
IceGrid::NodeNotExistException::ice_clone() const
{
    return new NodeNotExistException(*this);
}

void
IceGrid::NodeNotExistException::ice_throw() const
{
    throw *this;
}

void
IceGrid::NodeNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::NodeNotExistException", -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
IceGrid::NodeNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__RegistryNotExistException_name = "IceGrid::RegistryNotExistException";

struct __F__IceGrid__RegistryNotExistException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::RegistryNotExistException();
    }
};

class __F__IceGrid__RegistryNotExistException__Init
{
public:

    __F__IceGrid__RegistryNotExistException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::RegistryNotExistException", new __F__IceGrid__RegistryNotExistException);
    }

    ~__F__IceGrid__RegistryNotExistException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::RegistryNotExistException");
    }
};

const __F__IceGrid__RegistryNotExistException__Init __F__IceGrid__RegistryNotExistException__i;

}

IceGrid::RegistryNotExistException::RegistryNotExistException(const ::std::string& __ice_name) :
    ::Ice::UserException(),
    name(__ice_name)
{
}

IceGrid::RegistryNotExistException::~RegistryNotExistException() throw()
{
}

::std::string
IceGrid::RegistryNotExistException::ice_name() const
{
    return __IceGrid__RegistryNotExistException_name;
}

IceGrid::RegistryNotExistException*
IceGrid::RegistryNotExistException::ice_clone() const
{
    return new RegistryNotExistException(*this);
}

void
IceGrid::RegistryNotExistException::ice_throw() const
{
    throw *this;
}

void
IceGrid::RegistryNotExistException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::RegistryNotExistException", -1, true);
    __os->write(name);
    __os->endWriteSlice();
}

void
IceGrid::RegistryNotExistException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__DeploymentException_name = "IceGrid::DeploymentException";

struct __F__IceGrid__DeploymentException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::DeploymentException();
    }
};

class __F__IceGrid__DeploymentException__Init
{
public:

    __F__IceGrid__DeploymentException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::DeploymentException", new __F__IceGrid__DeploymentException);
    }

    ~__F__IceGrid__DeploymentException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::DeploymentException");
    }
};

const __F__IceGrid__DeploymentException__Init __F__IceGrid__DeploymentException__i;

}

IceGrid::DeploymentException::DeploymentException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

IceGrid::DeploymentException::~DeploymentException() throw()
{
}

::std::string
IceGrid::DeploymentException::ice_name() const
{
    return __IceGrid__DeploymentException_name;
}

IceGrid::DeploymentException*
IceGrid::DeploymentException::ice_clone() const
{
    return new DeploymentException(*this);
}

void
IceGrid::DeploymentException::ice_throw() const
{
    throw *this;
}

void
IceGrid::DeploymentException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::DeploymentException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::DeploymentException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__NodeUnreachableException_name = "IceGrid::NodeUnreachableException";

struct __F__IceGrid__NodeUnreachableException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::NodeUnreachableException();
    }
};

class __F__IceGrid__NodeUnreachableException__Init
{
public:

    __F__IceGrid__NodeUnreachableException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::NodeUnreachableException", new __F__IceGrid__NodeUnreachableException);
    }

    ~__F__IceGrid__NodeUnreachableException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::NodeUnreachableException");
    }
};

const __F__IceGrid__NodeUnreachableException__Init __F__IceGrid__NodeUnreachableException__i;

}

IceGrid::NodeUnreachableException::NodeUnreachableException(const ::std::string& __ice_name, const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    name(__ice_name),
    reason(__ice_reason)
{
}

IceGrid::NodeUnreachableException::~NodeUnreachableException() throw()
{
}

::std::string
IceGrid::NodeUnreachableException::ice_name() const
{
    return __IceGrid__NodeUnreachableException_name;
}

IceGrid::NodeUnreachableException*
IceGrid::NodeUnreachableException::ice_clone() const
{
    return new NodeUnreachableException(*this);
}

void
IceGrid::NodeUnreachableException::ice_throw() const
{
    throw *this;
}

void
IceGrid::NodeUnreachableException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::NodeUnreachableException", -1, true);
    __os->write(name);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::NodeUnreachableException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__ServerUnreachableException_name = "IceGrid::ServerUnreachableException";

struct __F__IceGrid__ServerUnreachableException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ServerUnreachableException();
    }
};

class __F__IceGrid__ServerUnreachableException__Init
{
public:

    __F__IceGrid__ServerUnreachableException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ServerUnreachableException", new __F__IceGrid__ServerUnreachableException);
    }

    ~__F__IceGrid__ServerUnreachableException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ServerUnreachableException");
    }
};

const __F__IceGrid__ServerUnreachableException__Init __F__IceGrid__ServerUnreachableException__i;

}

IceGrid::ServerUnreachableException::ServerUnreachableException(const ::std::string& __ice_name, const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    name(__ice_name),
    reason(__ice_reason)
{
}

IceGrid::ServerUnreachableException::~ServerUnreachableException() throw()
{
}

::std::string
IceGrid::ServerUnreachableException::ice_name() const
{
    return __IceGrid__ServerUnreachableException_name;
}

IceGrid::ServerUnreachableException*
IceGrid::ServerUnreachableException::ice_clone() const
{
    return new ServerUnreachableException(*this);
}

void
IceGrid::ServerUnreachableException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ServerUnreachableException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ServerUnreachableException", -1, true);
    __os->write(name);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::ServerUnreachableException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__RegistryUnreachableException_name = "IceGrid::RegistryUnreachableException";

struct __F__IceGrid__RegistryUnreachableException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::RegistryUnreachableException();
    }
};

class __F__IceGrid__RegistryUnreachableException__Init
{
public:

    __F__IceGrid__RegistryUnreachableException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::RegistryUnreachableException", new __F__IceGrid__RegistryUnreachableException);
    }

    ~__F__IceGrid__RegistryUnreachableException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::RegistryUnreachableException");
    }
};

const __F__IceGrid__RegistryUnreachableException__Init __F__IceGrid__RegistryUnreachableException__i;

}

IceGrid::RegistryUnreachableException::RegistryUnreachableException(const ::std::string& __ice_name, const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    name(__ice_name),
    reason(__ice_reason)
{
}

IceGrid::RegistryUnreachableException::~RegistryUnreachableException() throw()
{
}

::std::string
IceGrid::RegistryUnreachableException::ice_name() const
{
    return __IceGrid__RegistryUnreachableException_name;
}

IceGrid::RegistryUnreachableException*
IceGrid::RegistryUnreachableException::ice_clone() const
{
    return new RegistryUnreachableException(*this);
}

void
IceGrid::RegistryUnreachableException::ice_throw() const
{
    throw *this;
}

void
IceGrid::RegistryUnreachableException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::RegistryUnreachableException", -1, true);
    __os->write(name);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::RegistryUnreachableException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(name);
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__BadSignalException_name = "IceGrid::BadSignalException";

struct __F__IceGrid__BadSignalException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::BadSignalException();
    }
};

class __F__IceGrid__BadSignalException__Init
{
public:

    __F__IceGrid__BadSignalException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::BadSignalException", new __F__IceGrid__BadSignalException);
    }

    ~__F__IceGrid__BadSignalException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::BadSignalException");
    }
};

const __F__IceGrid__BadSignalException__Init __F__IceGrid__BadSignalException__i;

}

IceGrid::BadSignalException::BadSignalException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

IceGrid::BadSignalException::~BadSignalException() throw()
{
}

::std::string
IceGrid::BadSignalException::ice_name() const
{
    return __IceGrid__BadSignalException_name;
}

IceGrid::BadSignalException*
IceGrid::BadSignalException::ice_clone() const
{
    return new BadSignalException(*this);
}

void
IceGrid::BadSignalException::ice_throw() const
{
    throw *this;
}

void
IceGrid::BadSignalException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::BadSignalException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::BadSignalException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__PatchException_name = "IceGrid::PatchException";

struct __F__IceGrid__PatchException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::PatchException();
    }
};

class __F__IceGrid__PatchException__Init
{
public:

    __F__IceGrid__PatchException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::PatchException", new __F__IceGrid__PatchException);
    }

    ~__F__IceGrid__PatchException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::PatchException");
    }
};

const __F__IceGrid__PatchException__Init __F__IceGrid__PatchException__i;

}

IceGrid::PatchException::PatchException(const ::Ice::StringSeq& __ice_reasons) :
    ::Ice::UserException(),
    reasons(__ice_reasons)
{
}

IceGrid::PatchException::~PatchException() throw()
{
}

::std::string
IceGrid::PatchException::ice_name() const
{
    return __IceGrid__PatchException_name;
}

IceGrid::PatchException*
IceGrid::PatchException::ice_clone() const
{
    return new PatchException(*this);
}

void
IceGrid::PatchException::ice_throw() const
{
    throw *this;
}

void
IceGrid::PatchException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::PatchException", -1, true);
    __os->write(reasons);
    __os->endWriteSlice();
}

void
IceGrid::PatchException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reasons);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__AccessDeniedException_name = "IceGrid::AccessDeniedException";

struct __F__IceGrid__AccessDeniedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::AccessDeniedException();
    }
};

class __F__IceGrid__AccessDeniedException__Init
{
public:

    __F__IceGrid__AccessDeniedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::AccessDeniedException", new __F__IceGrid__AccessDeniedException);
    }

    ~__F__IceGrid__AccessDeniedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::AccessDeniedException");
    }
};

const __F__IceGrid__AccessDeniedException__Init __F__IceGrid__AccessDeniedException__i;

}

IceGrid::AccessDeniedException::AccessDeniedException(const ::std::string& __ice_lockUserId) :
    ::Ice::UserException(),
    lockUserId(__ice_lockUserId)
{
}

IceGrid::AccessDeniedException::~AccessDeniedException() throw()
{
}

::std::string
IceGrid::AccessDeniedException::ice_name() const
{
    return __IceGrid__AccessDeniedException_name;
}

IceGrid::AccessDeniedException*
IceGrid::AccessDeniedException::ice_clone() const
{
    return new AccessDeniedException(*this);
}

void
IceGrid::AccessDeniedException::ice_throw() const
{
    throw *this;
}

void
IceGrid::AccessDeniedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::AccessDeniedException", -1, true);
    __os->write(lockUserId);
    __os->endWriteSlice();
}

void
IceGrid::AccessDeniedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(lockUserId);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__AllocationException_name = "IceGrid::AllocationException";

struct __F__IceGrid__AllocationException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::AllocationException();
    }
};

class __F__IceGrid__AllocationException__Init
{
public:

    __F__IceGrid__AllocationException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::AllocationException", new __F__IceGrid__AllocationException);
    }

    ~__F__IceGrid__AllocationException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::AllocationException");
    }
};

const __F__IceGrid__AllocationException__Init __F__IceGrid__AllocationException__i;

}

IceGrid::AllocationException::AllocationException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

IceGrid::AllocationException::~AllocationException() throw()
{
}

::std::string
IceGrid::AllocationException::ice_name() const
{
    return __IceGrid__AllocationException_name;
}

IceGrid::AllocationException*
IceGrid::AllocationException::ice_clone() const
{
    return new AllocationException(*this);
}

void
IceGrid::AllocationException::ice_throw() const
{
    throw *this;
}

void
IceGrid::AllocationException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::AllocationException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::AllocationException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__AllocationTimeoutException_name = "IceGrid::AllocationTimeoutException";

struct __F__IceGrid__AllocationTimeoutException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::AllocationTimeoutException();
    }
};

class __F__IceGrid__AllocationTimeoutException__Init
{
public:

    __F__IceGrid__AllocationTimeoutException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::AllocationTimeoutException", new __F__IceGrid__AllocationTimeoutException);
    }

    ~__F__IceGrid__AllocationTimeoutException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::AllocationTimeoutException");
    }
};

const __F__IceGrid__AllocationTimeoutException__Init __F__IceGrid__AllocationTimeoutException__i;

}

IceGrid::AllocationTimeoutException::AllocationTimeoutException(const ::std::string& __ice_reason) :
    ::IceGrid::AllocationException(__ice_reason)
{
}

IceGrid::AllocationTimeoutException::~AllocationTimeoutException() throw()
{
}

::std::string
IceGrid::AllocationTimeoutException::ice_name() const
{
    return __IceGrid__AllocationTimeoutException_name;
}

IceGrid::AllocationTimeoutException*
IceGrid::AllocationTimeoutException::ice_clone() const
{
    return new AllocationTimeoutException(*this);
}

void
IceGrid::AllocationTimeoutException::ice_throw() const
{
    throw *this;
}

void
IceGrid::AllocationTimeoutException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::AllocationTimeoutException", -1, false);
    __os->endWriteSlice();
    ::IceGrid::AllocationException::__writeImpl(__os);
}

void
IceGrid::AllocationTimeoutException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
    ::IceGrid::AllocationException::__readImpl(__is);
}

namespace
{

const char* __IceGrid__PermissionDeniedException_name = "IceGrid::PermissionDeniedException";

struct __F__IceGrid__PermissionDeniedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::PermissionDeniedException();
    }
};

class __F__IceGrid__PermissionDeniedException__Init
{
public:

    __F__IceGrid__PermissionDeniedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::PermissionDeniedException", new __F__IceGrid__PermissionDeniedException);
    }

    ~__F__IceGrid__PermissionDeniedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::PermissionDeniedException");
    }
};

const __F__IceGrid__PermissionDeniedException__Init __F__IceGrid__PermissionDeniedException__i;

}

IceGrid::PermissionDeniedException::PermissionDeniedException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

IceGrid::PermissionDeniedException::~PermissionDeniedException() throw()
{
}

::std::string
IceGrid::PermissionDeniedException::ice_name() const
{
    return __IceGrid__PermissionDeniedException_name;
}

IceGrid::PermissionDeniedException*
IceGrid::PermissionDeniedException::ice_clone() const
{
    return new PermissionDeniedException(*this);
}

void
IceGrid::PermissionDeniedException::ice_throw() const
{
    throw *this;
}

void
IceGrid::PermissionDeniedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::PermissionDeniedException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::PermissionDeniedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__ObserverAlreadyRegisteredException_name = "IceGrid::ObserverAlreadyRegisteredException";

struct __F__IceGrid__ObserverAlreadyRegisteredException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::ObserverAlreadyRegisteredException();
    }
};

class __F__IceGrid__ObserverAlreadyRegisteredException__Init
{
public:

    __F__IceGrid__ObserverAlreadyRegisteredException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::ObserverAlreadyRegisteredException", new __F__IceGrid__ObserverAlreadyRegisteredException);
    }

    ~__F__IceGrid__ObserverAlreadyRegisteredException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::ObserverAlreadyRegisteredException");
    }
};

const __F__IceGrid__ObserverAlreadyRegisteredException__Init __F__IceGrid__ObserverAlreadyRegisteredException__i;

}

IceGrid::ObserverAlreadyRegisteredException::ObserverAlreadyRegisteredException(const ::Ice::Identity& __ice_id) :
    ::Ice::UserException(),
    id(__ice_id)
{
}

IceGrid::ObserverAlreadyRegisteredException::~ObserverAlreadyRegisteredException() throw()
{
}

::std::string
IceGrid::ObserverAlreadyRegisteredException::ice_name() const
{
    return __IceGrid__ObserverAlreadyRegisteredException_name;
}

IceGrid::ObserverAlreadyRegisteredException*
IceGrid::ObserverAlreadyRegisteredException::ice_clone() const
{
    return new ObserverAlreadyRegisteredException(*this);
}

void
IceGrid::ObserverAlreadyRegisteredException::ice_throw() const
{
    throw *this;
}

void
IceGrid::ObserverAlreadyRegisteredException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::ObserverAlreadyRegisteredException", -1, true);
    __os->write(id);
    __os->endWriteSlice();
}

void
IceGrid::ObserverAlreadyRegisteredException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(id);
    __is->endReadSlice();
}

namespace
{

const char* __IceGrid__FileNotAvailableException_name = "IceGrid::FileNotAvailableException";

struct __F__IceGrid__FileNotAvailableException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceGrid::FileNotAvailableException();
    }
};

class __F__IceGrid__FileNotAvailableException__Init
{
public:

    __F__IceGrid__FileNotAvailableException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceGrid::FileNotAvailableException", new __F__IceGrid__FileNotAvailableException);
    }

    ~__F__IceGrid__FileNotAvailableException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceGrid::FileNotAvailableException");
    }
};

const __F__IceGrid__FileNotAvailableException__Init __F__IceGrid__FileNotAvailableException__i;

}

IceGrid::FileNotAvailableException::FileNotAvailableException(const ::std::string& __ice_reason) :
    ::Ice::UserException(),
    reason(__ice_reason)
{
}

IceGrid::FileNotAvailableException::~FileNotAvailableException() throw()
{
}

::std::string
IceGrid::FileNotAvailableException::ice_name() const
{
    return __IceGrid__FileNotAvailableException_name;
}

IceGrid::FileNotAvailableException*
IceGrid::FileNotAvailableException::ice_clone() const
{
    return new FileNotAvailableException(*this);
}

void
IceGrid::FileNotAvailableException::ice_throw() const
{
    throw *this;
}

void
IceGrid::FileNotAvailableException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceGrid::FileNotAvailableException", -1, true);
    __os->write(reason);
    __os->endWriteSlice();
}

void
IceGrid::FileNotAvailableException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->read(reason);
    __is->endReadSlice();
}

namespace Ice
{
}

namespace
{

const char* __sliceChecksums[] =
{
    "::IceGrid::AccessDeniedException", "e39e5ad60577c1e7b52e190e1d906b",
    "::IceGrid::AdapterNotExistException", "cee552cb69227f723030cd78b0cccc97",
    "::IceGrid::AllocationException", "ea85a8e5e5f281709bf6aa88d742",
    "::IceGrid::AllocationTimeoutException", "6695f5713499ac6de0626277e167f553",
    "::IceGrid::ApplicationNotExistException", "93fdaabe25dcf75485ffd4972223610",
    "::IceGrid::BadSignalException", "13e67e2d3f46a84aa73fd56d5812caf1",
    "::IceGrid::DeploymentException", "e316fdba8e93ef72d58bd61bbfe29e4",
    "::IceGrid::FileNotAvailableException", "a3e88ae3be93ecd4c82797ad26d6076",
    "::IceGrid::NodeNotExistException", "f07ddace1aa3cb1bbed37c3fbf862dff",
    "::IceGrid::NodeUnreachableException", "8f894a5022704f4dde30bb2a3ea326f9",
    "::IceGrid::ObjectExistsException", "833f69d3ebc872974a9f096352d2ddb",
    "::IceGrid::ObjectNotRegisteredException", "cb181c92b4dfb6e6b97f4ca806899e7",
    "::IceGrid::ObserverAlreadyRegisteredException", "e1267578f9666e2bda9952d7106fd12c",
    "::IceGrid::PatchException", "c28994d76c834b99b94cf4535a13d3",
    "::IceGrid::PermissionDeniedException", "27def8d4569ab203b629b9162d530ba",
    "::IceGrid::RegistryNotExistException", "9e1c1b717e9c5ef72886f16dbfce56f",
    "::IceGrid::RegistryUnreachableException", "514020cac28c588ae487a628e227699",
    "::IceGrid::ServerNotExistException", "6df151f3ce87bd522ed095f7ad97a941",
    "::IceGrid::ServerStartException", "ce92acafa218dd1d1e8aafab20d1",
    "::IceGrid::ServerStopException", "edb57abb5393b8b31b41f3a8e5bd111",
    "::IceGrid::ServerUnreachableException", "f3233583ef7ad8eac2f961aedafdd64",
    0
};
const IceInternal::SliceChecksumInit __sliceChecksumInit(__sliceChecksums);

}
