// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `IceBox.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef ICE_BOX_API_EXPORTS
#   define ICE_BOX_API_EXPORTS
#endif
#include <IceBox/IceBox.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <Ice/Object.h>
#include <Ice/SliceChecksums.h>
#include <IceUtil/Iterator.h>
#include <IceUtil/DisableWarnings.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 305
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 1
#       error Ice patch level mismatch!
#   endif
#endif

namespace
{

const ::std::string __IceBox__ServiceObserver__servicesStarted_name = "servicesStarted";

const ::std::string __IceBox__ServiceObserver__servicesStopped_name = "servicesStopped";

const ::std::string __IceBox__ServiceManager__getSliceChecksums_name = "getSliceChecksums";

const ::std::string __IceBox__ServiceManager__startService_name = "startService";

const ::std::string __IceBox__ServiceManager__stopService_name = "stopService";

const ::std::string __IceBox__ServiceManager__addObserver_name = "addObserver";

const ::std::string __IceBox__ServiceManager__shutdown_name = "shutdown";

}

namespace
{

const char* __IceBox__FailureException_name = "IceBox::FailureException";

}

IceBox::FailureException::FailureException(const char* __file, int __line) :
    ::Ice::LocalException(__file, __line)
{
}

IceBox::FailureException::FailureException(const char* __file, int __line, const ::std::string& __ice_reason) :
    ::Ice::LocalException(__file, __line),
    reason(__ice_reason)
{
}

IceBox::FailureException::~FailureException() throw()
{
}

::std::string
IceBox::FailureException::ice_name() const
{
    return __IceBox__FailureException_name;
}

IceBox::FailureException*
IceBox::FailureException::ice_clone() const
{
    return new FailureException(*this);
}

void
IceBox::FailureException::ice_throw() const
{
    throw *this;
}

namespace
{

const char* __IceBox__AlreadyStartedException_name = "IceBox::AlreadyStartedException";

struct __F__IceBox__AlreadyStartedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceBox::AlreadyStartedException();
    }
};

class __F__IceBox__AlreadyStartedException__Init
{
public:

    __F__IceBox__AlreadyStartedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceBox::AlreadyStartedException", new __F__IceBox__AlreadyStartedException);
    }

    ~__F__IceBox__AlreadyStartedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceBox::AlreadyStartedException");
    }
};

const __F__IceBox__AlreadyStartedException__Init __F__IceBox__AlreadyStartedException__i;

}

IceBox::AlreadyStartedException::~AlreadyStartedException() throw()
{
}

::std::string
IceBox::AlreadyStartedException::ice_name() const
{
    return __IceBox__AlreadyStartedException_name;
}

IceBox::AlreadyStartedException*
IceBox::AlreadyStartedException::ice_clone() const
{
    return new AlreadyStartedException(*this);
}

void
IceBox::AlreadyStartedException::ice_throw() const
{
    throw *this;
}

void
IceBox::AlreadyStartedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceBox::AlreadyStartedException", -1, true);
    __os->endWriteSlice();
}

void
IceBox::AlreadyStartedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __IceBox__AlreadyStoppedException_name = "IceBox::AlreadyStoppedException";

struct __F__IceBox__AlreadyStoppedException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceBox::AlreadyStoppedException();
    }
};

class __F__IceBox__AlreadyStoppedException__Init
{
public:

    __F__IceBox__AlreadyStoppedException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceBox::AlreadyStoppedException", new __F__IceBox__AlreadyStoppedException);
    }

    ~__F__IceBox__AlreadyStoppedException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceBox::AlreadyStoppedException");
    }
};

const __F__IceBox__AlreadyStoppedException__Init __F__IceBox__AlreadyStoppedException__i;

}

IceBox::AlreadyStoppedException::~AlreadyStoppedException() throw()
{
}

::std::string
IceBox::AlreadyStoppedException::ice_name() const
{
    return __IceBox__AlreadyStoppedException_name;
}

IceBox::AlreadyStoppedException*
IceBox::AlreadyStoppedException::ice_clone() const
{
    return new AlreadyStoppedException(*this);
}

void
IceBox::AlreadyStoppedException::ice_throw() const
{
    throw *this;
}

void
IceBox::AlreadyStoppedException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceBox::AlreadyStoppedException", -1, true);
    __os->endWriteSlice();
}

void
IceBox::AlreadyStoppedException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace
{

const char* __IceBox__NoSuchServiceException_name = "IceBox::NoSuchServiceException";

struct __F__IceBox__NoSuchServiceException : public ::IceInternal::UserExceptionFactory
{
    virtual void
    createAndThrow(const ::std::string&)
    {
        throw ::IceBox::NoSuchServiceException();
    }
};

class __F__IceBox__NoSuchServiceException__Init
{
public:

    __F__IceBox__NoSuchServiceException__Init()
    {
        ::IceInternal::factoryTable->addExceptionFactory("::IceBox::NoSuchServiceException", new __F__IceBox__NoSuchServiceException);
    }

    ~__F__IceBox__NoSuchServiceException__Init()
    {
        ::IceInternal::factoryTable->removeExceptionFactory("::IceBox::NoSuchServiceException");
    }
};

const __F__IceBox__NoSuchServiceException__Init __F__IceBox__NoSuchServiceException__i;

}

IceBox::NoSuchServiceException::~NoSuchServiceException() throw()
{
}

::std::string
IceBox::NoSuchServiceException::ice_name() const
{
    return __IceBox__NoSuchServiceException_name;
}

IceBox::NoSuchServiceException*
IceBox::NoSuchServiceException::ice_clone() const
{
    return new NoSuchServiceException(*this);
}

void
IceBox::NoSuchServiceException::ice_throw() const
{
    throw *this;
}

void
IceBox::NoSuchServiceException::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice("::IceBox::NoSuchServiceException", -1, true);
    __os->endWriteSlice();
}

void
IceBox::NoSuchServiceException::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

namespace Ice
{
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::IceBox::ServiceObserver;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::IceBox::upCast(::IceProxy::IceBox::ServiceObserver* p) { return p; }

void
::IceProxy::IceBox::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IceBox::ServiceObserver>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IceBox::ServiceObserver;
        v->__copyFrom(proxy);
    }
}

void
IceProxy::IceBox::ServiceObserver::servicesStarted(const ::Ice::StringSeq& services, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceBox__ServiceObserver__servicesStarted_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::IceBox::ServiceObserver* __del = dynamic_cast< ::IceDelegate::IceBox::ServiceObserver*>(__delBase.get());
            __del->servicesStarted(services, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceBox::ServiceObserver::begin_servicesStarted(const ::Ice::StringSeq& services, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceBox__ServiceObserver__servicesStarted_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceBox__ServiceObserver__servicesStarted_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(services);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceBox::ServiceObserver::end_servicesStarted(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __IceBox__ServiceObserver__servicesStarted_name);
}

void
IceProxy::IceBox::ServiceObserver::servicesStopped(const ::Ice::StringSeq& services, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceBox__ServiceObserver__servicesStopped_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::IceBox::ServiceObserver* __del = dynamic_cast< ::IceDelegate::IceBox::ServiceObserver*>(__delBase.get());
            __del->servicesStopped(services, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceBox::ServiceObserver::begin_servicesStopped(const ::Ice::StringSeq& services, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceBox__ServiceObserver__servicesStopped_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceBox__ServiceObserver__servicesStopped_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(services);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceBox::ServiceObserver::end_servicesStopped(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __IceBox__ServiceObserver__servicesStopped_name);
}

const ::std::string&
IceProxy::IceBox::ServiceObserver::ice_staticId()
{
    return ::IceBox::ServiceObserver::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IceBox::ServiceObserver::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IceBox::ServiceObserver);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IceBox::ServiceObserver::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IceBox::ServiceObserver);
}

::IceProxy::Ice::Object*
IceProxy::IceBox::ServiceObserver::__newInstance() const
{
    return new ServiceObserver;
}
#ifdef __SUNPRO_CC
class ICE_DECLSPEC_EXPORT IceProxy::IceBox::ServiceManager;
#endif
ICE_DECLSPEC_EXPORT ::IceProxy::Ice::Object* ::IceProxy::IceBox::upCast(::IceProxy::IceBox::ServiceManager* p) { return p; }

void
::IceProxy::IceBox::__read(::IceInternal::BasicStream* __is, ::IceInternal::ProxyHandle< ::IceProxy::IceBox::ServiceManager>& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::IceBox::ServiceManager;
        v->__copyFrom(proxy);
    }
}

::Ice::SliceChecksumDict
IceProxy::IceBox::ServiceManager::getSliceChecksums(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceBox__ServiceManager__getSliceChecksums_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceBox__ServiceManager__getSliceChecksums_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceBox::ServiceManager* __del = dynamic_cast< ::IceDelegate::IceBox::ServiceManager*>(__delBase.get());
            return __del->getSliceChecksums(__ctx, __observer);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceBox::ServiceManager::begin_getSliceChecksums(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceBox__ServiceManager__getSliceChecksums_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceBox__ServiceManager__getSliceChecksums_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceBox__ServiceManager__getSliceChecksums_name, ::Ice::Nonmutating, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::SliceChecksumDict
IceProxy::IceBox::ServiceManager::end_getSliceChecksums(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceBox__ServiceManager__getSliceChecksums_name);
    ::Ice::SliceChecksumDict __ret;
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        ::IceInternal::BasicStream* __is = __result->__startReadParams();
        __is->read(__ret);
        __result->__endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IceBox::ServiceManager::startService(const ::std::string& service, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceBox__ServiceManager__startService_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceBox__ServiceManager__startService_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceBox::ServiceManager* __del = dynamic_cast< ::IceDelegate::IceBox::ServiceManager*>(__delBase.get());
            __del->startService(service, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceBox::ServiceManager::begin_startService(const ::std::string& service, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceBox__ServiceManager__startService_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceBox__ServiceManager__startService_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceBox__ServiceManager__startService_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(service);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceBox::ServiceManager::end_startService(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceBox__ServiceManager__startService_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IceBox::AlreadyStartedException&)
            {
                throw;
            }
            catch(const ::IceBox::NoSuchServiceException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IceBox::ServiceManager::stopService(const ::std::string& service, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceBox__ServiceManager__stopService_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__IceBox__ServiceManager__stopService_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::IceBox::ServiceManager* __del = dynamic_cast< ::IceDelegate::IceBox::ServiceManager*>(__delBase.get());
            __del->stopService(service, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceBox::ServiceManager::begin_stopService(const ::std::string& service, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__IceBox__ServiceManager__stopService_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceBox__ServiceManager__stopService_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceBox__ServiceManager__stopService_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(service);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceBox::ServiceManager::end_stopService(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __IceBox__ServiceManager__stopService_name);
    bool __ok = __result->__wait();
    try
    {
        if(!__ok)
        {
            try
            {
                __result->__throwUserException();
            }
            catch(const ::IceBox::AlreadyStoppedException&)
            {
                throw;
            }
            catch(const ::IceBox::NoSuchServiceException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
            }
        }
        __result->__readEmptyParams();
    }
    catch(const ::Ice::LocalException& ex)
    {
        __result->__getObserver().failed(ex.ice_name());
        throw;
    }
}

void
IceProxy::IceBox::ServiceManager::addObserver(const ::IceBox::ServiceObserverPrx& observer, const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceBox__ServiceManager__addObserver_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::IceBox::ServiceManager* __del = dynamic_cast< ::IceDelegate::IceBox::ServiceManager*>(__delBase.get());
            __del->addObserver(observer, __ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceBox::ServiceManager::begin_addObserver(const ::IceBox::ServiceObserverPrx& observer, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceBox__ServiceManager__addObserver_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceBox__ServiceManager__addObserver_name, ::Ice::Normal, __ctx);
        ::IceInternal::BasicStream* __os = __result->__startWriteParams(::Ice::DefaultFormat);
        __os->write(observer);
        __result->__endWriteParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceBox::ServiceManager::end_addObserver(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __IceBox__ServiceManager__addObserver_name);
}

void
IceProxy::IceBox::ServiceManager::shutdown(const ::Ice::Context* __ctx)
{
    ::IceInternal::InvocationObserver __observer(this, __IceBox__ServiceManager__shutdown_name, __ctx);
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::IceBox::ServiceManager* __del = dynamic_cast< ::IceDelegate::IceBox::ServiceManager*>(__delBase.get());
            __del->shutdown(__ctx, __observer);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapper(__delBase, __ex, __observer);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt, __observer);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::IceBox::ServiceManager::begin_shutdown(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __IceBox__ServiceManager__shutdown_name, __del, __cookie);
    try
    {
        __result->__prepare(__IceBox__ServiceManager__shutdown_name, ::Ice::Normal, __ctx);
        __result->__writeEmptyParams();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::IceBox::ServiceManager::end_shutdown(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __IceBox__ServiceManager__shutdown_name);
}

const ::std::string&
IceProxy::IceBox::ServiceManager::ice_staticId()
{
    return ::IceBox::ServiceManager::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::IceBox::ServiceManager::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::IceBox::ServiceManager);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::IceBox::ServiceManager::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::IceBox::ServiceManager);
}

::IceProxy::Ice::Object*
IceProxy::IceBox::ServiceManager::__newInstance() const
{
    return new ServiceManager;
}

void
IceDelegateM::IceBox::ServiceObserver::servicesStarted(const ::Ice::StringSeq& services, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceBox__ServiceObserver__servicesStarted_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(services);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::IceBox::ServiceObserver::servicesStopped(const ::Ice::StringSeq& services, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceBox__ServiceObserver__servicesStopped_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(services);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::SliceChecksumDict
IceDelegateM::IceBox::ServiceManager::getSliceChecksums(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceBox__ServiceManager__getSliceChecksums_name, ::Ice::Nonmutating, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    ::Ice::SliceChecksumDict __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.startReadParams();
        __is->read(__ret);
        __og.endReadParams();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IceBox::ServiceManager::startService(const ::std::string& service, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceBox__ServiceManager__startService_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(service);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IceBox::AlreadyStartedException&)
            {
                throw;
            }
            catch(const ::IceBox::NoSuchServiceException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IceBox::ServiceManager::stopService(const ::std::string& service, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceBox__ServiceManager__stopService_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(service);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::IceBox::AlreadyStoppedException&)
            {
                throw;
            }
            catch(const ::IceBox::NoSuchServiceException&)
            {
                throw;
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        __og.readEmptyParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::IceBox::ServiceManager::addObserver(const ::IceBox::ServiceObserverPrx& observer, const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceBox__ServiceManager__addObserver_name, ::Ice::Normal, __context, __observer);
    try
    {
        ::IceInternal::BasicStream* __os = __og.startWriteParams(::Ice::DefaultFormat);
        __os->write(observer);
        __og.endWriteParams();
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::IceBox::ServiceManager::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver& __observer)
{
    ::IceInternal::Outgoing __og(__handler.get(), __IceBox__ServiceManager__shutdown_name, ::Ice::Normal, __context, __observer);
    __og.writeEmptyParams();
    bool __ok = __og.invoke();
    if(__og.hasResponse())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.readEmptyParams();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::IceBox::ServiceObserver::servicesStarted(const ::Ice::StringSeq& services, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::StringSeq& __p_services, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_services(__p_services)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceBox::ServiceObserver* servant = dynamic_cast< ::IceBox::ServiceObserver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->servicesStarted(_m_services, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::StringSeq& _m_services;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceBox__ServiceObserver__servicesStarted_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(services, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::IceBox::ServiceObserver::servicesStopped(const ::Ice::StringSeq& services, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::StringSeq& __p_services, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_services(__p_services)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceBox::ServiceObserver* servant = dynamic_cast< ::IceBox::ServiceObserver*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->servicesStopped(_m_services, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Ice::StringSeq& _m_services;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceBox__ServiceObserver__servicesStopped_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(services, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::SliceChecksumDict
IceDelegateD::IceBox::ServiceManager::getSliceChecksums(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::SliceChecksumDict& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceBox::ServiceManager* servant = dynamic_cast< ::IceBox::ServiceManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->getSliceChecksums(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::SliceChecksumDict& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceBox__ServiceManager__getSliceChecksums_name, ::Ice::Nonmutating, __context);
    ::Ice::SliceChecksumDict __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::IceBox::ServiceManager::startService(const ::std::string& service, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_service, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_service(__p_service)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceBox::ServiceManager* servant = dynamic_cast< ::IceBox::ServiceManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->startService(_m_service, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_service;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceBox__ServiceManager__startService_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(service, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IceBox::AlreadyStartedException&)
    {
        throw;
    }
    catch(const ::IceBox::NoSuchServiceException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::IceBox::ServiceManager::stopService(const ::std::string& service, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::std::string& __p_service, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_service(__p_service)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceBox::ServiceManager* servant = dynamic_cast< ::IceBox::ServiceManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            try
            {
                servant->stopService(_m_service, _current);
                return ::Ice::DispatchOK;
            }
            catch(const ::Ice::UserException& __ex)
            {
                setUserException(__ex);
                return ::Ice::DispatchUserException;
            }
        }
        
    private:
        
        const ::std::string& _m_service;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceBox__ServiceManager__stopService_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(service, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::IceBox::AlreadyStoppedException&)
    {
        throw;
    }
    catch(const ::IceBox::NoSuchServiceException&)
    {
        throw;
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::IceBox::ServiceManager::addObserver(const ::IceBox::ServiceObserverPrx& observer, const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::IceBox::ServiceObserverPrx& __p_observer, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_observer(__p_observer)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceBox::ServiceManager* servant = dynamic_cast< ::IceBox::ServiceManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->addObserver(_m_observer, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::IceBox::ServiceObserverPrx& _m_observer;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceBox__ServiceManager__addObserver_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(observer, __current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::IceBox::ServiceManager::shutdown(const ::Ice::Context* __context, ::IceInternal::InvocationObserver&)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::IceBox::ServiceManager* servant = dynamic_cast< ::IceBox::ServiceManager*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->shutdown(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __IceBox__ServiceManager__shutdown_name, ::Ice::Normal, __context);
    try
    {
        _DirectI __direct(__current);
        try
        {
            __direct.getServant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::LocalObject* IceBox::upCast(::IceBox::Service* p) { return p; }

ICE_DECLSPEC_EXPORT ::Ice::Object* IceBox::upCast(::IceBox::ServiceObserver* p) { return p; }

namespace
{
const ::std::string __IceBox__ServiceObserver_ids[2] =
{
    "::Ice::Object",
    "::IceBox::ServiceObserver"
};

}

bool
IceBox::ServiceObserver::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IceBox__ServiceObserver_ids, __IceBox__ServiceObserver_ids + 2, _s);
}

::std::vector< ::std::string>
IceBox::ServiceObserver::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IceBox__ServiceObserver_ids[0], &__IceBox__ServiceObserver_ids[2]);
}

const ::std::string&
IceBox::ServiceObserver::ice_id(const ::Ice::Current&) const
{
    return __IceBox__ServiceObserver_ids[1];
}

const ::std::string&
IceBox::ServiceObserver::ice_staticId()
{
    return __IceBox__ServiceObserver_ids[1];
}

::Ice::DispatchStatus
IceBox::ServiceObserver::___servicesStarted(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::StringSeq services;
    __is->read(services);
    __inS.endReadParams();
    servicesStarted(services, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceBox::ServiceObserver::___servicesStopped(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::Ice::StringSeq services;
    __is->read(services);
    __inS.endReadParams();
    servicesStopped(services, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __IceBox__ServiceObserver_all[] =
{
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "servicesStarted",
    "servicesStopped"
};

}

::Ice::DispatchStatus
IceBox::ServiceObserver::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IceBox__ServiceObserver_all, __IceBox__ServiceObserver_all + 6, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IceBox__ServiceObserver_all)
    {
        case 0:
        {
            return ___ice_id(in, current);
        }
        case 1:
        {
            return ___ice_ids(in, current);
        }
        case 2:
        {
            return ___ice_isA(in, current);
        }
        case 3:
        {
            return ___ice_ping(in, current);
        }
        case 4:
        {
            return ___servicesStarted(in, current);
        }
        case 5:
        {
            return ___servicesStopped(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IceBox::ServiceObserver::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IceBox::ServiceObserver::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
IceBox::__patch(ServiceObserverPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IceBox::ServiceObserverPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IceBox::ServiceObserver::ice_staticId(), v);
    }
}

ICE_DECLSPEC_EXPORT ::Ice::Object* IceBox::upCast(::IceBox::ServiceManager* p) { return p; }

namespace
{
const ::std::string __IceBox__ServiceManager_ids[2] =
{
    "::Ice::Object",
    "::IceBox::ServiceManager"
};

}

bool
IceBox::ServiceManager::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__IceBox__ServiceManager_ids, __IceBox__ServiceManager_ids + 2, _s);
}

::std::vector< ::std::string>
IceBox::ServiceManager::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__IceBox__ServiceManager_ids[0], &__IceBox__ServiceManager_ids[2]);
}

const ::std::string&
IceBox::ServiceManager::ice_id(const ::Ice::Current&) const
{
    return __IceBox__ServiceManager_ids[1];
}

const ::std::string&
IceBox::ServiceManager::ice_staticId()
{
    return __IceBox__ServiceManager_ids[1];
}

::Ice::DispatchStatus
IceBox::ServiceManager::___getSliceChecksums(::IceInternal::Incoming& __inS, const ::Ice::Current& __current) const
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.readEmptyParams();
    ::Ice::SliceChecksumDict __ret = getSliceChecksums(__current);
    ::IceInternal::BasicStream* __os = __inS.__startWriteParams(::Ice::DefaultFormat);
    __os->write(__ret);
    __inS.__endWriteParams(true);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceBox::ServiceManager::___startService(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string service;
    __is->read(service);
    __inS.endReadParams();
    try
    {
        startService(service, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::IceBox::AlreadyStartedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::IceBox::NoSuchServiceException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IceBox::ServiceManager::___stopService(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::std::string service;
    __is->read(service);
    __inS.endReadParams();
    try
    {
        stopService(service, __current);
        __inS.__writeEmptyParams();
        return ::Ice::DispatchOK;
    }
    catch(const ::IceBox::AlreadyStoppedException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    catch(const ::IceBox::NoSuchServiceException& __ex)
    {
        __inS.__writeUserException(__ex, ::Ice::DefaultFormat);
    }
    return ::Ice::DispatchUserException;
}

::Ice::DispatchStatus
IceBox::ServiceManager::___addObserver(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.startReadParams();
    ::IceBox::ServiceObserverPrx observer;
    __is->read(observer);
    __inS.endReadParams();
    addObserver(observer, __current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
IceBox::ServiceManager::___shutdown(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Normal, __current.mode);
    __inS.readEmptyParams();
    shutdown(__current);
    __inS.__writeEmptyParams();
    return ::Ice::DispatchOK;
}

namespace
{
const ::std::string __IceBox__ServiceManager_all[] =
{
    "addObserver",
    "getSliceChecksums",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "shutdown",
    "startService",
    "stopService"
};

}

::Ice::DispatchStatus
IceBox::ServiceManager::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< const ::std::string*, const ::std::string*> r = ::std::equal_range(__IceBox__ServiceManager_all, __IceBox__ServiceManager_all + 9, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __IceBox__ServiceManager_all)
    {
        case 0:
        {
            return ___addObserver(in, current);
        }
        case 1:
        {
            return ___getSliceChecksums(in, current);
        }
        case 2:
        {
            return ___ice_id(in, current);
        }
        case 3:
        {
            return ___ice_ids(in, current);
        }
        case 4:
        {
            return ___ice_isA(in, current);
        }
        case 5:
        {
            return ___ice_ping(in, current);
        }
        case 6:
        {
            return ___shutdown(in, current);
        }
        case 7:
        {
            return ___startService(in, current);
        }
        case 8:
        {
            return ___stopService(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
IceBox::ServiceManager::__writeImpl(::IceInternal::BasicStream* __os) const
{
    __os->startWriteSlice(ice_staticId(), -1, true);
    __os->endWriteSlice();
}

void
IceBox::ServiceManager::__readImpl(::IceInternal::BasicStream* __is)
{
    __is->startReadSlice();
    __is->endReadSlice();
}

void ICE_DECLSPEC_EXPORT 
IceBox::__patch(ServiceManagerPtr& handle, const ::Ice::ObjectPtr& v)
{
    handle = ::IceBox::ServiceManagerPtr::dynamicCast(v);
    if(v && !handle)
    {
        IceInternal::Ex::throwUOE(::IceBox::ServiceManager::ice_staticId(), v);
    }
}

namespace
{

const char* __sliceChecksums[] =
{
    "::IceBox::AlreadyStartedException", "d5b097af3221b37482d5f175502abf62",
    "::IceBox::AlreadyStoppedException", "281d493a84d674b3a4335d6afc2c16",
    "::IceBox::NoSuchServiceException", "5957f1c582d9aebad557cbdb7820d4",
    "::IceBox::ServiceManager", "df3a42670c3ce4ef67d6125a5d04d4c",
    "::IceBox::ServiceObserver", "f657781cda7438532a6c33e95988479c",
    0
};
const IceInternal::SliceChecksumInit __sliceChecksumInit(__sliceChecksums);

}
